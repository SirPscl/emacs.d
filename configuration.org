#+TITLE: Emacs Configuration

* Dependencies

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(
                         ("gnu" . "https://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
(package-initialize)

(defvar my-packages '(
                      ac-math
                      airline-themes
                      auctex
                      auto-complete
                      dash
                      dictcc
                      dictionary
                      drag-stuff
                      dumb-jump
                      elfeed
                      elfeed-org
                      elfeed-goodies
                      elpy
                      emojify
                      evil
                      evil-ediff
                      evil-god-state
                      evil-leader
                      evil-magit
                      evil-mu4e
                      evil-org
                      fill-column-indicator
                      fixme-mode
                      fsharp-mode
                      grizzl
                      haml-mode
                      helm-projectile
                      js2-mode
                      lua-mode
                      markdown-mode
                      mu4e-alert
                      mu4e-maildirs-extension
                      openwith
                      org-bullets
                      projectile
                      powerline
                      rainbow-delimiters
                      smex
                      spaceline
                      spaceline-all-the-icons
                      tern
                      tern-auto-complete
                      web-beautify
                      web-mode
                      yaml-mode))

                      ;;ruby-electric
(dolist (p my-packages)
  (unless (package-installed-p p)
    (package-install p)))
#+END_SRC

* User Interface
** Menu, Toolbar and Splashscreen

No fancy stuff for me.

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(menu-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

** Line- and Columnnumbers

#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
(column-number-mode)
#+END_SRC

** Modeline 
   
#+BEGIN_SRC emacs-lisp
(require 'spaceline-config)
(spaceline-spacemacs-theme)
(require 'spaceline-all-the-icons)
(use-package spaceline-all-the-icons 
  :after spaceline
  :config (progn
            (spaceline-all-the-icons-theme)
            (setq spaceline-all-the-icons-separator-type 'slant)))

#+END_SRC

** Themes

Load Moe Theme (TODO: fix this)

#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/moe-theme/")
(add-to-list 'load-path "~/.emacs.d/themes/moe-theme/")
(require 'moe-theme)
#+END_SRC

Powerline Theme

#+BEGIN_SRC emacs-lisp
(require 'powerline)
;(powerline-moe-theme)
;(moe-theme-set-color 'b/w)
;(powerline-center-theme)
;;(require 'airline-themes)
#+END_SRC

Theme rotation

#+BEGIN_SRC emacs-lisp
(require 'dash)

(defun next-theme ()
  "Loads next theme in the theme-list"
  (interactive)
  ;;(setq powerline-theme-list (-rotate 1 powerline-theme-list))
  ;;(load-theme (nth 0 powerline-theme-list) t)
  (setq theme-list (-rotate 1 theme-list))
  (load-theme (nth 0 theme-list) t))

(defun reset-theme ()
  "Loads the default theme settings"
  (interactive)
  ;; (setq powerline-theme-list (list
  ;;                   'airline-badwolf
  ;;                   'airline-papercolor))
  ;; (load-theme (nth 0 powerline-theme-list) t)
  (setq theme-list (list
                    'moe-dark
                    'moe-light))
  (load-theme (nth 0 theme-list) t))

(reset-theme)
#+END_SRC

** Matching Brackets

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(setq show-paren-style 'mixed)
(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp
(setq default-frame-alist
      '((font . "DejaVu Sans Mono-12")))
#+END_SRC

** Emojify

# TODO: Emojify-mode for emails

#+BEGIN_SRC emacs-lisp
;(global-emojify-mode)
#+END_SRC

* General Setup
** Symlinks

Always Follow Symlinks, no questions asked.

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks nil)
#+END_SRC

** Backup files

No backup files.

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

** Kill buffers

#+BEGIN_SRC emacs-lisp
(defun kill-other-buffers ()
      "Kill all other buffers."
      (interactive)
      (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+END_SRC

** Sudo-mode

Save file with root.

#+BEGIN_SRC emacs-lisp
(defun sudo-save ()
  (interactive)
  (if (not buffer-file-name)
      (write-file (concat "/sudo:root@localhost:" (ido-read-file-name "File:")))
    (write-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC

** Evil

I am evil.

#+BEGIN_SRC emacs-lisp
(require 'evil-org)
(require 'evil-ediff)
(require 'evil)
(evil-mode 1)
#+END_SRC

Evil commands

#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "ww" 'sudo-save)
#+END_SRC

** Smex

A better M-x.

#+BEGIN_SRC emacs-lisp
(require 'smex)
(smex-initialize)
#+END_SRC

** Fixme-mode

Highlight `FIXME`, `BUG` and `TODO`.

#+BEGIN_SRC emacs-lisp
(fixme-mode t)
#+END_SRC

** Spell Checking

#+BEGIN_SRC emacs-lisp
(require 'ispell)
(setq ispell-program-name "hunspell")
(setq ispell-local-dictionary "en_GB")

(defun flyspell-check-next-highlighted-word ()
  "Custom function to spell check next highlighted word"
  (interactive)
  (flyspell-goto-next-error)
  (ispell-word))
#+END_SRC

** Org Mode

Nice bullets.

#+BEGIN_SRC emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
(projectile-global-mode)
(setq projectile-completion-system 'grizzl) ;; to compare with default (ido)
(setq projectile-enable-caching t)
;;(setq projectile-require-project-root nil) ;; use projectile everywhere
#+END_SRC

** Ido

#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode 1)
(ido-everywhere 1)
(setq ido-enable-flex-matching t)
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
(setq helm-buffers-fuzzy-matching 1)
(helm-projectile-on)
#+END_SRC

** Feeds

Set up elfeed.

#+BEGIN_SRC emacs-lisp
(require 'elfeed)
(require 'elfeed-goodies)
(require 'elfeed-org)
(elfeed-goodies/setup)
(elfeed-org)
(setq rmh-elfeed-org-files (list "~/git/config/emacs/elfeed.org"))

(defun elfeed-search-format-date (date)
  (format-time-string "%d.%m.%Y %H:%M" (seconds-to-time date)))
  
(defun elfeed-goodies/search-header-draw ()
  "Returns the string to be used as the Elfeed header."
  (if (zerop (elfeed-db-last-update))
      (elfeed-search--intro-header)
    (let* ((separator-left (intern (format "powerline-%s-%s"
                                           elfeed-goodies/powerline-default-separator
                                           (car powerline-default-separator-dir))))
           (separator-right (intern (format "powerline-%s-%s"
                                            elfeed-goodies/powerline-default-separator
                                            (cdr powerline-default-separator-dir))))
           (db-time (seconds-to-time (elfeed-db-last-update)))
           (stats (-elfeed/feed-stats))
           (search-filter (cond
                           (elfeed-search-filter-active
                            "")
                           (elfeed-search-filter
                            elfeed-search-filter)
                           (""))))
      (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
          (search-header/draw-wide separator-left separator-right search-filter stats db-time)
        (search-header/draw-tight separator-left separator-right search-filter stats db-time)))))

(defun elfeed-goodies/entry-line-draw (entry)
  "Print ENTRY to the buffer."

  (let* ((title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
         (date (elfeed-search-format-date (elfeed-entry-date entry)))
         (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
         (feed (elfeed-entry-feed entry))
         (feed-title
          (when feed
            (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
         (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
         (tags-str (concat "[" (mapconcat 'identity tags ",") "]"))
         (title-width (- (window-width) elfeed-goodies/feed-source-column-width
                         elfeed-goodies/tag-column-width 4))
         (title-column (elfeed-format-column
                        title (elfeed-clamp
                               elfeed-search-title-min-width
                               title-width
                               title-width)
                        :left))
         (tag-column (elfeed-format-column
                      tags-str (elfeed-clamp (length tags-str)
                                             elfeed-goodies/tag-column-width
                                             elfeed-goodies/tag-column-width)
                      :left))
         (feed-column (elfeed-format-column
                       feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width)
                       :left)))

    (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
        (progn
          (insert (propertize date 'face 'elfeed-search-date-face) " ")
          (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
          (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
          (insert (propertize title 'face title-faces 'kbd-help title)))
      (insert (propertize title 'face title-faces 'kbd-help title)))))

#+END_SRC

** Mail
*** Setup

Load it.

#+BEGIN_SRC emacs-lisp
(require 'mu4e)
(require 'mu4e-maildirs-extension)
(require 'mu4e-contrib)
(require 'evil-mu4e)
(require 'smtpmail)
#+END_SRC

Dont reply to myself.

#+BEGIN_SRC emacs-lisp
(setq mu4e-compose-dont-reply-to-self t)
#+END_SRC

My contexts.

#+BEGIN_SRC emacs-lisp
(setq mu4e-contexts nil)
(load-file "~/git/config/emacs/private.el")
(setq mu4e-context-policy 'pick-first)
(setq mu4e-compose-context-policy 'ask-if-none)
#+END_SRC

Sending messages.

#+BEGIN_SRC emacs-lisp
(setq message-send-mail-function 'smtpmail-send-it)
(setq starttls-use-gnutls t)
(setq smtpmail-debug-info t)
#+END_SRC

Activate Alert

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
#+END_SRC

Show me the addresses, not only names.

#+BEGIN_SRC emacs-lisp
(setq mu4e-view-show-addresses t)
#+END_SRC

Show text, not html.

#+BEGIN_SRC emacs-lisp
(setq mu4e-html2text-command 'mu4e-shr2text)
#+END_SRC

No automatic line breaks.

#+BEGIN_SRC emacs-lisp
(defun no-auto-fill ()
  "Turn off auto-fill-mode."
  (auto-fill-mode -1))
(add-hook 'mu4e-compose-mode-hook #'no-auto-fill)
#+END_SRC

View mail in browser (with "aV").

#+BEGIN_SRC emacs-lisp
(add-to-list 'mu4e-view-actions
             '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#+END_SRC

Skip duplicates

#+BEGIN_SRC emacs-lisp
(setq mu4e-headers-skip-duplicates t)
#+END_SRC

Some self explanatory settings.

#+BEGIN_SRC emacs-lisp
(setq mu4e-maildir "~/.mail")
(setq mu4e-get-mail-command "offlineimap -o")
(setq message-kill-buffer-on-exit t)
#+END_SRC

*** Forgotten Attachment

Check for forgotten attachments

#+BEGIN_SRC emacs-lisp
(defvar my-message-attachment-regexp "\\([Ww]e send\\|[Ii] send\\|attach\\|angehängt\\|[aA]nhang\\|[aA]ngehängt\\|[sS]chicke\\|haenge\\|hänge\\)")
(defun my-message-check-attachment nil
  "Check if there is an attachment in the message if I claim it."
  (save-excursion
    (message-goto-body)
    (when (search-forward-regexp my-message-attachment-regexp nil t nil)
      (message-goto-body)
      (unless (message-y-or-n-p
               "Did you attach all documents?" nil nil)
        (error "No message sent, add them attachments!")))))
(add-hook 'message-send-hook 'my-message-check-attachment)
#+END_SRC

* Programming Setup
** Autocomplete

#+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(ac-config-default)
#+END_SRC

** 70 columns indicator.

#+BEGIN_SRC emacs-lisp
(require 'fill-column-indicator)
(setq fci-rule-width 1)
(setq fci-rule-color "red")
#+END_SRC

** Web mode

#+BEGIN_SRC emacs-lisp
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tag?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb?\\'" . web-mode))

(setq web-mode-markup-indent-offset 2)
(setq web-mode-code-indent-offset 2)
(setq web-mode-css-indent-offset 2)
(setq web-mode-script-padding 2)
#+END_SRC

** Web-beautify

Keybinding to beautify manually.

#+BEGIN_SRC emacs-lisp
(require 'web-beautify) ;; Not necessary if using ELPA package
(eval-after-load 'js2-mode
  '(define-key js2-mode-map (kbd "C-c b") 'web-beautify-js))
;; Or if you're using 'js-mode' (a.k.a 'javascript-mode')
(eval-after-load 'js
  '(define-key js-mode-map (kbd "C-c b") 'web-beautify-js))

(eval-after-load 'json-mode
  '(define-key json-mode-map (kbd "C-c b") 'web-beautify-js))

(eval-after-load 'sgml-mode
  '(define-key html-mode-map (kbd "C-c b") 'web-beautify-html))

(eval-after-load 'web-mode
  '(define-key web-mode-map (kbd "C-c b") 'web-beautify-html))

(eval-after-load 'css-mode
  '(define-key css-mode-map (kbd "C-c b") 'web-beautify-css))
#+END_SRC

** Latex

To make evince go to the updated page when using auctex to compile.

#+BEGIN_SRC emacs-lisp
(setq TeX-view-program-list '(("Evince" "evince --page-index=%(outpage) %o")))
(setq TeX-view-program-selection '((output-pdf "Evince")))
#+END_SRC

Use evince and firefox

#+BEGIN_SRC emacs-lisp
(setq TeX-output-view-style
      (quote
       (("^pdf$" "." "evince -f %o")
        ("^html?$" "." "firefox %o"))))
#+END_SRC

I put a `make.sh` in the root of latex documents along with the main tex file `main.tex` and of course the `.gitignore`.

#+BEGIN_SRC emacs-lisp
(defun my-latex-compile-quick ()
  "runs make.sh -q -s (..) in the latex root"
  (interactive)
  (let* ((main-folder (get-latex-main-folder
                       (file-name-directory buffer-file-name)))
         (command (concat "sh " main-folder "make.sh " "-q "
                          "-s " (number-to-string
                                 (line-number-at-pos)) ":"
                          (buffer-file-name))))
    (start-process "my-latex" "latex-make"
                   (concat main-folder "make.sh") "-q"
                   "-s" (concat (number-to-string
                                 (line-number-at-pos)) ":"
                                 (buffer-file-name)))))

(defun my-latex-compile-full ()
  "runs make.sh -f -s (..) in the latex root"
  (interactive)
  (let* ((main-folder (get-latex-main-folder
                       (file-name-directory buffer-file-name)))
         (command (concat "sh " main-folder "make.sh " "-f "
                          "-s " (number-to-string
                                 (line-number-at-pos)) ":"
                          (buffer-file-name))))
    (start-process "my-latex" "latex-make"
                   (concat main-folder "make.sh") "-f"
                   "-s" (concat (number-to-string
                                 (line-number-at-pos)) ":"
                                 (buffer-file-name)))))

(defun update-evince ()
  "updates evince"
  (interactive)
  (let* ((main-folder (get-latex-main-folder
                       (file-name-directory buffer-file-name)))
         (command (concat "sh " main-folder "make.sh " "-f "
                          "-s " (number-to-string
                                 (line-number-at-pos)) ":"
                          (buffer-file-name))))
    (start-process "my-latex" "latex-make"
                   (concat main-folder "make.sh") "-f"
                   "-s" (concat (number-to-string
                                 (line-number-at-pos)) ":"
                                 (buffer-file-name)))))

(defun my-latex-clean ()
  "runs make.sh -c in the latex root"
  (interactive)
  (let ((main-folder (get-latex-main-folder
                      (file-name-directory buffer-file-name))))
    (shell-command-to-string (concat "sh " main-folder
                                     "make.sh clean"))))

(defun get-latex-main-folder (path)
  "recursively gets the root folder of the latex project"
  (interactive)
  (if (not (string= path "/"))
      (if (is-latex-root path)
          path
        (get-latex-main-folder (folder-up path)))))

(defun folder-up (path)
  "removes last folder of path"
  (file-name-directory (directory-file-name path)))

(defun is-latex-root (path)
  "returns t if the path is the root folder of the latex project"
  (interactive)
  (and (file-exists-p (concat path ".gitignore"))
       (file-exists-p (concat path "main.tex"))
       (file-exists-p (concat path "make.sh"))))
#+END_SRC

** Python

Use jupyter/ipython if present

#+BEGIN_SRC emacs-lisp
;;(when (executable-find "ipython3")
;;  (setq python-shell-interpreter "ipython3")
;;  (setq python-shell-interpreter-args "--simple-prompt --pprint"))
#+END_SRC

Auto complete with jedi
#+BEGIN_SRC emacs-lisp
;;(add-hook 'python-mode-hook 'jedi:setup)
;;(setq jedi:complete-on-dot t)
#+END_SRC
** Indents

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)
(setq js-indent-level 2)
(setq python-indent 2)
(setq css-indent-offset 2)
(add-hook 'sh-mode-hook
          (lambda ()
            (setq sh-basic-offset 2
                  sh-indentation 2)))
#+END_SRC

Use 2 spaces instead of a tab.

** Whitespaces

To see whitespaces and indentation

#+BEGIN_SRC emacs-lisp
(require 'whitespace)
#+END_SRC

** Markdown Mode

#+BEGIN_SRC emacs-lisp
(require 'markdown-mode)
(setq markdown-command "pandoc")
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
(require 'evil-magit)
#+END_SRC

* Keybinding
** Elfeed

#+BEGIN_SRC emacs-lisp
(add-hook 'elfeed-search-mode-hook
          (lambda ()
            (define-key evil-normal-state-local-map
              (kbd "c") 'elfeed-reset-filter)
            (define-key evil-normal-state-local-map
              (kbd "r") 'elfeed-toggle-filter-unread)
            (define-key evil-normal-state-local-map
              (kbd ";") 'elfeed-select-filter)
            (define-key evil-normal-state-local-map
              (kbd "F") 'elfeed-search-live-filter)
            (define-key evil-normal-state-local-map
              (kbd "!") 'elfeed-search-untag-all-unread)
            (define-key evil-normal-state-local-map
              (kbd "u") 'elfeed-search-tag-all-unread)
            (define-key evil-normal-state-local-map
              (kbd "O") 'elfeed-search-browse-url)
            (define-key evil-normal-state-local-map
              (kbd "U") 'elfeed-update)
            (define-key evil-normal-state-local-map
              (kbd "RET") 'elfeed-goodies/split-search-show-entry)))
(add-hook 'elfeed-show-mode-hook
          (lambda ()
            (define-key evil-normal-state-local-map
              (kbd "n") 'elfeed-goodies/split-show-next)
            (define-key evil-normal-state-local-map
              (kbd "p") 'elfeed-goodies/split-show-prev)))
#+END_SRC

** Evil

Evil Normal State

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
(define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
#+END_SRC

** Evil Escape

Escape == C-g

#+BEGIN_SRC emacs-lisp
(defun my-esc (prompt)
  "Functionality for escaping generally"
  (cond
   ((or (evil-insert-state-p)
        (evil-normal-state-p)
        (evil-replace-state-p)
        (evil-visual-state-p))
    [escape])
   (t (kbd "C-g"))))
(define-key key-translation-map (kbd "C-g") 'my-esc)
(define-key evil-operator-state-map (kbd "C-g") 'keyboard-quit)
(set-quit-char "C-g")
#+END_SRC

** Evil God Mode

Evil Motion (binds normal, visual, and operator states all at once)

#+BEGIN_SRC emacs-lisp
(evil-global-set-key 'motion "," 'evil-execute-in-god-state)
(evil-global-set-key 'motion [escape] 'evil-god-state-bail)
#+END_SRC

** mu4e 

#+BEGIN_SRC emacs-lisp 
(define-key mu4e-main-mode-map (kbd "U") 'mu4e-update-index) 
(add-hook 'mu4e-view-mode-hook
          (lambda()
            (local-set-key (kbd "<tab>") 'shr-next-link)
            (local-set-key (kbd "i") 'mu4e-view-toggle-html)
            (local-set-key (kbd "h") 'evil-backward-char)
            (local-set-key (kbd "<backtab>") 'shr-previous-link)))
#+END_SRC

** Global minor mode

#+BEGIN_SRC emacs-lisp
(defvar my-global-keymap
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "M-x")      'smex)
    (define-key map (kbd "C-j")      'drag-stuff-down)
    (define-key map (kbd "C-k")      'drag-stuff-up)
    (define-key map (kbd "C-x C-m")  'magit-status)
    (define-key map (kbd "C-x C-b")  'helm-mini)
    (define-key map (kbd "C-c C--")  'comment-region)
    (define-key map (kbd "C-c C-d")  'fci-mode)
    (define-key map (kbd "C-c C-i")  'indent-region)
    (define-key map (kbd "C-c C-m")  'mu4e)
    (define-key map (kbd "C-c C-n")  'elfeed)
    (define-key map (kbd "C-c C-ö")  'uncomment-region)
    (define-key map (kbd "C-c C-o")  'helm-projectile-switch-project)
    (define-key map (kbd "C-c C-p")  'helm-projectile-find-file)
    (define-key map (kbd "C-c C-w")  'toggle-truncate-lines)
    (define-key map (kbd "<f2>")     'spell-checker-change-language)
    (define-key map (kbd "<f5>")     'next-theme)
    (define-key map (kbd "<f8>")     'ispell-word)
    (define-key map (kbd "<f9>")     'ispell)
    map)
  "my-global-keys-mode keymap.")

(define-minor-mode my-global-keys-mode
  :init-value t
  :keymap my-global-keymap
  :lighter " my-keys")

(my-global-keys-mode 1)
#+END_SRC
