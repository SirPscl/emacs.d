#+TITLE: Emacs Configuration

This is my personal configuration.

* Some Inspiration
 - [[https://github.com/munen/emacs.d][Alain's configuration]]
 - [[https://github.com/emacs-tw/awesome-emacs][Awesome-Emacs: A list of awesome Emacs packages]]
 - [[https://github.com/bradwright/emacs.d][Bradley Wrights configuration]]
 - [[https://github.com/caisah/emacs.dz][Emacs.dz: A collection of Emacs configurations]]
 - [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][Harry R. Schwartz's configuration]]
 - [[http://ivanmalison.github.io/dotfiles/][Ivan Malison's configuration]]
 - [[http://pages.sachachua.com/.emacs.d/Sacha.html#org7b1ada1][Sacha Chua's configuration]]
 - [[https://github.com/wasamasa/dotemacs/blob/master/init.org][Vasilij Schneidermann's configuration]]
 - [[https://github.com/seagle0128/.emacs.d][Vincent Zhang's configuration]]

* Content :TOC:
- [[#some-inspiration][Some Inspiration]]
- [[#os-setup][OS Setup]]
  - [[#mu4e][Mu4e]]
  - [[#spaceline][Spaceline]]
  - [[#flyspell][Flyspell]]
  - [[#markdown][Markdown]]
  - [[#web-development][Web Development]]
  - [[#python-development][Python Development]]
  - [[#ruby][Ruby]]
- [[#package-management][Package Management]]
  - [[#installation][Installation]]
  - [[#basic-packages][Basic Packages]]
  - [[#auto-update-packages][Auto Update Packages]]
- [[#general-setup][General Setup]]
  - [[#disabled-commands][Disabled Commands]]
  - [[#symlinks][Symlinks]]
  - [[#final-newline][Final Newline]]
  - [[#backup][Backup]]
  - [[#auto-save][Auto-Save]]
  - [[#keystrokes][Keystrokes]]
  - [[#scroll][Scroll]]
  - [[#auto-revert][Auto revert]]
  - [[#garbage-collection][Garbage Collection]]
  - [[#browser][Browser]]
  - [[#tooltips][Tooltips]]
  - [[#automatic-line-breaks][Automatic Line Breaks]]
  - [[#whitespace-cleanup][Whitespace Cleanup]]
  - [[#buffers-and-frames][Buffers and Frames]]
  - [[#kill-buffers][Kill Buffers]]
  - [[#sudo-save][Sudo Save]]
  - [[#dired][Dired]]
  - [[#project-terminals][Project Terminals]]
  - [[#display-line-numbers][Display Line Numbers]]
  - [[#session][Session]]
  - [[#evil][Evil]]
  - [[#god-state][God State]]
  - [[#projectile][Projectile]]
  - [[#counsel][Counsel]]
  - [[#ido][Ido]]
  - [[#browse-kill-ring][Browse-Kill-Ring]]
- [[#feeds][Feeds]]
- [[#mail][Mail]]
  - [[#mu4e-setup][Mu4e Setup]]
  - [[#forgotten-attachment][Forgotten Attachment]]
- [[#programming-setup][Programming Setup]]
  - [[#brackets][Brackets]]
  - [[#company-mode][Company Mode]]
  - [[#flycheck][Flycheck]]
  - [[#indentation][Indentation]]
  - [[#magit][Magit]]
  - [[#markdown-1][Markdown]]
  - [[#python][Python]]
  - [[#rainbow][Rainbow]]
  - [[#ruby-1][Ruby]]
  - [[#tex][TeX]]
  - [[#toc-org][Toc Org]]
  - [[#web-mode][Web mode]]
- [[#global-keybindings][Global Keybindings]]
- [[#user-interface][User Interface]]
  - [[#spaceline-1][Spaceline]]
  - [[#theme-rotation][Theme Rotation]]
  - [[#beacon][Beacon]]
  - [[#font][Font]]
  - [[#fancy-stuff][Fancy stuff]]
  - [[#frame-title][Frame Title]]
  - [[#fringe][Fringe]]

* OS Setup

#+BEGIN_SRC shell
$ cd ~/git
$ git clone http://github.com/sirpscl/.emacs.d
$ ln -s ~/git/emacs.d ~/.emacs.d
#+END_SRC

** Mu4e

Install and configure the following.

 - [[https://github.com/djcb/mu][mu]]
 - [[https://github.com/OfflineIMAP/offlineimap][offlineimap]]

Make sure mu has indexed everything

#+BEGIN_SRC shell
$ mu index --maildir=~/.mail
#+END_SRC

** Spaceline

 - [[https://github.com/ryanoasis/nerd-fonts][nerd-fonts]]

Install Nerd-Fonts

#+BEGIN_SRC shell
$ pacaur -S nerd-fonts-complete
#+END_SRC

** Flyspell

#+BEGIN_SRC shell
$ pacaur -S aspell aspell-en aspell-de
#+END_SRC

** Markdown

 - [[https://github.com/jgm/pandoc][pandoc]]

#+BEGIN_SRC shell
$ pacaur -S pandoc
#+END_SRC

** Web Development

Install =npm= dependencies

#+BEGIN_SRC shell
$ npm install -g eslint babel-eslint eslint-plugin-react tern
#+END_SRC

** Python Development

Setup Python Development Envirnoment.

#+BEGIN_SRC shell
$ sudo pacman -S python-pip python-virtualenv python2-virtualenv
$ pip install --user jedi flake8 autopep8 yapf
$ mkdir $WORKON_HOME
#+END_SRC

** Ruby

Setup for =Robe=

#+BEGIN_SRC shell
$ gem install pry pry-doc method_source
#+END_SRC

* Package Management
** Installation

Use the =gnu=, =melpa= and =marmelade= archives.

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

A function to install and require packages in a clean way.

#+BEGIN_SRC emacs-lisp
(defun ph/require-package (package &optional norequire)
  "Installs PACKAGE and requires it unless NOREQUIRE is set to non-nil."
  (unless (package-installed-p package)
    (progn
      (package-refresh-contents)
      (package-install package)))
  (unless norequire (require package)))
#+END_SRC

Also load packages which are not in an archive.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/vendor/")
#+END_SRC

** Basic Packages

=general.el= provides a more convenient method for binding keys in
emacs (for both evil and non-evil users).

#+BEGIN_SRC emacs-lisp
(ph/require-package 'general)
 #+END_SRC

The =use-package= macro allows you to isolate package configuration in
your =.emacs= file in a way that is both performance-oriented and, well,
tidy.

#+BEGIN_SRC emacs-lisp
(ph/require-package 'use-package)
#+END_SRC

Install packages which don't need any further configuration.

#+BEGIN_SRC emacs-lisp
(ph/require-package 'ag)
(ph/require-package 'comment-tags)
(ph/require-package 'dictcc)
(ph/require-package 'haml-mode)
(ph/require-package 'js2-mode)
(ph/require-package 'js2-refactor)
(ph/require-package 'lua-mode)
(ph/require-package 'openwith)
(ph/require-package 'org-ref)
(ph/require-package 'php-mode)
(ph/require-package 'smex)
(ph/require-package 'tern)
(ph/require-package 'yaml-mode)
#+END_SRC

** Auto Update Packages

Update packages at startup.

#+BEGIN_SRC emacs-lisp
(ph/require-package 'auto-package-update)
(auto-package-update-maybe)
#+END_SRC

* General Setup

This section contains customizations of Emacs' defaults as well as
additional features used in different
major-modes. Programming-specific settings settings will be set later.

** Disabled Commands

Enable all disabled commands.

#+BEGIN_SRC emacs-lisp
(setq disabled-command-function nil)
#+END_SRC

** Symlinks

Always Follow Symlinks, no questions asked.

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks nil)
#+END_SRC

** Final Newline

Automatically add a newline at the end of a file.

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

** Backup

No backups, commit frequently!

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

** Auto-Save

Store auto-saves in =/tmp=

#+BEGIN_SRC emacs-lisp
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

** Keystrokes

Show my keystrokes almost immediately in the echo-area.

#+BEGIN_SRC emacs-lisp
(setq echo-keystrokes 0.1)
#+END_SRC

** Scroll

When scrolling, keep the cursor at the same position.

#+BEGIN_SRC emacs-lisp
(setq scroll-preserve-screen-position 'keep)
#+END_SRC

** Auto revert

When something changes a file, automatically refresh the buffer
containing that file so they can't get out of sync.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

** Garbage Collection

Collecte garbage after 20MB. Some packages which cache a lot
(e.g. =flx-ido=) will profit.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 20 1000 1000 ))
#+END_SRC

** Browser

Use Firefox to browse urls.

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-firefox
      browse-url-new-window-flag  t
      browse-url-firefox-new-window-is-tab nil)
#+END_SRC

** Tooltips

Don't use ugly GTK tooltips.

#+BEGIN_SRC emacs-lisp
(setq x-gtk-use-system-tooltips nil)
#+END_SRC

** Automatic Line Breaks

Automatic line breaks (not newlines) in text-modes. Use =M-q=
(=fill-paragraph=) to reorganize after changing the paragraph.

#+BEGIN_SRC emacs-lisp
; (add-hook 'text-mode-hook 'auto-fill-mode)
#+END_SRC

** Whitespace Cleanup

Delete trailing whitespaces when saving.

#+BEGIN_SRC emacs-lisp
(add-hook 'write-file-hooks 'delete-trailing-whitespace)
#+END_SRC

** Buffers and Frames

Split functions wich open the previous buffer in the new window instead
of showing the current buffer twice.

#+BEGIN_SRC emacs-lisp
(defun ph/vsplit-last-buffer ()
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer))

(defun ph/hsplit-last-buffer ()
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer))
#+END_SRC

Open previous buffer in new frame.

#+BEGIN_SRC emacs-lisp
(defun ph/open-last-buffer ()
  (interactive)
  (switch-to-buffer-other-frame (other-buffer)))
#+END_SRC

** Kill Buffers

TODO: rewrite this so that kill-other-buffers doesn't delete scratch
and Messages and project-terminals directly.

#+BEGIN_SRC emacs-lisp
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer
        (delq (current-buffer) (buffer-list))))
#+END_SRC

Never kill *\ast{}scratch\ast{}* or *\ast{}Messages\ast{}*

#+BEGIN_SRC emacs-lisp
(setq my-buffer-kill-regexp
      "\\(\\*scratch\\*\\|\\*Messages\\*\\)")

(add-hook 'kill-buffer-query-functions
          (lambda ()
            (not (string-match-p my-buffer-kill-regexp
                                 (buffer-name)))))
#+END_SRC

** Sudo Save

Save file with sudo.

#+BEGIN_SRC emacs-lisp
(defun ph/sudo-file-name (filename)
  "prepends '/sudo:root@localhost:' if not already present"
  (if (not (string-prefix-p "/sudo:root@localhost:" filename))
      (concat "/sudo:root@localhost:" filename)
    filename))

(defun ph/sudo-save ()
  "save file with sudo"
  (interactive)
  (if (not buffer-file-name)
      (write-file (sudo-file-name (ido-read-file-name "File:")))
    (write-file (sudo-file-name buffer-file-name))))
#+END_SRC

** Dired

Usage:
 - =a= to open a file or directory in the current buffer
 - =RET= to open a file or directory in a new buffer
 - =o= to open a file or directory in a vertical split buffer
 - =C-o= to open a file or directory in a vertical split buffer but keep the focus in the current buffer.
 - =C-c C-o= to open a file or directory in a new frame.

Reuse buffer

#+BEGIN_SRC emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

Open in new frame

#+BEGIN_SRC emacs-lisp
(defun ph/dired-find-file-other-frame ()
  "In Dired, visit this file or directory in another window."
  (interactive)
  (find-file-other-frame (dired-get-file-for-visit)))

(eval-after-load "dired"
  '(define-key dired-mode-map (kbd "C-c C-o") 'ph/dired-find-file-other-frame))
#+END_SRC

** Project Terminals

Spawn terminal-emulators in project folder.

Note: Urxvt's =-name= option which sets the =WM_CLASS= attribute does not seem to work with i3. Thus, =-title= is used to place the terminals on the correct workspace.

#+BEGIN_SRC emacs-lisp
(defun ph/project-terminal-command-list-urxvt (directory workspace-number)
  "Command list to start an urxvt client in DIRECTORY on WORKSPACE-NUMBER."
  (list "/usr/bin/urxvtc"
        "-cd" directory
        "-title" (concat "project-terminal-"
                         (number-to-string (mod workspace-number 10)))))

(defun ph/project-terminal-command-list-termite (directory workspace-number)
  "Command list to start termite in DIRECTORY on WORKSPACE-NUMBER."
  (list "/bin/termite"
        "-d" directory
        (concat "--class=project-terminal-"
                (number-to-string (mod workspace-number 10)))))

(setq ph/project-terminal-amount-prompt
      "How many terminals does my master wish to spawn? :")
(setq ph/project-terminal-amount-default 3)

(setq ph/project-terminal-workspace-prompt
      "On which workspace does my master wish to spawn them? :")
(setq ph/project-terminal-workspace-default 6)

(defun ph/spawn-one-project-terminal ( &optional workspace-number)
  "Start one terminal in the current project directory on WORKSPACE-NUMBER."
  (interactive)
  (unless workspace-number
    (setq workspace-number
          (read-number ph/project-terminal-workspace-prompt
                       ph/project-terminal-workspace-default)))
  (let ((dir (projectile-project-p)))
    (if dir
        (progn
          (setq project-terminal-buffer
                (get-buffer-create "project-terminals"))
           (make-process
            :name (concat "project-terminal-" dir)
            :buffer project-terminal-buffer
            :command (ph/project-terminal-command-list-termite dir workspace-number)))
      (message "You're not in a project"))))

(defun ph/spawn-some-project-terminals (&optional amount workspace-number)
  "Start AMOUNT terminals on WORKSPACE-NUMBER in the current project directory."
  (interactive)
  (unless amount
    (setq amount (read-number ph/project-terminal-amount-prompt
                              ph/project-terminal-amount-default)))
  (unless workspace-number
    (setq workspace-number
          (read-number ph/project-terminal-workspace-prompt
                       ph/project-terminal-workspace-default)))
  (while (> amount 0)
    (ph/spawn-one-project-terminal workspace-number)
    (setq amount (- amount 1))))
#+END_SRC

** Display Line Numbers

Show line numbers in programming modes

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

Count the number of lines to use for line number width.

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-width-start t)
#+END_SRC

** Session

Restore some stuff (command histories, kill-ring, ...) from last session.

#+BEGIN_SRC emacs-lisp
(ph/require-package 'session)
(add-hook 'after-init-hook 'session-initialize)
#+END_SRC

** Evil
*** Setup

I am evil.

#+BEGIN_SRC emacs-lisp
(ph/require-package 'evil)
(ph/require-package 'evil-org)
(ph/require-package 'evil-ediff)

(evil-mode 1)
#+END_SRC

Evil commands

#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "ww" 'ph/sudo-save)
#+END_SRC

When exiting insert-state, don't move the cursor

#+BEGIN_SRC emacs-lisp
(setq evil-move-cursor-back nil)
#+END_SRC

Go to next/previous line ith =h= and =l=.

#+BEGIN_SRC emacs-lisp
(setq evil-cross-lines t)
#+END_SRC

Set initial evil-state by major mode.

#+BEGIN_SRC emacs-lisp
(dolist (mode-map '((ag-mode . emacs)
                    (elfeed-show-mode . emacs)
                    (elfeed-search-mode . emacs)
                    (eshell-mode . emacs)
                    (flycheck-error-list-mode . emacs)
                    (git-commit-mode . insert)
                    (git-rebase-mode . emacs)
                    (help-mode . emacs)
                    (shell-mode . emacs)
                    (term-mode . emacs)))
  (evil-set-initial-state `,(car mode-map) `,(cdr mode-map)))
#+END_SRC

*** Keybindings

Escape with =C-g=

#+BEGIN_SRC emacs-lisp
(defun ph/esc (prompt)
  "Functionality for escaping generally"
  (cond
   ((or (evil-insert-state-p)
        (evil-normal-state-p)
        (evil-replace-state-p)
        (evil-visual-state-p))
    [escape])
   (t (kbd "C-g"))))
(define-key key-translation-map (kbd "C-g") 'ph/esc)
(define-key evil-operator-state-map (kbd "C-g") 'keyboard-quit)
(set-quit-char "C-g")
#+END_SRC


Evil motion-states are the evil states where we don't edit text.

#+BEGIN_SRC emacs-lisp
(general-def 'motion
  [escape] 'evil-god-state-bail
  ","      'evil-execute-in-god-state
  "j"      'evil-next-visual-line
  "k"      'evil-previous-visual-line)
#+END_SRC

Free =M-.= and =M-,= since they are popular kebinings for "jump to
definition" and "back".

#+BEGIN_SRC emacs-lisp
(general-def 'normal
  "M-." nil
  "M-," nil)
#+END_SRC

*** Evil surround

- Add surrounding ~​'​~ with ~S'​~ from visual-state (use =viw= to mark current word)
- Change surrounding ~​'​~ to ~*~ with ~cs'*~
- Remove surrounding ~*~ with ~ds*~

#+BEGIN_SRC emacs-lisp
(ph/require-package 'evil-surround)
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+END_SRC

** God State

=god-mode= is a global minor mode for entering Emacs commands without
modifier keys. It's similar to Vim's separation of commands and
insertion mode.

#+BEGIN_SRC emacs-lisp
(ph/require-package 'evil-god-state)
#+END_SRC

Make =evil-god-state= work also in visual-mode.

#+BEGIN_SRC emacs-lisp
(defun ph/evil-visual-activate-hook (&optional command)
  "Enable Visual state if the region is activated."
  (unless (evil-visual-state-p)
    (evil-delay nil
        '(unless (or (evil-visual-state-p)
                     (evil-insert-state-p)
                     (evil-emacs-state-p)
                     (evil-god-state-p))
           (when (and (region-active-p)
                      (not deactivate-mark))
             (evil-visual-state)))
      'post-command-hook nil t
      "evil-activate-visual-state")))
(ph/evil-visual-activate-hook)
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
(ph/require-package 'projectile)
(ph/require-package 'grizzl)
(setq projectile-completion-system 'grizzl)
(setq projectile-enable-caching t)
(use-package projectile
  :init
  (setq projectile-keymap-prefix (kbd "C-c p"))
  :config
  (projectile-mode +1))
#+END_SRC

** Counsel

#+BEGIN_SRC emacs-lisp
(ph/require-package 'counsel)
(ph/require-package 'counsel-projectile)
(counsel-projectile-mode)
 #+END_SRC

** Ido

#+BEGIN_SRC emacs-lisp
(ph/require-package 'ido)
(ph/require-package 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
(setq ido-enable-flex-matching t)
#+END_SRC

Enable =ido-vertical-mode=

#+BEGIN_SRC emacs-lisp
(ph/require-package 'ido-vertical-mode)
(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
(setq ido-vertical-show-count t)
#+END_SRC

** Browse-Kill-Ring

#+BEGIN_SRC emacs-lisp
(ph/require-package 'browse-kill-ring)
(setq browse-kill-ring-highlight-inserted-item t
      browse-kill-ring-highlight-current-entry nil
      browse-kill-ring-show-preview t)
(define-key browse-kill-ring-mode-map (kbd "j") 'browse-kill-ring-forward)
(define-key browse-kill-ring-mode-map (kbd "k") 'browse-kill-ring-previous)
#+END_SRC

* Feeds

Set up elfeed.

#+BEGIN_SRC emacs-lisp
(ph/require-package 'elfeed)
(ph/require-package 'elfeed-goodies)
(ph/require-package 'elfeed-org)
(elfeed-goodies/setup)
(elfeed-org)
(setq rmh-elfeed-org-files (list "~/git/config/emacs/elfeed.org"))
#+END_SRC

* Mail
** Mu4e Setup

Load it.

#+BEGIN_SRC emacs-lisp
(require 'mu4e)
(require 'mu4e-contrib)
(ph/require-package 'mu4e-alert)
(ph/require-package 'evil-mu4e)
(ph/require-package 'mu4e-maildirs-extension)
(ph/require-package 'smtpmail)
#+END_SRC

Open mu4e anyway.

#+BEGIN_SRC emacs-lisp
(defun ph/mu4e ()
  "Open mu4e even if its opened in another window or buffer."
  (interactive)
  (unless (string-prefix-p "mu4e" (symbol-name major-mode))
    (let ((buffer (get-buffer "*mu4e-headers*")))
      (if buffer (switch-to-buffer b) (mu4e)))))
#+END_SRC

Don't mark for delete, only move to Trash

#+BEGIN_SRC emacs-lisp
(defun mu4e-headers-mark-for-delete (&rest args)
  (message "move to Trash, don't delete"))
#+END_SRC

Dont reply to myself.

#+BEGIN_SRC emacs-lisp
(setq mu4e-compose-dont-reply-to-self t)
#+END_SRC

My contexts contain private information and are therefore defined in a
file outside of this repo.

#+BEGIN_SRC emacs-lisp
(load-file "~/git/config/emacs/private.el")
(setq mu4e-context-policy 'pick-first)
(setq mu4e-compose-context-policy 'ask-if-none)
#+END_SRC

Sending messages.

#+BEGIN_SRC emacs-lisp
(setq message-send-mail-function 'smtpmail-send-it)
(setq starttls-use-gnutls t)
(setq smtpmail-debug-info t)
#+END_SRC

Activate Alert

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'mu4e-alert-enable-mode-line-display)
#+END_SRC

Show me the addresses, not only names.

#+BEGIN_SRC emacs-lisp
(setq mu4e-view-show-addresses t)
#+END_SRC

Show text, not html.

#+BEGIN_SRC emacs-lisp
(setq mu4e-html2text-command 'mu4e-shr2text)
#+END_SRC

No automatic line breaks.

#+BEGIN_SRC emacs-lisp
;(defun no-auto-fill ()
;  "Turn off auto-fill-mode."
;  (auto-fill-mode -1))
;(add-hook 'mu4e-compose-mode-hook 'no-auto-fill)
#+END_SRC

View mail in browser (with "aV").

#+BEGIN_SRC emacs-lisp
(add-to-list 'mu4e-view-actions
             '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#+END_SRC

Skip duplicates

#+BEGIN_SRC emacs-lisp
(setq mu4e-headers-skip-duplicates t)
#+END_SRC

Some self explanatory settings.

#+BEGIN_SRC emacs-lisp
(setq mu4e-maildir "~/.mail")
(setq mu4e-get-mail-command "offlineimap -o")
(setq message-kill-buffer-on-exit t)
#+END_SRC

** Forgotten Attachment

Check for forgotten attachments

#+BEGIN_SRC emacs-lisp
(defvar ph/message-attachment-regexp
  (concat "\\("
          "[Ww]e send\\|"
          "[Ii] send\\|"
          "attach\\|"
          "[aA]nhang\\|"
          "[aA]ngehängt\\|"
          "[sS]chicke\\|"
          "haenge\\|"
          "hänge\\)"))
(defun ph/message-check-attachment nil
  "Check if there is an attachment in the message if I claim it."
  (save-excursion
    (message-goto-body)
    (when (search-forward-regexp my-message-attachment-regexp nil t nil)
      (message-goto-body)
      (unless (message-y-or-n-p
               "Did you attach all documents?" nil nil)
        (error "No message sent, add them attachments!")))))

(add-hook 'message-send-hook 'ph/message-check-attachment)
#+END_SRC

* Programming Setup
** Brackets

Make brackets colorful

 #+BEGIN_SRC emacs-lisp
(ph/require-package 'rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
 #+END_SRC

Highlight matching brackets.

#+BEGIN_SRC emacs-lisp
(setq show-paren-style 'mixed)
(add-hook 'prog-mode-hook 'show-paren-mode)
#+END_SRC

Typing any left bracket automatically insert the right matching bracket.

#+BEGIN_SRC emacs-lisp
(ph/require-package 'smartparens)
(add-hook 'prog-mode-hook 'smartparens-mode)
#+END_SRC

** Company Mode

Completion will start automatically after you type a few letters. Use
=C-n= and =C-p= to select, =<return>= to complete or =<tab>= to
complete the common part. Search through the completions with =C-s=,
=C-r= and =C-o=. Press =M-(digit)= to quickly complete with one of the
first 10 candidates.

#+BEGIN_SRC emacs-lisp
(ph/require-package 'company)
(ph/require-package 'company-ansible)
(ph/require-package 'company-bibtex)
(ph/require-package 'company-auctex)
(ph/require-package 'company-inf-ruby)
(ph/require-package 'company-nginx)
(ph/require-package 'company-quickhelp)
(ph/require-package 'company-shell)
(ph/require-package 'company-tern)
(ph/require-package 'company-web)

(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

Only autocomplete when i ask for it

#+BEGIN_SRC emacs-lisp
(setq company-idle-delay nil)
#+END_SRC

Show candidates immediately.

#+BEGIN_SRC emacs-lisp
(setq company-echo-delay 0)
#+END_SRC

Don't require a minimum word length to show autocompletion.

#+BEGIN_SRC emacs-lisp
(setq company-minimum-prefix-length 0)
#+END_SRC

Switch with =C-n= and =C-p=.

#+BEGIN_SRC emacs-lisp
(general-def company-active-map
  "C-n"   'company-select-next
  "C-p"   'company-select-previous)

(general-def company-serach-map
  "C-n" 'company-select-next
  "C-p" 'company-select-previous)
#+END_SRC

** Flycheck

Enable =Flycheck= globally (=prog-mode-hook= may not cover all modes).

#+BEGIN_SRC emacs-lisp
(ph/require-package 'flycheck)
(add-hook 'after-init-hook 'global-flycheck-mode)
 #+END_SRC

Show Tip in popup when the cursor is on the error.

#+BEGIN_SRC emacs-lisp
(ph/require-package 'flycheck-pos-tip)
(with-eval-after-load 'flycheck
  (flycheck-pos-tip-mode))
#+END_SRC

Use relative coordinates for the tip. If an error is on the right side
of the frame, the tooltip will move more to the left and stay inside
the frame.

#+BEGIN_SRC emacs-lisp
(setq pos-tip-use-relative-coordinates t)
#+END_SRC

Setting a max width so that the tooltip does not leave the frame.

#+BEGIN_SRC emacs-lisp
(setq flycheck-pos-tip-max-width 50)
#+END_SRC

Hide the tooltip after 20 seconds.

#+BEGIN_SRC emacs-lisp
(setq flycheck-pos-tip-timeout 20)
#+END_SRC

Use =C-c ! l= (=M-x flycheck-list-errors=) to list all errors. Within
the error list the following key bindings are available:
 - =n= Jump to the next error
 - =p= Jump to the previous error
 - =e= Explain the error
 - =f= Filter the error list by level
 - =F= Remove this filter
 - =S= Sort the error list bye the column at point
 - =g= Check the source buffer and update the error list
 - =q= Quit the error list and hide its window

** Indentation

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil
              tab-width 2)
(setq js-indent-level 2)
(setq python-indent 2)
(setq css-indent-offset 2)
(setq sh-basic-offset 2)
(setq sh-indentation 2)
#+END_SRC

** Magit

Show =TODO= in magit-buffer

 #+BEGIN_SRC emacs-lisp
(ph/require-package 'magit)
(ph/require-package 'magit-todos)
(add-hook 'prog-mode-hook 'magit-todos-mode)
 #+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
(ph/require-package 'markdown-mode)
(setq markdown-command "pandoc")
#+END_SRC

** Python

Virtual-Environment handling  shell:
   - create a virtualenv: `mkvirtualenv -p /usr/bin/python2.7 theproject`
   - activate virtualenv: `workon theproject`
   - exit the env: `deactivate`
   - delete the env: `rmvirtualenv theproject`

Virtual-Envirnoment handling with emacs:
   - create a virtualenv: `M-x venv-mkvirtualenv-using`
   - activate virtualenv: `M-x venv-workon`
   - exit the env with: `M-x venv-deactivate`
   - delete the env: `M-x venv-rmvirtualenv`

pip in Virtual-Envirnoment
   - save pip dependencies: `pip freeze > requirements.txt`
   - install pip dependencies `pip install -r requirements.txt`

Debugging with `import pdb` , `pdb.set_trace()`, `python -m pdb script.py`


#+BEGIN_SRC emacs-lisp
(ph/require-package 'elpy)
(elpy-enable)
#+END_SRC

Use Virtual Envirnonments.

#+BEGIN_SRC emacs-lisp
(ph/require-package 'virtualenvwrapper)
(venv-initialize-eshell)
#+END_SRC

** Rainbow

This minor mode sets background color to strings that match color
names, e.g. #0000ff is displayed in white with a blue background

#+BEGIN_SRC emacs-lisp
(ph/require-package 'rainbow-mode)
(add-hook 'prog-mode-hook 'rainbow-mode)
#+END_SRC

** Ruby
*** Inf-ruby

#+BEGIN_SRC emacs-lisp
(ph/require-package 'inf-ruby)
#+END_SRC

*** Enhanced Ruby Mode

Use =enh-ruby-mode= for all common ruby-files.

#+BEGIN_SRC emacs-lisp
(ph/require-package 'enh-ruby-mode)
(add-to-list 'auto-mode-alist
             '("\\(?:\\.rb\\|ru\\|rake\\|thor\\|jbuilder\\|gemspec\\|podspec\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'" . enh-ruby-mode))
#+END_SRC

No magic comments

#+BEGIN_SRC emacs-lisp
(setq ruby-insert-encoding-magic-comment nil)
#+END_SRC

*** Robe

#+BEGIN_SRC emacs-lisp
(ph/require-package 'robe)
#+END_SRC

Add the following gems to the =Gemfile= and install them.

#+BEGIN_SRC ruby
group :development do
  gem 'pry'
  gem 'pry-doc'
  gem 'method_source'
end
#+END_SRC

Generally, you'll want to start with =M-x inf-ruby-console-auto=. If
there's no Ruby console running, most interactive commands provided by
Robe will offer to launch it automatically.

The exceptions are code completion and eldoc, which only work if the
server is already running. To launch it, type =M-x robe-start=.

As you change the code in your project, you'll want to update the
running process. To load the current file, type =C-c C-l=
(=ruby-load-file=), see inf-ruby for more commands. When you're
working on a Rails project, you can type =C-c C-k= instead to reload
the whole environment at once.

#+BEGIN_SRC emacs-lisp
(add-hook 'enh-ruby-mode-hook 'robe-mode)
#+END_SRC

Some useful Commands/Keybindings
 - =C-c C-d= Lookup documentation
 - =M-.= / =M-,= Jump to defintion and back

Use company mode for code completion.

#+BEGIN_SRC emacs-lisp
(eval-after-load 'company
  '(push 'company-robe company-backends))
#+END_SRC

*** Rspec-mode

Put the following in the =Gemfile=.

#+BEGIN_SRC ruby
group :development do
  gem 'spring-commands-rspec'
end
#+END_SRC

Usage:

- =C-c , s= Verify the example or method defined at point
- =C-c , m= Run all specs related to the current buffer
- =C-c , a= Run spec for entire project
- [[https://github.com/pezra/rspec-mode#usage][and more]]

Load it.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/vendor/rspec-mode")
(require 'rspec-mode)
(require 'ansi-color)
(eval-after-load 'rspec-mode '(rspec-install-snippets))
#+END_SRC

When you've hit the breakpoint, hit =C-x C-q= to enable inf-ruby.

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'inf-ruby-switch-setup)
#+END_SRC

** TeX

AUCTeX is an extensible package for writing and formatting TeX files
in GNU Emacs.

#+BEGIN_SRC emacs-lisp
(ph/require-package 'auctex t)
#+END_SRC

Parse on load and save. This increases performance, especially for
large multifile projects. The information is stored in an "auto"
subdirectory.

#+BEGIN_SRC emacs-lisp
(setq TeX-parse-self t)
(setq TeX-auto-save t)
#+END_SRC

Query to find out which is the master file.

#+BEGIN_SRC emacs-lisp
(setq-default TeX-master nil)
#+END_SRC

In Evince use =Control + Left Click= for backward search.

#+BEGIN_SRC emacs-lisp
(setq TeX-PDF-mode t)
(setq TeX-view-program-selection '((output-pdf "Evince")))
(add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
(setq TeX-source-correlate-start-server t)
#+END_SRC

** Toc Org

Every time you’ll be saving an org file, the first headline with a =:TOC:= tag will be updated with the current table of contents.

 - =:TOC_2:= - sets the max depth of the headlines in the table of contents to 2 (the default)
 - =:TOC_2_gh:= - sets the max depth as in above and also uses the GitHub-style hrefs in the table of contents (this style is default). The other supported href style is ‘org’, which is the default org style.


#+begin_src emacs-lisp
(ph/require-package 'toc-org)
(add-hook 'org-mode-hook 'toc-org-enable)
#+end_src

** Web mode
*** Setup

#+BEGIN_SRC emacs-lisp
(ph/require-package 'web-mode)
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tag?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.json?\\'" . web-mode))
#+END_SRC

Some web-mode settings.

#+BEGIN_SRC emacs-lisp
(setq web-mode-markup-indent-offset 2
      web-mode-css-indent-offset 2
      web-mode-code-indent-offset 2
      web-mode-script-padding 2
      web-mode-style-padding 2
      web-mode-script-padding 2
      web-mode-block-padding 0
      web-mode-enable-current-element-highlight t
      web-mode-enable-current-column-highlight t)
#+END_SRC

*** Company-Tern

Use =company-tern=. Put a file =.tern-project= in the root of the
project. Additionally, a file =~/.tern-config= can

A Ruby on Rails =.tern-project= may look like this:

#+BEGIN_SRC javascript
{
  "libs": [
    "browser",
    "jquery"
  ],
  "loadEagerly": [
    "app/assets/javascripts/**/*.js",
    "lib/assets/javascript/**/*.js",
    "vendor/assets/javascript/**/*.js"
  ],
  "plugins": {
    "es_modules": {},
    "node": {}
  }
}
#+END_SRC

And my =~/.tern-config=

#+BEGIN_SRC javascript
{
  "libs": [
    "browser",
    "jquery"
  ],
  "plugins": {
    "es_modules": {},
    "node": {}
  }
}
#+END_SRC

Add =company-tern= to =company=.

#+BEGIN_SRC emacs-lisp
(ph/require-package 'company-tern)
(ph/require-package 'jquery-doc)
(add-to-list 'company-backends 'company-tern)
#+END_SRC

Enable JavaScript completion inside =<script>...</script>=.

#+BEGIN_SRC emacs-lisp
(advice-add 'company-tern :before
            '(lambda (&rest _)
               (if (equal major-mode 'web-mode)
                   (let ((web-mode-cur-language
                          (web-mode-language-at-pos)))
                     (if (or (string= web-mode-cur-language "javascript")
                             (string= web-mode-cur-language "jsx"))
                         (unless tern-mode (tern-mode))
                       (if tern-mode (tern-mode -1)))))))
#+END_SRC

*** Eslint

Use =eslint= instead of =jshint=.

#+BEGIN_SRC emacs-lisp
(setq-default flycheck-disabled-checkers (append flycheck-disabled-checkers
                      '(javascript-jshint)))
(flycheck-add-mode 'javascript-eslint 'web-mode)
#+END_SRC

* Global Keybindings

Create an empty keymap and minor-mode for my global keybindings

#+BEGIN_SRC emacs-lisp
(defvar my-global-keymap (make-sparse-keymap))
(define-minor-mode my-global-keys-mode
  :init-value t
  :keymap my-global-keymap)
(my-global-keys-mode t)
#+END_SRC

Overwriting default bindings (and defining new ones).

 #+BEGIN_SRC emacs-lisp
(general-def my-global-keymap
  "<f1> f" 'counsel-describe-function
  "<f1> v" 'counsel-describe-variable
  "<f2> u" 'counsel-unicode-char
  "M-SPC"  'company-complete
  "M-x"    'counsel-M-x)

(general-def my-global-keymap
  :prefix "C-x"
  "2"   'ph/vsplit-last-buffer
  "3"   'ph/hsplit-last-buffer
  "7"   'ph/open-last-buffer
  "m"   'counsel-M-x
  "b"   'ivy-switch-buffer
  "C-b" 'ivy-switch-buffer
  "C-f" 'counsel-find-file)
 #+END_SRC

User-defined bindings (=C-c= followed by a letter and =<F5>= through
=<F9>= without modifiers).

#+BEGIN_SRC emacs-lisp
(general-def my-global-keymap
  :prefix "C-c"
  "e" 'elfeed
  "i" 'indent-region
  "k" 'ag
  "r" 'ph/mu4e
  "s" 'ph/spawn-some-project-terminals)

(general-def my-global-keymap
  "<f5>" 'ph/next-theme)
 #+END_SRC

* User Interface
** Spaceline

#+BEGIN_SRC emacs-lisp
(ph/require-package 'powerline)
(ph/require-package 'spaceline)

(use-package spaceline :ensure t
  :config
  (setq-default mode-line-format '("%e" (:eval (spaceline-ml-main)))))
#+END_SRC

*** Segments and Faces
**** Main Faces

Functions to change the mode-line faces.

#+BEGIN_SRC emacs-lisp
(defun ph/spaceline-light()
  (interactive)
  (set-face-attribute 'mode-line nil
                      :foreground "#3a3a3a"
                      :box '(:color "#e6e6e0")
                      :background "#fdfde7")
  (set-face-attribute 'mode-line-buffer-id nil
                      :foreground "#3a3a3a"
                      :box '(:color "#e6e6e0")
                      :background "#fdfde7")
  (set-face-attribute 'powerline-active1 nil
                      :foreground "#3a3a3a"
                      :box '(:color "#e6e6e0")
                      :background "#ffd7af")
  (set-face-attribute 'powerline-active2 nil
                      :foreground "#3a3a3a"
                      :box '(:color "#e6e6e0")
                      :background "#e6e6e0")
  (powerline-reset))

(defun ph/spaceline-dark()
  (interactive)
  (set-face-attribute 'mode-line nil
                      :foreground "#c6c6c6"
                      :box '(:color "#252525")
                      :background "#252525")
  (set-face-attribute 'mode-line-buffer-id nil
                      :foreground "#c6c6c6"
                      :box '(:color "#252525")
                      :background "#252525")
  (set-face-attribute 'powerline-active1 nil
                      :foreground "#c6c6c6"
                      :box '(:color "#252525")
                      :background "#303030")
  (set-face-attribute 'powerline-active2 nil
                      :foreground "#c6c6c6"
                      :box '(:color "#252525")
                      :background "#424242")
  (powerline-reset))
#+END_SRC

Faces to highlight segments which need special attention.

#+BEGIN_SRC emacs-lisp
(defface ph/alert-face
  '((t :inherit 'mode-line
       :foreground "black"
       :background "#ef2929"))
  "Alert Face"
  :group 'spaceline)

(defface ph/warn-face
  '((t :inherit 'mode-line
       :foreground "black"
       :background "#ff5d17"))
  "Warn Face"
  :group 'spaceline)

(defface ph/info-face
  '((t :inherit 'mode-line
       :foreground "black"
       :background "#a1db00"))
  "Info Face"
  :group 'spaceline)
#+END_SRC

**** Flycheck

Flycheck segments for =info=, =warning= and =error=.

TODO: refactor this

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment ph/flycheck-warning-segment
  (if (flycheck-has-current-errors-p)
      (let ((c (cdr (assq 'warning (flycheck-count-errors
                                    flycheck-current-errors)))))
        (powerline-raw
         (if c (format "%s" c))))))

(spaceline-define-segment ph/flycheck-error-segment
  (if (flycheck-has-current-errors-p)
      (let ((c (cdr (assq 'error (flycheck-count-errors
                                    flycheck-current-errors)))))
        (powerline-raw
         (if c (format "%s" c))))))

(spaceline-define-segment ph/flycheck-info-segment
  (if (flycheck-has-current-errors-p)
      (let ((c (cdr (assq 'info (flycheck-count-errors
                                    flycheck-current-errors)))))
        (powerline-raw
         (if c (format "%s" c))))))
#+END_SRC

**** Evil

Ajdust the colors for different evil-states.

#+BEGIN_SRC emacs-lisp
(defface ph/spaceline-evil-god
  '((t (:background "tomato"
        :inherit 'spaceline-evil-normal)))
  "Spaceline Evil God State"
  :group 'spaceline)
(add-to-list 'spaceline-evil-state-faces
             '(god . ph/spaceline-evil-god))

(defface ph/spaceline-evil-operator
  '((t (:background "cornflower blue"
        :inherit 'spaceline-evil-normal)))
  "Spaceline Evil Operator State"
  :group 'spaceline)
(add-to-list 'spaceline-evil-state-faces
             '(operator . ph/spaceline-evil-operator))
#+END_SRC

Setting the face according to =evil-state=.

#+BEGIN_SRC emacs-lisp
(defun ph/spaceline-highlight-face-evil-state ()
  "Set the highlight face depending on the evil state.
   Set `spaceline-highlight-face-func' to
   `spaceline-highlight-face-evil-state' to use this."
  (if (bound-and-true-p evil-local-mode)
      (let* ((face (assq evil-state spaceline-evil-state-faces)))
        (if face (cdr face) (spaceline-highlight-face-default)))
    (spaceline-highlight-face-default)))
#+END_SRC

**** Python Virtual Environment

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment ph/virtualenvwrapper-segment venv-current-name)
#+END_SRC

**** Git status

#+BEGIN_SRC emacs-lisp
(defun ph/git-branch-name ()
  (replace-regexp-in-string "^ Git[:-]" "" vc-mode))

(spaceline-define-segment ph/version-control
  "Version control information."
  (when vc-mode
    (powerline-raw
     (s-trim (concat (ph/git-branch-name))))))
#+END_SRC

**** File permissions

Indicate if current file has "special" permissions.

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment ph/buffer-special-file-permissions
  (if (and (buffer-file-name)
           (not (file-ownership-preserved-p (buffer-file-name))))
      (powerline-raw
       (concat (if (file-readable-p (buffer-file-name)) "r" "-")
               (if (file-writable-p (buffer-file-name)) "w" "-")))))
#+END_SRC

**** Mu4e Context

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment ph/mu4e-context-segment
  (let ((ctx (mu4e-context-current)))
    (if (and ctx
             (string-prefix-p "mu4e" (symbol-name major-mode)))
        (powerline-raw
         (mu4e-context-name ctx)))))
#+END_SRC

*** Diminish Minor Modes

Do not show the following minor modes

#+BEGIN_SRC emacs-lisp
(ph/require-package 'diminish)

(eval-after-load "god-mode"
  '(diminish 'god-local-mode))
(eval-after-load "rainbow-mode"
  '(diminish 'rainbow-mode))
(eval-after-load "projectile"
  '(diminish 'projectile-mode))
(eval-after-load "beacon"
  '(diminish 'beacon-mode))
(eval-after-load "auto-revert"
  '(diminish 'auto-revert-mode))
(eval-after-load "undo-tree"
  '(diminish 'undo-tree-mode))
#+END_SRC

*** Putting it all together

#+BEGIN_SRC emacs-lisp
(use-package spaceline-config :ensure spaceline
  :config
  (spaceline-emacs-theme)
  (spaceline-install
    'main
    '((evil-state :when active :face highlight-face)
      (ph/virtualenvwrapper-segment)
      (ph/buffer-special-file-permissions :face ph/alert-face)
      ((remote-host buffer-id))
      (ph/mu4e-context-segment)
      (buffer-modified)
      (process :when active))
    '((minor-modes)
      (anzu)
      (projectile-root)
      (ph/version-control :when active)
      (line-column)
      (buffer-position)
      (ph/flycheck-info-segment :face ph/info-face)
      (ph/flycheck-warning-segment :face ph/warn-face)
      (ph/flycheck-error-segment :face ph/error-face)
      (major-mode))))
#+END_SRC

Set mode-line always active (don't hide any information when focus is
on a different window).

#+BEGIN_SRC emacs-lisp
(defun powerline-selected-window-active () t)
#+END_SRC

Some additional settings.

#+BEGIN_SRC emacs-lisp
(setq-default
 powerline-height 20
 spaceline-highlight-face-func 'ph/spaceline-highlight-face-evil-state
 spaceline-separator-dir-left '(right . right)
 spaceline-separator-dir-right '(left . left)
 powerline-text-scale-factor 0.9)
#+END_SRC

Compile the modeline with =M-x spaceline-compile=.

** Theme Rotation

Call =M-x ph/next-theme= to load the next theme.

#+BEGIN_SRC emacs-lisp
(ph/require-package 'moe-theme)
(require 'dash)

(setq ph/theme-list (list (list '(load-theme moe-dark t)
                                '(ph/spaceline-dark))
                          (list '(load-theme moe-light t)
                                '(ph/spaceline-light))))

(defun ph/next-theme ()
  "Loads next theme in the theme-list and rotates the list"
  (interactive)
  (cl-loop for f in (nth 0 ph/theme-list) do (apply f))
  (setq ph/theme-list (-rotate 1 ph/theme-list)))

(add-hook 'after-init-hook 'ph/next-theme)
#+END_SRC

** Beacon

Whenever the window scrolls a light will shine on top of your cursor so you know where it is.

#+BEGIN_SRC emacs-lisp
(ph/require-package 'beacon)
(beacon-mode 1)
(setq beacon-color "orange")
#+END_SRC

** Font

Scale font locally with =C-x C-+= and =C-x C--=.

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "DejaVu Sans Mono"
                    :height 110
                    :weight 'normal
                    :width 'normal)
#+END_SRC

** Fancy stuff

Disable fancy GUI stuff

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

** Frame Title

Show the buffer-name, project-name and major-mode in the frame title.

#+BEGIN_SRC emacs-lisp
(setq frame-title-format
      '(""
        "%b"
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format " | %s" project-name))))
        " | %m"))
#+END_SRC

** Fringe

Tiny fringe on the right side of the frame. The left side needs a fringe for =FlyCheck=.

#+BEGIN_SRC emacs-lisp
(fringe-mode '(8 . 2))
#+END_SRC
