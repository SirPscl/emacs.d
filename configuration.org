#+TITLE: Emacs Configuration

* Dependencies

#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
(setq package-archives '(
                         ("gnu" . "https://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
(package-initialize)

(defvar my-packages '(
                      ac-math
                      airline-themes
                      auctex
                      auto-complete
                      beacon
                      browse-kill-ring
                      comment-tags
                      company
                      company-tern
                      company-web
                      dash
                      dictcc
                      dictionary
                      diminish
                      drag-stuff
                      dumb-jump
                      elfeed
                      elfeed-org
                      elfeed-goodies
                      elpy
                      evil
                      evil-ediff
                      evil-god-state
                      evil-leader
                      evil-magit
                      evil-mu4e
                      evil-nerd-commenter
                      evil-org
                      fill-column-indicator
                      fsharp-mode
                      grizzl
                      haml-mode
                      helm-projectile
                      js2-mode
                      js2-refactor
                      lua-mode
                      markdown-mode
                      moe-theme
                      mu4e-alert
                      mu4e-maildirs-extension
                      openwith
                      org-bullets
                      php-mode
                      powerline
                      projectile
                      rainbow-delimiters
                      smex
                      spaceline
                      tern
                      tern-auto-complete
                      use-package
                      virtualenvwrapper
                      web-beautify
                      web-mode
                      yaml-mode
                      xref-js2))

(dolist (p my-packages)
  (unless (package-installed-p p)
    (package-install p)))
#+END_SRC
  
* User Interface
** Menu, Toolbar and Splashscreen

No fancy stuff for me.

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(menu-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

** Line- and Columnnumbers

Too many numbers?

#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
#+END_SRC

** Spaceline

#+BEGIN_SRC emacs-lisp
(require 'powerline)

(use-package spaceline :ensure t
  :config
  (setq-default mode-line-format '("%e" (:eval (spaceline-ml-main)))))
#+END_SRC

Space line faces

#+BEGIN_SRC emacs-lisp
(defun spaceline-light()
  (interactive)
  (set-face-attribute 'mode-line nil
                      :foreground "black"
                      :background "gray66")
  (set-face-attribute 'powerline-active1 nil
                      :foreground "black"
                      :background "gray77")
  (set-face-attribute 'powerline-active2 nil
                      :foreground "black"
                      :background "gray88")
  (powerline-reset))

(defun spaceline-dark()
  (interactive)
  (set-face-attribute 'mode-line nil
                      :foreground "black"
                      :background "gray53")
  (set-face-attribute 'powerline-active1 nil
                      :foreground "black"
                      :background "gray66")
  (set-face-attribute 'powerline-active2 nil
                      :foreground "black"
                      :background "gray40")
  (powerline-reset))

(defface red-face
  '((t :inherit 'mode-line
       :foreground "white"
       :background "red4"))
  "Ugly Alert Theme"
  :group 'spaceline)
#+END_SRC

Customized Flycheck

#+BEGIN_SRC emacs-lisp

(defface my-flycheck-warning-face
  '((t (:foreground "black"
        :background "orange"
        :inherit 'mode-line)))
  "Flycheck warning face"
  :group 'spaceline)

(defface my-flycheck-error-face
  '((t (:foreground "black"
        :background "red"
        :inherit 'mode-line)))
  "Flycheck warning face"
  :group 'spaceline)

(defface my-flycheck-info-face
  '((t (:foreground "black"
        :background "green"
        :inherit 'mode-line)))
  "Flycheck warning face"
  :group 'spaceline)

(spaceline-define-segment my-flycheck-warning-segment
  (if (flycheck-has-current-errors-p)
      (let ((c (cdr (assq 'warning (flycheck-count-errors
                                    flycheck-current-errors)))))
        (powerline-raw
         (if c (format "\uf071 %s" c))))))

(spaceline-define-segment my-flycheck-error-segment
  (if (flycheck-has-current-errors-p)
      (let ((c (cdr (assq 'error (flycheck-count-errors
                                    flycheck-current-errors)))))
        (powerline-raw
         (if c (format "\uf12a %s" c))))))

(spaceline-define-segment my-flycheck-info-segment
  (if (flycheck-has-current-errors-p)
      (let ((c (cdr (assq 'info (flycheck-count-errors
                                    flycheck-current-errors)))))
        (powerline-raw
         (if c (format "\uf05a %s" c))))))
#+END_SRC

Segment for Python venv

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment virtualenvwrapper-segment venv-current-name)
#+END_SRC

God Mode Indicator

#+BEGIN_SRC emacs-lisp
(setq god-local-mode nil)
(spaceline-define-segment my-god-mode-indicator
  (if god-local-mode (format " \uf1e2 ")))
#+END_SRC

Custom Git status using [[https://github.com/ryanoasis/nerd-fonts][Nerd Fonts]]

#+BEGIN_SRC emacs-lisp
(defun git-branch-name ()
  (replace-regexp-in-string "^ Git[:-]" "" vc-mode))

(spaceline-define-segment my-version-control
  "Version control information."
  (when vc-mode
    (powerline-raw
     (s-trim (concat "\ue725 " (git-branch-name)
                     (when (buffer-file-name)
                       (pcase (vc-state (buffer-file-name))
                         (`up-to-date " \uf00c")
                         (`edited " \uf069")
                         (`added " \uf44d")
                         (`unregistered " ?")
                         (`removed " \uf00d")
                         (`needs-merge " \uf419")
                         (`needs-update " \uf062")
                         (`ignored " i")
                         (_ " !?"))))))))
#+END_SRC

File permissions segment for files with "special" permissions.

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment buffer-special-file-permissions
  (if (and (buffer-file-name)
           (not (file-ownership-preserved-p (buffer-file-name))))
      (powerline-raw
       (concat (if (file-readable-p (buffer-file-name)) "r" "-")
               (if (file-writable-p (buffer-file-name)) "w" "-")))))
#+END_SRC

Do not show the following minor modes

#+BEGIN_SRC emacs-lisp
(eval-after-load "god-mode"
  '(diminish 'god-local-mode))
(eval-after-load "rainbow-mode"
  '(diminish 'rainbow-mode))
(eval-after-load "projectile"
  '(diminish 'projectile-mode))
(eval-after-load "beacon"
  '(diminish 'beacon-mode))
(eval-after-load "auto-revert"
  '(diminish 'auto-revert-mode))
#+END_SRC

Spaceline config

#+BEGIN_SRC emacs-lisp
(use-package spaceline-config :ensure spaceline
  :config
  (spaceline-helm-mode 1)
  (spaceline-spacemacs-theme)
  (spaceline-install
    'main
    '((my-god-mode-indicator :face red-face)
      (evil-state :when active :face highlight-face)
      (virtualenvwrapper-segment)
      (buffer-special-file-permissions :face red-face)
      ((remote-host buffer-id))
      (buffer-modified)
      (process :when active))
    '((minor-modes)
      (anzu)
      (projectile-root)
      (my-version-control :when active)
      (line-column)
      (buffer-position)
      (my-flycheck-info-segment :face my-flycheck-info-face)
      (my-flycheck-warning-segment :face my-flycheck-warning-face)
      (my-flycheck-error-segment :face my-flycheck-error-face)
      (major-mode))))

;; mode-line always active
(defun powerline-selected-window-active () t)

(setq-default
 powerline-height 20
 spaceline-highlight-face-func 'spaceline-highlight-face-evil-state
 spaceline-separator-dir-left '(right . right)
 spaceline-separator-dir-right '(left . left)
 powerline-text-scale-factor 0.82)
#+END_SRC

** Themes

#+BEGIN_SRC emacs-lisp
(require 'moe-theme)
(require 'dash)

(setq theme-list (list (list '(load-theme moe-dark t)
                             '(spaceline-dark))
                       (list '(load-theme moe-light t)
                             '(spaceline-light))))

(defun next-theme ()
  "Loads next theme in the theme-list and rotates the list"
  (interactive)
  (cl-loop for f in (nth 0 theme-list) do (apply f))
  (setq theme-list (-rotate 1 theme-list)))

(next-theme)
#+END_SRC

** Matching Brackets

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(setq show-paren-style 'mixed)
(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

** Beacon

#+BEGIN_SRC emacs-lisp
(beacon-mode 1)
(setq beacon-color "orange")
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp
(setq default-frame-alist
      '((font . "DejaVu Sans Mono")))
#+END_SRC

* General Setup
** Symlinks

Always Follow Symlinks, no questions asked.

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks nil)
#+END_SRC

** Backup files

Paranoid, I know...

#+BEGIN_SRC emacs-lisp
(setq
   backup-by-copying t
   backup-directory-alist
    '(("." . "~/.saves"))
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   vc-make-backup-files t
   version-control t)

(message "Deleting old backup files...")
(let ((week (* 60 60 24 7))
      (current (float-time (current-time))))
  (dolist (file (directory-files temporary-file-directory t))
    (when (and (backup-file-name-p file)
               (> (- current (float-time (fifth (file-attributes file))))
                  week))
      (message "%s" file)
      (delete-file file))))
#+END_SRC

** Kill buffers

#+BEGIN_SRC emacs-lisp
(defun kill-other-buffers ()
      "Kill all other buffers."
      (interactive)
      (mapc 'kill-buffer
            (delq (current-buffer) (buffer-list))))
#+END_SRC

** Sudo Save

Save file with root.

#+BEGIN_SRC emacs-lisp
(defun sudo-file-name (filename)
  (if (not (string-prefix-p "/sudo:root@localhost:" filename))
      (concat "/sudo:root@localhost:" filename)
    filename))

(defun sudo-save ()
  (interactive)
  (if (not buffer-file-name)
      (write-file (sudo-file-name (ido-read-file-name "File:")))
    (write-file (sudo-file-name buffer-file-name))))
#+END_SRC

** Browser

#+BEGIN_SRC emacs-lisp
(setq browse-url-generic-program "/usr/bin/chromium"
      browse-url-generic-args '("--incognito")
      browse-url-browser-function 'browse-url-generic)
#+END_SRC

** Evil

I am evil.

#+BEGIN_SRC emacs-lisp
(require 'evil-org)
(require 'evil-ediff)
(require 'evil)
(evil-mode 1)
#+END_SRC

Evil commands

#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "ww" 'sudo-save)
#+END_SRC

** Smex

A better M-x.

#+BEGIN_SRC emacs-lisp
(require 'smex)
(smex-initialize)
#+END_SRC

** comment-tags

Highlight and list comment tags such as 'TODO', 'FIXME', 'XXX'

Commands:

    - =b= to list tags in current buffer (comment-tags-list-tags-buffer).
    - =a= to list tags in all buffers (comment-tags-list-tags-buffers).
    - =s= to jump to tag in current buffer by a word or phrase using reading-completion (comment-tags-find-tags-buffer).
    - =n= to jump to next tag from point (comment-tags-next-tag).
    - =p= to jump to previous tag from point (comment-tags-previous-tag).

#+BEGIN_SRC emacs-lisp
  (setq comment-tags-keymap-prefix (kbd "C-c t"))
  (with-eval-after-load "comment-tags"
    (setq comment-tags-keyword-faces
          `(("TODO" . ,(list :weight 'bold :foreground "#DF5427"))
            ("FIXME" . ,(list :weight 'bold :foreground "#DF5427"))
            ("BUG" . ,(list :weight 'bold :foreground "#DF5427"))
            ("HACK" . ,(list :weight 'bold :foreground "#DF5427"))
            ("KLUDGE" . ,(list :weight 'bold :foreground "#DF5427"))
            ("XXX" . ,(list :weight 'bold :foreground "#DF5427"))
            ("INFO" . ,(list :weight 'bold :foreground "#1FDA9A"))
            ("DONE" . ,(list :weight 'bold :foreground "#1FDA9A"))))
    (setq comment-tags-comment-start-only t
          comment-tags-require-colon t
          comment-tags-case-sensitive t
          comment-tags-show-faces t
          comment-tags-lighter nil))
  (add-hook 'prog-mode-hook 'comment-tags-mode)
#+END_SRC

** Spell Checking

#+BEGIN_SRC emacs-lisp
(require 'ispell)
(setq ispell-program-name "hunspell")
(setq ispell-local-dictionary "en_GB")

(defun flyspell-check-next-highlighted-word ()
  "Custom function to spell check next highlighted word"
  (interactive)
  (flyspell-goto-next-error)
  (ispell-word))
#+END_SRC

** Org Mode

Nice bullets.

#+BEGIN_SRC emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
(projectile-global-mode)
(setq projectile-completion-system 'grizzl)
(setq projectile-enable-caching t)

(defun projectile-project-path ()
  (if (and (fboundp 'projectile-project-p)
           (stringp (projectile-project-p)))
      (projectile-project-p)
    nil))

(defun my-helm-projectile-find-file ()
  "projectile-find-file if a project is present, 
   projectile-switch-project otherwise"
  (interactive)
  (if (projectile-project-path)
      (helm-projectile-find-file)
    (helm-projectile-switch-project)))

(defun my-helm-projectile-switch-to-buffer ()
  "projectile-find-file if a project is present, 
   projectile-switch-project otherwise"
  (interactive)
  (if (projectile-project-path)
      (helm-projectile-switch-to-buffer)
    (helm-projectile-switch-project)))
#+END_SRC

** Ido

#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode 1)
(ido-everywhere 1)
(setq ido-enable-flex-matching t)
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
(setq helm-buffers-fuzzy-matching 1)
(helm-projectile-on)
#+END_SRC

** Feeds

Set up elfeed.

#+BEGIN_SRC emacs-lisp
(require 'elfeed)
(require 'elfeed-goodies)
(require 'elfeed-org)
(elfeed-goodies/setup)
(elfeed-org)
(setq rmh-elfeed-org-files (list "~/git/config/emacs/elfeed.org"))

(defun elfeed-search-format-date (date)
  (format-time-string "%d" (seconds-to-time date)))

(defun elfeed-goodies/search-header-draw ()
  "Returns the string to be used as the Elfeed header."
  (if (zerop (elfeed-db-last-update))
      (elfeed-search--intro-header)
    (let* ((separator-left (intern (format "powerline-%s-%s"
                                           elfeed-goodies/powerline-default-separator
                                           (car powerline-default-separator-dir))))
           (separator-right (intern (format "powerline-%s-%s"
                                            elfeed-goodies/powerline-default-separator
                                            (cdr powerline-default-separator-dir))))
           (db-time (seconds-to-time (elfeed-db-last-update)))
           (stats (-elfeed/feed-stats))
           (search-filter (cond
                           (elfeed-search-filter-active
                            "")
                           (elfeed-search-filter
                            elfeed-search-filter)
                           (""))))
      (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
          (search-header/draw-wide separator-left separator-right search-filter stats db-time)
        (search-header/draw-tight separator-left separator-right search-filter stats db-time)))))

(defun elfeed-goodies/entry-line-draw (entry)
  "Print ENTRY to the buffer."

  (let* ((title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
         (date (elfeed-search-format-date (elfeed-entry-date entry)))
         (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
         (feed (elfeed-entry-feed entry))
         (feed-title
          (when feed
            (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
         (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
         (tags-str (concat "[" (mapconcat 'identity tags ",") "]"))
         (title-width (- (window-width) elfeed-goodies/feed-source-column-width
                         elfeed-goodies/tag-column-width 4))
         (title-column (elfeed-format-column
                        title (elfeed-clamp
                               elfeed-search-title-min-width
                               title-width
                               title-width)
                        :left))
         (tag-column (elfeed-format-column
                      tags-str (elfeed-clamp (length tags-str)
                                             elfeed-goodies/tag-column-width
                                             elfeed-goodies/tag-column-width)
                      :left))
         (feed-column (elfeed-format-column
                       feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width)
                       :left)))

    (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
        (progn
          (insert (propertize date 'face 'elfeed-search-date-face) " ")
          (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
          (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
          (insert (propertize title 'face title-faces 'kbd-help title)))
      (insert (propertize title 'face title-faces 'kbd-help title)))))

#+END_SRC

** Mail
*** Setup

Load it.

#+BEGIN_SRC emacs-lisp
(require 'mu4e)
(require 'mu4e-maildirs-extension)
(require 'mu4e-contrib)
(require 'evil-mu4e)
(require 'smtpmail)
#+END_SRC

Dont reply to myself.

#+BEGIN_SRC emacs-lisp
(setq mu4e-compose-dont-reply-to-self t)
#+END_SRC

My contexts.

#+BEGIN_SRC emacs-lisp
(setq mu4e-contexts nil)
(load-file "~/git/config/emacs/private.el")
(setq mu4e-context-policy 'pick-first)
(setq mu4e-compose-context-policy 'ask-if-none)
#+END_SRC

Sending messages.

#+BEGIN_SRC emacs-lisp
(setq message-send-mail-function 'smtpmail-send-it)
(setq starttls-use-gnutls t)
(setq smtpmail-debug-info t)
#+END_SRC

Activate Alert

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
#+END_SRC

Show me the addresses, not only names.

#+BEGIN_SRC emacs-lisp
(setq mu4e-view-show-addresses t)
#+END_SRC

Show text, not html.

#+BEGIN_SRC emacs-lisp
(setq mu4e-html2text-command 'mu4e-shr2text)
#+END_SRC

No automatic line breaks.

#+BEGIN_SRC emacs-lisp
(defun no-auto-fill ()
  "Turn off auto-fill-mode."
  (auto-fill-mode -1))
(add-hook 'mu4e-compose-mode-hook #'no-auto-fill)
#+END_SRC

View mail in browser (with "aV").

#+BEGIN_SRC emacs-lisp
(add-to-list 'mu4e-view-actions
             '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#+END_SRC

Skip duplicates

#+BEGIN_SRC emacs-lisp
(setq mu4e-headers-skip-duplicates t)
#+END_SRC

Some self explanatory settings.

#+BEGIN_SRC emacs-lisp
(setq mu4e-maildir "~/.mail")
(setq mu4e-get-mail-command "offlineimap -o")
(setq message-kill-buffer-on-exit t)
#+END_SRC

*** Forgotten Attachment

Check for forgotten attachments

#+BEGIN_SRC emacs-lisp
(defvar my-message-attachment-regexp "\\([Ww]e send\\|[Ii] send\\|attach\\|angehängt\\|[aA]nhang\\|[aA]ngehängt\\|[sS]chicke\\|haenge\\|hänge\\)")
(defun my-message-check-attachment nil
  "Check if there is an attachment in the message if I claim it."
  (save-excursion
    (message-goto-body)
    (when (search-forward-regexp my-message-attachment-regexp nil t nil)
      (message-goto-body)
      (unless (message-y-or-n-p
               "Did you attach all documents?" nil nil)
        (error "No message sent, add them attachments!")))))
(add-hook 'message-send-hook 'my-message-check-attachment)
#+END_SRC

** Kill Ring and Clipboard

Monitors system clipboard and puts everything in the kill-ring.

#+BEGIN_SRC emacs-lisp
(require 'browse-kill-ring)
(setq browse-kill-ring-highlight-inserted-item t
      browse-kill-ring-highlight-current-entry nil
      browse-kill-ring-show-preview t)
(define-key browse-kill-ring-mode-map (kbd "j") 'browse-kill-ring-forward)
(define-key browse-kill-ring-mode-map (kbd "k") 'browse-kill-ring-previous)
#+END_SRC

* Programming Setup
** General Indentation

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)
(setq js-indent-level 2)
(setq python-indent 2)
(setq css-indent-offset 2)
(add-hook 'sh-mode-hook
          (lambda ()
            (setq sh-basic-offset 2
                  sh-indentation 2)))
#+END_SRC

** Autocomplete

#+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(ac-config-default)
#+END_SRC

** 70 columns indicator.

#+BEGIN_SRC emacs-lisp
(require 'fill-column-indicator)
(setq fci-rule-width 1)
(setq fci-rule-color "red")
#+END_SRC

** Rainbow Mode

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'rainbow-mode)
#+END_SRC

** Web mode

#+BEGIN_SRC emacs-lisp
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tag?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . web-mode))

(defun my-web-mode-indent-hook ()
  "Hooks for Web mode."
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-script-padding 2)
  (setq web-mode-style-padding 2)
  (setq web-mode-script-padding 2)
  (setq web-mode-block-padding 0)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t))

(add-hook 'web-mode-hook 'my-web-mode-indent-hook)
#+END_SRC

Auto complete

#+BEGIN_SRC emacs-lisp
(require 'company)                                   ; load company mode
(require 'company-web-html)                          ; load company mode html backend
(require 'company-web-jade)                          ; load company mode jade backend
(require 'company-web-slim)                          ; load company mode slim backend
(add-hook 'web-mode-hook 'company-mode)
(define-key web-mode-map (kbd "M-SPC") 'company-complete)

;; JavaScript with Tern
(defun my-web-mode-tern-hook ()
  "Hook for `web-mode'."
    (set (make-local-variable 'company-backends)
         '(company-tern company-web-html company-yasnippet company-files)))
(add-hook 'web-mode-hook 'my-web-mode-tern-hook)

;; Enable JavaScript completion between <script>...</script> etc.
(advice-add 'company-tern :before
            #'(lambda (&rest _)
                (if (equal major-mode 'web-mode)
                    (let ((web-mode-cur-language
                          (web-mode-language-at-pos)))
                      (if (or (string= web-mode-cur-language "javascript")
                              (string= web-mode-cur-language "jsx"))
                          (unless tern-mode (tern-mode))
                        (if tern-mode (tern-mode -1)))))))

#+END_SRC

linting

#+BEGIN_SRC emacs-lisp
(require 'flycheck)
(add-hook 'after-init-hook #'global-flycheck-mode)
(setq-default flycheck-disabled-checkers
              (append flycheck-disabled-checkers
                      '(json-jsonlist)))
(setq-default flycheck-disabled-checkers
              (append flycheck-disabled-checkers
                      '(javascript-jshint)))
(flycheck-add-mode 'javascript-eslint 'web-mode)
#+END_SRC

** JS2-mode

#+BEGIN_SRC emacs-lisp
;; (require 'js2-mode)
;; (require 'js2-refactor)
;; (require 'xref-js2)

;; (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

;; (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
;; (add-hook 'js2-mode-hook #'js2-refactor-mode)

;; (js2r-add-keybindings-with-prefix "C-c C-r")
;; (define-key js2-mode-map (kbd "C-k") #'js2r-kill)

;; (add-hook 'js2-mode-hook (lambda ()
;;   (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
#+END_SRC

js-mode (which js2 is based on) binds "M-." which conflicts with xref, so unbind it.

#+BEGIN_SRC emacs-lisp
;; (define-key js-mode-map (kbd "M-.") nil)
#+END_SRC

Company for auto-complete

#+BEGIN_SRC emacs-lisp
;; (require 'company)
;; (require 'company-tern)

;; (add-to-list 'company-backends 'company-tern)
;; (add-hook 'js2-mode-hook (lambda ()
;;                            (tern-mode)
;;                            (company-mode)))

;; ;; Disable completion keybindings, as we use xref-js2 instead
;; (define-key tern-mode-keymap (kbd "M-.") nil)
;; (define-key tern-mode-keymap (kbd "M-,") nil)
#+END_SRC

** Web-beautify

Keybinding to beautify manually.

#+BEGIN_SRC emacs-lisp
(require 'web-beautify)
(eval-after-load 'js2-mode
  '(define-key js2-mode-map (kbd "C-c b") 'web-beautify-js))

(eval-after-load 'js
  '(define-key js-mode-map (kbd "C-c b") 'web-beautify-js))

(eval-after-load 'json-mode
  '(define-key json-mode-map (kbd "C-c b") 'web-beautify-js))

(eval-after-load 'sgml-mode
  '(define-key html-mode-map (kbd "C-c b") 'web-beautify-html))

(eval-after-load 'web-mode
  '(define-key web-mode-map (kbd "C-c b") 'web-beautify-html))
(eval-after-load 'web-mode
  '(define-key web-mode-map (kbd "C-c n") 'web-beautify-js))
(eval-after-load 'web-mode
  '(define-key web-mode-map (kbd "C-c m") 'web-beautify-css))

(eval-after-load 'css-mode
  '(define-key css-mode-map (kbd "C-c b") 'web-beautify-css))
#+END_SRC

** Latex

Don't add auctex variables in the tex files. Note that the main file has to be saved once for this to work.

#+BEGIN_SRC emacs-lisp
(setq TeX-parse-self t)
(setq TeX-auto-save t)
(setq-default TeX-master nil)
#+END_SRC

*** Using Okular

SyncTeX setup for okular. Follow https://www.emacswiki.org/emacs/AUCTeX#toc26 to configure okular.

In Okular, use "Shift + Left Click" to jump to the according line.

#+BEGIN_SRC emacs-lisp
(setq TeX-source-correlate-mode t
      TeX-source-correlate-start-server t)
(eval-after-load "tex"
  '(setcar (cdr (assoc 'output-pdf TeX-view-program-selection)) "Okular"))
#+END_SRC

*** Using make.sh

I put a `make.sh` in the root of latex documents along with the main tex file `main.tex` and of course the `.gitignore`.

#+BEGIN_SRC emacs-lisp
(defun my-latex-compile-quick ()
  "runs make.sh -q -s (..) in the latex root"
  (interactive)
  (let* ((main-folder (get-latex-main-folder
                       (file-name-directory buffer-file-name)))
         (command (concat "sh " main-folder "make.sh " "-q "
                          "-s " (number-to-string
                                 (line-number-at-pos)) ":"
                          (buffer-file-name))))
    (start-process "my-latex" "latex-make"
                   (concat main-folder "make.sh") "-q"
                   "-s" (concat (number-to-string
                                 (line-number-at-pos)) ":"
                                 (buffer-file-name)))))

(defun my-latex-compile-full ()
  "runs make.sh -f -s (..) in the latex root"
  (interactive)
  (let* ((main-folder (get-latex-main-folder
                       (file-name-directory buffer-file-name)))
         (command (concat "sh " main-folder "make.sh " "-f "
                          "-s " (number-to-string
                                 (line-number-at-pos)) ":"
                          (buffer-file-name))))
    (start-process "my-latex" "latex-make"
                   (concat main-folder "make.sh") "-f"
                   "-s" (concat (number-to-string
                                 (line-number-at-pos)) ":"
                                 (buffer-file-name)))))

(defun update-evince ()
  "updates evince"
  (interactive)
  (let* ((main-folder (get-latex-main-folder
                       (file-name-directory buffer-file-name)))
         (command (concat "sh " main-folder "make.sh " "-f "
                          "-s " (number-to-string
                                 (line-number-at-pos)) ":"
                          (buffer-file-name))))
    (start-process "my-latex" "latex-make"
                   (concat main-folder "make.sh") "-f"
                   "-s" (concat (number-to-string
                                 (line-number-at-pos)) ":"
                                 (buffer-file-name)))))

(defun my-latex-clean ()
  "runs make.sh -c in the latex root"
  (interactive)
  (let ((main-folder (get-latex-main-folder
                      (file-name-directory buffer-file-name))))
    (shell-command-to-string (concat "sh " main-folder
                                     "make.sh clean"))))

(defun get-latex-main-folder (path)
  "recursively gets the root folder of the latex project"
  (interactive)
  (if (not (string= path "/"))
      (if (is-latex-root path)
          path
        (get-latex-main-folder (folder-up path)))))

(defun folder-up (path)
  "removes last folder of path"
  (file-name-directory (directory-file-name path)))

(defun is-latex-root (path)
  "returns t if the path is the root folder of the latex project"
  (interactive)
  (and (file-exists-p (concat path ".gitignore"))
       (file-exists-p (concat path "main.tex"))
       (file-exists-p (concat path "make.sh"))))
#+END_SRC

** Python

Virtual-Environment handling  shell:
   - create a virtualenv: `mkvirtualenv -p /usr/bin/python2.7 theproject`
   - activate virtualenv: `workon theproject`
   - exit the env: `deactivate`
   - delete the env: `rmvirtualenv theproject`

Virtual-Envirnoment handling with emacs:
   - create a virtualenv: `M-x venv-mkvirtualenv-using`
   - activate virtualenv: `M-x venv-workon`
   - exit the env with: `M-x venv-deactivate`
   - delete the env: `M-x venv-rmvirtualenv`

pip in Virtual-Envirnoment
   - save pip dependencies: `pip freeze > requirements.txt`
   - install pip dependencies `pip install -r requirements.txt`

Debugging with `import pdb` , `pdb.set_trace()`, `python -m pdb script.py`


#+BEGIN_SRC emacs-lisp
(elpy-enable)
(require 'virtualenvwrapper)
(venv-initialize-eshell)
#+END_SRC

** PHP

#+BEGIN_SRC emacs-lisp
(require 'php-mode)
#+END_SRC

** Whitespaces

To see whitespaces and indentation

#+BEGIN_SRC emacs-lisp
(require 'whitespace)
#+END_SRC

** Markdown Mode

#+BEGIN_SRC emacs-lisp
(require 'markdown-mode)
(setq markdown-command "pandoc")
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
(require 'evil-magit)
#+END_SRC

* Keybinding
** mu4e

#+BEGIN_SRC emacs-lisp
(define-key mu4e-main-mode-map (kbd "U") 'mu4e-update-index)
(add-hook 'mu4e-view-mode-hook
          (lambda()
            (local-set-key (kbd "<tab>") 'shr-next-link)
            (local-set-key (kbd "i") 'mu4e-view-toggle-html)
            (local-set-key (kbd "h") 'evil-backward-char)
            (local-set-key (kbd "<backtab>") 'shr-previous-link)))
#+END_SRC

** elfeed

#+BEGIN_SRC emacs-lisp
(add-hook 'elfeed-search-mode-hook
          (lambda ()
            (define-key evil-normal-state-local-map
              (kbd "c") 'elfeed-reset-filter)
            (define-key evil-normal-state-local-map
              (kbd "r") 'elfeed-toggle-filter-unread)
            (define-key evil-normal-state-local-map
              (kbd ";") 'elfeed-select-filter)
            (define-key evil-normal-state-local-map
              (kbd "F") 'elfeed-search-live-filter)
            (define-key evil-normal-state-local-map
              (kbd "!") 'elfeed-search-untag-all-unread)
            (define-key evil-normal-state-local-map
              (kbd "u") 'elfeed-search-tag-all-unread)
            (define-key evil-normal-state-local-map
              (kbd "O") 'elfeed-search-browse-url)
            (define-key evil-normal-state-local-map
              (kbd "U") 'elfeed-update)
            (define-key evil-normal-state-local-map
              (kbd "RET") 'elfeed-goodies/split-search-show-entry)))
(add-hook 'elfeed-show-mode-hook
          (lambda ()
            (define-key evil-normal-state-local-map
              (kbd "n") 'elfeed-goodies/split-show-next)
            (define-key evil-normal-state-local-map
              (kbd "p") 'elfeed-goodies/split-show-prev)))
#+END_SRC
** evil

Move the cursor

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
#+END_SRC

Enter and Quit God-Mode

#+BEGIN_SRC emacs-lisp
(evil-global-set-key 'normal "," 'evil-execute-in-god-state)
(evil-global-set-key 'normal [escape] 'evil-god-state-bail)
#+END_SRC

Indent Region

#+BEGIN_SRC emacs-lisp
(evil-global-set-key 'visual "i" 'indent-region)
#+END_SRC

Drag Stuff

#+BEGIN_SRC emacs-lisp
(evil-global-set-key 'insert (kbd "C-j") 'drag-stuff-down)
(evil-global-set-key 'normal (kbd "C-j") 'drag-stuff-down)
(evil-global-set-key 'visual (kbd "C-j") 'drag-stuff-down)
(evil-global-set-key 'insert (kbd "C-k") 'drag-stuff-up)
(evil-global-set-key 'normal (kbd "C-k") 'drag-stuff-up)
(evil-global-set-key 'visual (kbd "C-k") 'drag-stuff-up)
#+END_SRC

Browse Kill Ring

#+BEGIN_SRC emacs-lisp
(evil-global-set-key 'insert (kbd "C-p") 'browse-kill-ring)
(evil-global-set-key 'normal (kbd "C-p") 'browse-kill-ring)
#+END_SRC

Comment and uncomment

#+BEGIN_SRC emacs-lisp
(evil-global-set-key 'insert (kbd "C--") 'evilnc-comment-or-uncomment-lines)
(evil-global-set-key 'normal (kbd "C--") 'evilnc-comment-or-uncomment-lines)
(evil-global-set-key 'visual (kbd "C--") 'evilnc-comment-or-uncomment-lines)
#+END_SRC

Escape == C-g

#+BEGIN_SRC emacs-lisp
(defun my-esc (prompt)
  "Functionality for escaping generally"
  (cond
   ((or (evil-insert-state-p)
        (evil-normal-state-p)
        (evil-replace-state-p)
        (evil-visual-state-p))
    [escape])
   (t (kbd "C-g"))))
(define-key key-translation-map (kbd "C-g") 'my-esc)
(define-key evil-operator-state-map (kbd "C-g") 'keyboard-quit)
(set-quit-char "C-g")
#+END_SRC

** global

#+BEGIN_SRC emacs-lisp
(defvar my-global-keymap
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "M-x")      'smex)
    (define-key map (kbd "C-x C-n")  'mu4e)
    (define-key map (kbd "C-x C-m")  'magit-status)
    (define-key map (kbd "C-x C-b")  'helm-mini)
    (define-key map (kbd "C-x C-j")  'my-helm-projectile-switch-to-buffer)
    (define-key map (kbd "C-x C-o")  'helm-projectile-switch-project)
    (define-key map (kbd "C-x C-p")  'my-helm-projectile-find-file)
    (define-key map (kbd "<f5>")     'next-theme)
    map)
  "my-global-keys-mode keymap.")

(define-minor-mode my-global-keys-mode
  :init-value t
  :keymap my-global-keymap
  :lighter "keys")

(my-global-keys-mode 1)
#+END_SRC
   
* The End

Prevent scroll-bar-mode from beeing overwritten.

#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC
