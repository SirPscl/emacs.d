#+TITLE: Emacs Configuration

This is my Emacs configuration. There are many like it, but this one is mine.

* Content :TOC_3_gh:
- [[#notes-for-me][Notes for me]]
- [[#inspiration][Inspiration]]
- [[#os-setup][OS Setup]]
  - [[#installation][Installation]]
  - [[#mu4e][Mu4e]]
  - [[#go][Go]]
  - [[#markdown][Markdown]]
  - [[#web-development][Web Development]]
  - [[#python-development][Python Development]]
  - [[#ruby][Ruby]]
  - [[#dumb-jump][Dumb Jump]]
- [[#first-use][First Use]]
- [[#packages][Packages]]
  - [[#installation-1][Installation]]
  - [[#packages-for-configuration][Packages for Configuration]]
  - [[#package-updates][Package Updates]]
- [[#tweaking-defaults][Tweaking Defaults]]
  - [[#disabled-commands][Disabled Commands]]
  - [[#symlinks][Symlinks]]
  - [[#final-newline][Final Newline]]
  - [[#backup][Backup]]
  - [[#auto-save][Auto-Save]]
  - [[#keystrokes][Keystrokes]]
  - [[#scroll][Scroll]]
  - [[#auto-revert][Auto revert]]
  - [[#garbage-collection][Garbage Collection]]
  - [[#browser][Browser]]
  - [[#line-filling][Line Filling]]
  - [[#whitespace-cleanup][Whitespace Cleanup]]
  - [[#buffers-and-frames][Buffers and Frames]]
  - [[#sudo-save][Sudo Save]]
  - [[#occur][Occur]]
  - [[#dired][Dired]]
  - [[#org-mode][Org Mode]]
    - [[#settings][Settings]]
    - [[#toc-org][TOC-Org]]
    - [[#org-ref][Org-Ref]]
- [[#general-packages][General Packages]]
  - [[#which-key][Which-Key]]
  - [[#session][Session]]
  - [[#browse-kill-ring][Browse-Kill-Ring]]
  - [[#crux][Crux]]
  - [[#ag][Ag]]
  - [[#ripgrep][Ripgrep]]
  - [[#evil][Evil]]
    - [[#surround][Surround]]
    - [[#god-state][God State]]
    - [[#keybindings][Keybindings]]
  - [[#projectile][Projectile]]
  - [[#ido][Ido]]
  - [[#counsel][Counsel]]
  - [[#imenu][Imenu]]
  - [[#ranger][Ranger]]
  - [[#dictionary][Dictionary]]
  - [[#pdf][PDF]]
  - [[#news-feeds][News Feeds]]
  - [[#mail][Mail]]
    - [[#general][General]]
    - [[#headers][Headers]]
    - [[#view][View]]
    - [[#bookmarks][Bookmarks]]
    - [[#compose][Compose]]
    - [[#send][Send]]
    - [[#contexts][Contexts]]
- [[#programming][Programming]]
  - [[#general-purpose][General Purpose]]
    - [[#autocomplete][Autocomplete]]
    - [[#brackets][Brackets]]
    - [[#display-line-numbers][Display Line Numbers]]
    - [[#dumb-jump-1][Dumb Jump]]
    - [[#flycheck][Flycheck]]
    - [[#git][Git]]
    - [[#rainbow][Rainbow]]
  - [[#go-1][Go]]
  - [[#haml][Haml]]
  - [[#indentation][Indentation]]
  - [[#javascript][JavaScript]]
    - [[#js2-mode][JS2-mode]]
    - [[#tern][Tern]]
    - [[#eslint][Eslint]]
  - [[#lua][Lua]]
  - [[#markdown-1][Markdown]]
  - [[#php][PHP]]
  - [[#python][Python]]
    - [[#elpy][Elpy]]
    - [[#auto-completion][Auto Completion]]
  - [[#r][R]]
  - [[#ruby-1][Ruby]]
    - [[#inf-ruby][Inf-ruby]]
    - [[#ruby-mode][Ruby Mode]]
    - [[#robe][Robe]]
    - [[#rspec-mode][Rspec-mode]]
    - [[#rails][Rails]]
  - [[#tex][TeX]]
  - [[#web-mode][Web mode]]
  - [[#yaml][Yaml]]
- [[#global-keybindings][Global Keybindings]]
- [[#user-interface][User Interface]]
  - [[#spaceline][Spaceline]]
    - [[#segments][Segments]]
    - [[#setup][Setup]]
    - [[#config][Config]]
  - [[#themes-and-faces][Themes and Faces]]
    - [[#faces][Faces]]
    - [[#themes][Themes]]
  - [[#diminish][Diminish]]
  - [[#beacon][Beacon]]
  - [[#fancy-stuff][Fancy stuff]]
  - [[#frame-title][Frame Title]]
  - [[#tooltips][Tooltips]]
  - [[#fringe][Fringe]]

* Notes for me
  - Use =C-c u= more (=imenu=)
  - Close other window in same frame with =C-w C-o=.
  - Use =C-c p 5 f= to open a file in a new frame with projectile.
  - Use =C-c p n= for =projectile-rails=.
  - Use =C-c ​'​= to edit code blocks in =org-mode=.
* Inspiration

- [[https://github.com/munen/emacs.d][Alain's configuration]]
- [[https://github.com/emacs-tw/awesome-emacs][Awesome-Emacs: A list of awesome Emacs packages]]
- [[https://github.com/caisah/emacs.dz][Emacs.dz: A collection of Emacs configurations]]

* OS Setup
** Installation

Clone, create symlink and update submodules.

#+BEGIN_SRC shell
$ cd ~/git
$ git clone http://github.com/sirpscl/emacs.d
$ ln -s ~/git/emacs.d ~/.emacs.d
$ cd ~/git/emacs.d
$ git submodule update --init
#+END_SRC

** Mu4e

Install and configure [[https://github.com/djcb/mu][mu]] and [[https://github.com/OfflineIMAP/offlineimap][offlineimap]] and make sure mu has indexed
everything.

#+BEGIN_SRC shell
$ mu index --maildir=~/.mail
#+END_SRC

** Go

#+BEGIN_SRC shell
$ go get -u github.com/rogpeppe/godef
$ go get -u github.com/mdempsky/gocode
#+END_SRC

** Markdown

[[https://github.com/jgm/pandoc][Pandoc]] is a swiss-army knife for converting documents.

#+BEGIN_SRC shell
$ pacaur -S pandoc
#+END_SRC

** Web Development

Install =npm= dependencies for linting and auto-completion.

#+BEGIN_SRC shell
$ npm install -g eslint babel-eslint tern
#+END_SRC

** Python Development

Install Python dependencies and packages to manage virtual environments.

#+BEGIN_SRC shell
$ sudo pacman -S python-pip python-virtualenv python2-virtualenv
$ pip install --user jedi flake8 autopep8 yapf
$ mkdir $WORKON_HOME
#+END_SRC

** Ruby

Install dependencies for =robe=. Note that if the project has a =Gemfile=, these
dependencies have to be installed with it.

#+BEGIN_SRC shell
$ gem install pry pry-doc method_source
#+END_SRC

** Dumb Jump

#+BEGIN_SRC shell
$ sudo pacman -S ripgrep
#+END_SRC

* First Use

After the first start, run the following commands.

#+BEGIN_SRC lisp
(jedi:install-server)
#+END_SRC

* Packages
** Installation

Use the =gnu=, =melpa= and =marmelade= archives.

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

A function to install and load packages on demand.

#+BEGIN_SRC emacs-lisp
(cl-defun ph/install-package (package &optional (req t))
  "Installs PACKAGE and requires it unless REQ is set to nil."
  (unless (package-installed-p package)
    (progn
      (package-refresh-contents)
      (package-install package)))
  (when req (require package)))
#+END_SRC

Also load packages which are not in an archive but in this repository.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/vendor/")
#+END_SRC

** Packages for Configuration

=general.el= provides a more convenient method for binding keys in emacs (for
both evil and non-evil users).

#+BEGIN_SRC emacs-lisp
(ph/install-package 'general)
 #+END_SRC

** Package Updates

Update all packages with =auto-package-update-now=.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'auto-package-update)
(setq auto-package-update-interval 7)
#+END_SRC

To calculate the number of available updates, =package-refresh-contents= needs
to be executed. Doing this periodically is annoying since it will block emacs. I
therefore use the following function to query the number of
=auto-package-update-interval= since the last update for my status bar so that I
remeber to update my packages regularly.

#+BEGIN_SRC emacs-lisp
(defun ph/update-intervals-since-last-update ()
  "Return the number of auto-update-package-intervals since the last update."
  (when (file-exists-p auto-package-update-last-update-day-path)
    (/ (- (apu--today-day) (apu--read-last-update-day))
       auto-package-update-interval)))
#+END_SRC

* Tweaking Defaults

This section contains customizations of Emacs' default settings and built-in
packages configuration and extensions.

** Disabled Commands

Enable all disabled commands.

#+BEGIN_SRC emacs-lisp
(setq disabled-command-function nil)
#+END_SRC

** Symlinks

Always Follow Symlinks, no questions asked.

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks nil)
#+END_SRC

** Final Newline

Automatically add a newline at the end of a file.

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

** Backup

No backups, commit frequently!

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

** Auto-Save

Store auto-saves in =/tmp=

#+BEGIN_SRC emacs-lisp
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

** Keystrokes

Show my keystrokes almost immediately in the echo-area.

#+BEGIN_SRC emacs-lisp
(setq echo-keystrokes 0.1)
#+END_SRC

** Scroll

When scrolling, keep the cursor at the same position.

#+BEGIN_SRC emacs-lisp
(setq scroll-preserve-screen-position 'keep)
#+END_SRC

** Auto revert

When something changes a file, automatically refresh the buffer containing that
file so they can't get out of sync.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

** Garbage Collection

Collect garbage after 20MB. Some packages which cache a lot (e.g. =flx-ido=)
will profit.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 20 1000 1000))
#+END_SRC

** Browser

Use Firefox to browse urls.

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox-developer-edition"
      browse-url-generic-args '("--private-window")
      browse-url-new-window-flag t)
#+END_SRC

** Line Filling

Use a line width of 80 columns.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC

To reorganize a paragraph to fit the 80 columns, use =M-q= (=fill-paragraph=)
and/or enable =auto-fill-mode=.

Don't do double-spaces between sentences.

#+BEGIN_SRC emacs-lisp
(setq-default sentence-end-double-space nil)
#+END_SRC

** Whitespace Cleanup

Delete trailing whitespaces when saving.

#+BEGIN_SRC emacs-lisp
(add-hook 'write-file-hooks 'delete-trailing-whitespace)
#+END_SRC

** Buffers and Frames

Split functions wich open the previous buffer in the new window instead of
showing the current buffer twice. [[http://www.alandmoore.com/blog/2013/05/01/better-window-splitting-in-emacs/][Stolen shamelessly from here]]

#+BEGIN_SRC emacs-lisp
(defun ph/vsplit-last-buffer ()
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer))

(defun ph/hsplit-last-buffer ()
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer))
#+END_SRC

A function to open the previous buffer in a new frame.

#+BEGIN_SRC emacs-lisp
(defun ph/open-last-buffer ()
  (interactive)
  (switch-to-buffer-other-frame (other-buffer)))
#+END_SRC

** Sudo Save

Save file with sudo.

# TODO: Make this compatible with all sudo-filenames like /su:root@localhost,
# /sudo:: etc.

   #+BEGIN_SRC emacs-lisp
(defun ph/sudo-file-name (filename)
  "prepends '/sudo:root@localhost:' if not already present"
  (if (not (string-prefix-p "/sudo:root@localhost:" filename))
      (concat "/sudo:root@localhost:" filename)
    filename))

(defun ph/sudo-save ()
  "save file with sudo"
  (interactive)
  (if (not buffer-file-name)
      (write-file (ph/sudo-file-name (ido-read-file-name "File:")))
    (write-file (ph/sudo-file-name buffer-file-name))))
   #+END_SRC

** Occur

[[http://emacswiki.org/emacs/OccurMode][occur-mode]] is a search minor-mode that shows a buffer with all matching results
in a popup buffer. Use the occur-dwim (do what I mean) function from [[https://oremacs.com/2015/01/26/occur-dwim/][(or emacs
irrelevant)]]

#+BEGIN_SRC emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (let ((sym (thing-at-point 'symbol)))
            (when (stringp sym)
              (regexp-quote sym))))
        regexp-history)
  (call-interactively 'occur))
#+END_SRC

** Dired

Usage:
 - =a= to open a file or directory in the current buffer
 - =RET= to open a file or directory in a new buffer
 - =o= to open a file or directory in a vertical split buffer
 - =C-o= to open a file or directory in a vertical split buffer but keep the
   focus in the current buffer.
 - =C-c C-o= to open a file or directory in a new frame.

Reuse buffer

#+BEGIN_SRC emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

Show all files, in long listing format and human readable units.

#+BEGIN_SRC emacs-lisp
(setq-default dired-listing-switches "-lh")
#+END_SRC

Open in new frame

#+BEGIN_SRC emacs-lisp
(defun ph/dired-find-file-other-frame ()
  "In Dired, visit this file or directory in another window."
  (interactive)
  (find-file-other-frame (dired-get-file-for-visit)))

(eval-after-load "dired"
  '(define-key dired-mode-map (kbd "C-c C-o") 'ph/dired-find-file-other-frame))
#+END_SRC

** Org Mode

Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system.

#+BEGIN_SRC emacs-lisp
(require 'org)
#+END_SRC

*** Settings

Use =TAB= for org-cycle. This is not the case by default in terminal clients
with =evil-mode= enabled.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
  (lambda () (define-key evil-normal-state-map (kbd "TAB") 'org-cycle)))
#+END_SRC

Automatically fill lines

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC

Don't ask every time when executing a code block.

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

Don't indent code blocks

#+BEGIN_SRC emacs-lisp
(setq org-edit-src-content-indentation 0)
#+END_SRC

*** TOC-Org

Every time you’ll be saving an org file, the first headline with a =:TOC:= tag
will be updated with the current table of contents.

 - =:TOC_2:= - sets the max depth of the headlines in the table of contents to 2
   (the default)
 - =:TOC_2_gh:= - sets the max depth as in above and also uses the GitHub-style
   hrefs in the table of contents (this style is default). The other supported
   href style is ‘org’, which is the default org style.


#+begin_src emacs-lisp
(ph/install-package 'toc-org)
(add-hook 'org-mode-hook 'toc-org-enable)
#+end_src

*** Org-Ref

=org-ref=: citations, cross-references, indexes, glossaries and bibtex utilities
for org-mode.

#+begin_src emacs-lisp
(ph/install-package 'org-ref)
#+end_src

* General Packages

This section contains some third party packages.

** Which-Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a minor mode for Emacs that displays the key bindings following
your currently entered incomplete command (a prefix) in a popup.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'which-key)
(which-key-mode)
#+END_SRC

Also use which-key in all evil states.

#+BEGIN_SRC emacs-lisp
(which-key-enable-god-mode-support)
#+END_SRC

Show command names up to 40 columns before cutting them.

#+BEGIN_SRC emacs-lisp
(setq which-key-max-description-length 40)
#+END_SRC

** Session

Restore some stuff (command histories, kill-ring, ...) from last session.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'session)
(add-hook 'after-init-hook 'session-initialize)
#+END_SRC

** Browse-Kill-Ring

#+BEGIN_SRC emacs-lisp
(ph/install-package 'browse-kill-ring)

(setq browse-kill-ring-highlight-inserted-item t
      browse-kill-ring-highlight-current-entry nil
      browse-kill-ring-show-preview t)

(general-def browse-kill-ring-mode-map
  "k" 'browse-kill-ring-previous
  "j" 'browse-kill-ring-forward)
#+END_SRC

** Crux

[[https://github.com/bbatsov/crux][A Collection of Ridiculously Useful eXtensions]] for Emacs. crux bundles a few
useful interactive commands to enhance your overall Emacs experience.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'crux)
#+END_SRC

** Ag

=ag= allows you to search using ag from inside Emacs. You can filter by file
type, edit results inline, or find files.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'ag)
#+END_SRC

** Ripgrep

=Ripgrep= is a replacement for both grep like (search one file) and ag like
(search many files) tools. It's fast and versatile and written in Rust.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'rg)
#+END_SRC

** Evil

=evil= is an extensible vi layer for Emacs. It emulates the main features of Vim,
and provides facilities for writing custom extensions.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'evil)
(ph/install-package 'evil-ediff)

(evil-mode 1)
#+END_SRC

Call =ph/sudo-save= with =:ww=.

#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "ww" 'ph/sudo-save)
#+END_SRC

Set initial state by major mode.

#+BEGIN_SRC emacs-lisp
(dolist (mode-map '((ag-mode . emacs)
                    (calendar-mode . emacs)
                    (elfeed-show-mode . emacs)
                    (elfeed-search-mode . emacs)
                    (eshell-mode . emacs)
                    (flycheck-error-list-mode . emacs)
                    (git-commit-mode . insert)
                    (git-rebase-mode . emacs)
                    (help-mode . emacs)
                    (inferior-ess-mode . emacs)
                    (inf-ruby-mode . emacs)
                    (pdf-occur-buffer-mode . emacs)
                    (ranger-mode . emacs)
                    (rspec-compilation-mode . emacs)
                    (shell-mode . emacs)
                    (term-mode . emacs)))
  (evil-set-initial-state `,(car mode-map) `,(cdr mode-map)))
#+END_SRC

*** Surround

- Add surrounding ~​'​~ with ~S'​~ from visual-state (use =viw= to mark current
  word)
- Change surrounding ~​'​~ to ~*~ with ~cs'*~
- Remove surrounding ~*~ with ~ds*~

#+BEGIN_SRC emacs-lisp
(ph/install-package 'evil-surround)
(global-evil-surround-mode 1)
#+END_SRC

*** God State

=evil-god-state= is a global minor mode for entering Emacs commands without modifier
keys. It's similar to Vim's separation of commands and insertion mode.
=evil-god-state= is =god-mode= for =evil-mode=.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'evil-god-state)
#+END_SRC

Keybinding to escape god-state.

#+BEGIN_SRC emacs-lisp
(general-def 'god
  [escape] 'evil-god-state-bail
  "C-g"    'evil-god-state-bail)
#+END_SRC

*** Keybindings

#+BEGIN_SRC emacs-lisp
(general-def 'normal
  "," 'evil-execute-in-god-state)
#+END_SRC

Evil motion-states are the evil states where we don't edit text.

#+BEGIN_SRC emacs-lisp
(general-def 'motion
  "j" 'evil-next-visual-line
  "k" 'evil-previous-visual-line)
#+END_SRC

Free =M-.= and =M-,​= since they are popular kebinings for "jump to definition"
and "back".

#+BEGIN_SRC emacs-lisp
(general-def 'normal
  "M-." nil
  "M-," nil)
#+END_SRC

Auto complete with =C-SPC=.

#+BEGIN_SRC emacs-lisp
(general-def 'insert
  "C-SPC" 'company-complete)
#+END_SRC

** Projectile

=projectile= is a project interaction library for Emacs. Its goal is to provide a
nice set of features operating on a project level without introducing external
dependencies (when feasible).

#+BEGIN_SRC emacs-lisp
(ph/install-package 'projectile)
(projectile-mode +1)
(general-def projectile-mode-map
  "C-c p" 'projectile-command-map)
(setq projectile-completion-system 'ivy)
#+END_SRC

** Ido

=ido= ("interactively do things") supercharges Emacs' completion system.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'ido)
(ido-mode 1)
(ido-everywhere 1)
#+END_SRC

Enable the built-in fuzzy-matching

#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
#+END_SRC

Enable =ido-vertical-mode=

#+BEGIN_SRC emacs-lisp
(ph/install-package 'ido-vertical-mode)
(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
(setq ido-vertical-show-count t)
#+END_SRC

** Counsel

=counsel=, a collection of Ivy-enhanced versions of common Emacs commands.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'counsel)
(ph/install-package 'counsel-projectile)
(counsel-projectile-mode)
 #+END_SRC

#+BEGIN_SRC emacs-lisp
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
 #+END_SRC

Show current entry number.

#+BEGIN_SRC emacs-lisp
(setq ivy-count-format "%d/%d ")
 #+END_SRC

** Imenu

#+BEGIN_SRC emacs-lisp
(ph/install-package 'imenu-anywhere)
 #+END_SRC

** Ranger

[[https://github.com/ralesi/ranger.el][ranger]] is a minor mode that runs within dired, it emulates many of [[https://ranger.github.io/][ranger's]]
features. This minor mode shows a stack of parent directories, and updates the
parent buffers, while you're navigating the file system. The preview window
takes some of the ideas from [[https://github.com/asok/peep-dired][Peep-Dired]], to display previews for the selected
files, in the primary dired buffer.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'ranger)
#+END_SRC

Kill the buffers, after moving to another entry in the dired buffer.

#+BEGIN_SRC emacs-lisp
(setq ranger-cleanup-eagerly t)
#+END_SRC

Don't show hidden files by default. This can be toggled with =zh=.

#+BEGIN_SRC emacs-lisp
(setq ranger-show-hidden nil)
#+END_SRC

See the full list of [[https://github.com/ralesi/ranger.el#ranger-key-bindings][keybindings here]].

** Dictionary

=dictcc= translates English to German and vice versa.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'dictcc)
#+END_SRC

** PDF

=pdf-tools= is, among other things, a replacement of DocView for PDF files. The
key difference is that pages are not pre-rendered by e.g. ghostscript and stored
in the file-system, but rather created on-demand and stored in memory.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'pdf-tools)
(pdf-tools-install-noverify)
#+END_SRC

When highlighting, automatically add an annotation.

#+BEGIN_SRC emacs-lisp
(setq pdf-annot-activate-created-annotations t)
#+END_SRC

Zoom by 10%.

#+BEGIN_SRC emacs-lisp
(setq pdf-view-resize-factor 1.1)
#+END_SRC

Kebindings:
 - =C-c C-a h= to highlight text
 - =C-c C-a o= to strike though text
 - =C-c C-a t= to add a note
 - =C-c C-a D= to delete one of the above
 - =C-c C-a l= to list all annotations. Use =SPACE= to jump to the annotation.
 - [[https://github.com/politza/pdf-tools#some-keybindings][and more]]

** News Feeds

Elfeed is an extensible web feed reader for Emacs, supporting both Atom and RSS.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'elfeed)
(ph/install-package 'elfeed-goodies)
(ph/install-package 'elfeed-org)
(elfeed-goodies/setup)
(elfeed-org)
(setq rmh-elfeed-org-files (list "~/git/system_config/emacs/elfeed.org"))
#+END_SRC

Go up and down with =j= and =k=.

#+BEGIN_SRC emacs-lisp
(general-def elfeed-search-mode-map
  "j" 'next-line
  "k" 'previous-line)
#+END_SRC


Show date

#+BEGIN_SRC emacs-lisp
(defun elfeed-goodies/search-header-draw ()
  "Returns the string to be used as the Elfeed header."
  (if (zerop (elfeed-db-last-update))
      (elfeed-search--intro-header)
    (let* ((separator-left (intern (format "powerline-%s-%s"
                                           elfeed-goodies/powerline-default-separator
                                           (car powerline-default-separator-dir))))
           (separator-right (intern (format "powerline-%s-%s"
                                            elfeed-goodies/powerline-default-separator
                                            (cdr powerline-default-separator-dir))))
           (db-time (seconds-to-time (elfeed-db-last-update)))
           (stats (-elfeed/feed-stats))
           (search-filter (cond
                           (elfeed-search-filter-active
                            "")
                           (elfeed-search-filter
                            elfeed-search-filter)
                           (""))))
      (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
          (search-header/draw-wide separator-left separator-right search-filter stats db-time)
        (search-header/draw-tight separator-left separator-right search-filter stats db-time)))))

(defun elfeed-goodies/entry-line-draw (entry)
  "Print ENTRY to the buffer."

  (let* ((title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
         (date (elfeed-search-format-date (elfeed-entry-date entry)))
         (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
         (feed (elfeed-entry-feed entry))
         (feed-title
          (when feed
            (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
         (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
         (tags-str (concat "[" (mapconcat 'identity tags ",") "]"))
         (title-width (- (window-width) elfeed-goodies/feed-source-column-width
                         elfeed-goodies/tag-column-width 4))
         (title-column (elfeed-format-column
                        title (elfeed-clamp
                               elfeed-search-title-min-width
                               title-width
                               title-width)
                        :left))
         (tag-column (elfeed-format-column
                      tags-str (elfeed-clamp (length tags-str)
                                             elfeed-goodies/tag-column-width
                                             elfeed-goodies/tag-column-width)
                      :left))
         (feed-column (elfeed-format-column
                       feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width)
                       :left)))

    (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
        (progn
          (insert (propertize date 'face 'elfeed-search-date-face) " ")
          (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
          (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
          (insert (propertize title 'face title-faces 'kbd-help title)))
      (insert (propertize title 'face title-faces 'kbd-help title)))))
#+END_SRC

** Mail

[[https://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]] is an emacs-based e-mail client. It’s based on the mu e-mail
indexer/searcher. It attempts to be a super-efficient tool to withstand the
daily e-mail tsunami.

#+BEGIN_SRC emacs-lisp
(require 'mu4e)
(require 'mu4e-contrib)
(ph/install-package 'smtpmail)
#+END_SRC

*** General

Mail directory

#+BEGIN_SRC emacs-lisp
(setq mu4e-maildir "~/.mail")
#+END_SRC

Save attachments in =~/Downloads/=.

#+BEGIN_SRC emacs-lisp
(setq mu4e-attachment-dir  "~/Downloads")
#+END_SRC

Close mu4e without asking

#+BEGIN_SRC emacs-lisp
(setq mu4e-confirm-quit nil)
#+END_SRC

Open mu4e in the current frame, even if it is already opened in another
,possibly forgotten, frame.

#+BEGIN_SRC emacs-lisp
(defun ph/mu4e ()
  "Open mu4e even if its already opened somewhere else."
  (interactive)
  (unless (string-prefix-p "mu4e" (symbol-name major-mode))
    (let ((buffer (get-buffer "*mu4e-headers*")))
      (if buffer (switch-to-buffer buffer) (mu4e)))))
#+END_SRC

*** Headers

Show dates as =dd.mm.yy=, and times in =HH:MM=.

#+BEGIN_SRC emacs-lisp
(setq mu4e-headers-time-format "%H:%M")
(setq mu4e-headers-date-format "%d.%m.%y")
#+END_SRC

Do not show related messages by default (toggle with =W=)

#+BEGIN_SRC emacs-lisp
(setq mu4e-headers-include-related nil)
#+END_SRC

Don't show duplicate messages.

#+BEGIN_SRC emacs-lisp
(setq mu4e-headers-skip-duplicates t)
#+END_SRC

Add default search values for =mu4e-headers-search= unless arguments are given
to =mu4e-headers-search= or the search is not called from within a mu4e-buffer.
The values are set in the context definition (=ph/mu4e-default-search-expr=).

#+BEGIN_SRC emacs-lisp
(advice-add 'mu4e-headers-search :around
            (lambda (fn &rest args)
              (if (and (= 0 (length args))
                       (string-prefix-p "mu4e" (symbol-name major-mode))
                       (< 0 (length ph/mu4e-default-search-expr)))
                  (apply fn (list (concat ph/mu4e-default-search-expr " ")
                                  "Search for: " t))
                (apply fn args))))
#+END_SRC


Some functions to get some additional information about emails. [[https://etienne.depar.is/emacs.d/mu4e.html][Stolen
shamelessly from here]]

#+BEGIN_SRC emacs-lisp
(defun ph/mu4e-get-user-agent (msg)
  (let ((path (or (mu4e-message-field msg :path) "")))
    (if (or (string= path "")
            (not (file-readable-p path)))
        "no path found"
      (let ((xmailer (ph/mu4e-get-mail-header "x-mailer" path))
            (useragent (ph/mu4e-get-mail-header "user-agent" path)))
        (if (string= xmailer useragent)
            xmailer
          (cond
           ((string= xmailer "") useragent)
           ((string= useragent "") xmailer)
           (t (concat xmailer " (xmailer)\n" useragent " (user-agent)"))))))))

(defun ph/mu4e-get-mail-header (header-name path)
  (replace-regexp-in-string
   "[ \t\n]*$"
   ""
   (shell-command-to-string
    (concat "/usr/bin/sed -n '/^" header-name
            ":/I{:loop t;h;n;/^ /{H;x;s/\\n//;t loop};x;p}' '" path
            "' | sed -n 's/^" header-name
            ": \\(.*\\)$/\\1/Ip'"))))

(add-to-list 'mu4e-header-info-custom
             '(:useragent . (:name "User-Agent"
                                   :shortname "UserAgt."
                                   :help "Mail client used by correspondant"
                                   :function ph/mu4e-get-user-agent)))
#+END_SRC

Set the fields displayed in =mu4e-headers-mode= and =mu4e-view-mode=.

#+BEGIN_SRC emacs-lisp
(setq mu4e-headers-fields
      '((:mailing-list . 4)
        (:flags        . 4)
        (:human-date   . 10)
        (:from         . 25)
        (:subject)))
#+END_SRC

Ask before I delete something permanently.

#+BEGIN_SRC emacs-lisp
(defun ph/do-or-dont-execute (fn &rest args)
  "Ask if FN should be executed (with ARGS)."
  (when (y-or-n-p "Execute ? ")
    (apply fn args)))

(advice-add 'mu4e-headers-mark-for-delete
            :around 'ph/do-or-dont-execute)
(advice-add 'mu4e-view-mark-for-delete
            :around 'ph/do-or-dont-execute)
#+END_SRC

*** View

Show the useragent of the sender.

#+BEGIN_SRC emacs-lisp
(add-to-list 'mu4e-view-fields ':useragent t)
#+END_SRC

Show me the addresses, not only names.

#+BEGIN_SRC emacs-lisp
(setq mu4e-view-show-addresses t)
#+END_SRC

View html-mail in browser with =aV=.

#+BEGIN_SRC emacs-lisp
(add-to-list 'mu4e-view-actions
             '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#+END_SRC

*** Bookmarks

Custom Bookmarks

#+BEGIN_SRC emacs-lisp
(add-to-list 'mu4e-bookmarks
             (make-mu4e-bookmark
              :name  "Big messages"
              :query "size:5M..50000M"
              :key ?b))
#+END_SRC

*** Compose

Enabling receiving clients that support this feature to reflow my paragraphs.
Plain text emails with =Content-Type: text/plain; format=flowed= can be reflowed
(i.e. line endings removed, paragraphs refilled) by receiving clients that
support this standard. Clients that don’t support this, show them as is, which
means this feature is truly non-invasive.

#+BEGIN_SRC emacs-lisp
(setq mu4e-compose-format-flowed t)
#+END_SRC

Dont reply to myself.

#+BEGIN_SRC emacs-lisp
(setq mu4e-compose-dont-reply-to-self t)
#+END_SRC

Kill message-buffer when finished.

#+BEGIN_SRC emacs-lisp
(setq message-kill-buffer-on-exit t)
#+END_SRC

When replying an encrypted message, encrypt and sign the answer. [[https://github.com/djcb/mu/issues/865#issuecomment-228297390][Stolen
shamelessly from here]].

 #+BEGIN_SRC emacs-lisp
(add-hook 'mu4e-compose-mode-hook
  (defun my/maybe-reply-encrypted ()
    (let ((msg mu4e-compose-parent-message))
      (when (and msg (member 'encrypted (mu4e-message-field msg :flags)))
        (mml-secure-message-sign-encrypt)))))
 #+END_SRC

*** Send

Use =smtpmail= with =tnutls= to sending mails.

#+BEGIN_SRC emacs-lisp
(setq message-send-mail-function 'smtpmail-send-it)
(setq starttls-use-gnutls t)
(setq smtpmail-debug-info t)
#+END_SRC

Before sending a message, check if it contains any words that indicate that
there should be an attachement. If it does, ask if all attachments were added
before sending the mail.

#+BEGIN_SRC emacs-lisp
(defvar ph/message-attachment-regexp
  (concat "\\("
          "[Ww]e send\\|"
          "[Ii] send\\|"
          "attach\\|"
          "[aA]nhang\\|"
          "[aA]ngehängt\\|"
          "[sS]chicke\\|"
          "haenge\\|"
          "hänge\\)"))

(defun ph/message-check-attachment nil
  "Check for forgotten attachments"
  (save-excursion
    (message-goto-body)
    (when (search-forward-regexp ph/message-attachment-regexp nil t nil)
      (message-goto-body)
      (unless (message-y-or-n-p
               "Did you attach all documents?" nil nil)
        (error "No message sent, add some attachments!")))))

(add-hook 'message-send-hook 'ph/message-check-attachment)
#+END_SRC

*** Contexts

Pick first Context as default.

#+BEGIN_SRC emacs-lisp
(setq mu4e-context-policy 'pick-first)
(setq mu4e-compose-context-policy 'ask-if-none)

(setq mu4e-contexts
      `(,(make-mu4e-context
          :name "Private"
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg
                           :to "pascal.huber@resolved.ch")))
          :vars '((user-full-name                . "Pascal Huber" )
                  (user-mail-address             . "pascal.huber@resolved.ch")
                  (mu4e-get-mail-command         . "offlineimap -a Private,QuickshiftPascal,ETH")
                  (mu4e-drafts-folder            . "/r/INBOX.Drafts")
                  (mu4e-sent-folder              . "/r/INBOX.Sent")
                  (mu4e-trash-folder             . "/r/INBOX.Trash")
                  (mu4e-maildir-shortcuts
                   .( ("/r/INBOX"                . ?i)
                      ("/r/INBOX.Sent"           . ?s)
                      ("/r/INBOX.spambucket"     . ?x)
                      ("/r/INBOX.keep"           . ?k)
                      ("/r/INBOX.tempKeep"       . ?t)
                      ("/r/INBOX.Trash"          . ?b)))
                  (ph/mu4e-default-search-expr   . "maildir:/r/*")
                  (mu4e-sent-messages-behavior   . sent)
                  (smtpmail-stream-type          . starttls)
                  (smtpmail-default-smtp-server  . "mail.resolved.ch")
                  (smtpmail-smtp-server          . "mail.resolved.ch")
                  (smtpmail-smtp-service         . 587)
                  (smtpmail-smtp-user            . "pascal.huber@resolved.ch")
                  (smtpmail-starttls-credentials . "/home/pascal/.authinfo.gpg")
                  (smtpmail-auth-credentials     . '(("mail.resolved.ch" 587 nil nil)))))
        ,(make-mu4e-context
          :name "QuickShift"
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches msg
                                                              :to "pascal@quickshift.ch")))
          :vars '((user-full-name                . "Pascal Huber" )
                  (user-mail-address             . "pascal@quickshift.ch")
                  (mu4e-get-mail-command         . "offlineimap -a Private,QuickshiftPascal,ETH")
                  (mu4e-drafts-folder            . "/q/INBOX.Drafts")
                  (mu4e-sent-folder              . "/q/INBOX.Sent")
                  (mu4e-trash-folder             . "/q/INBOX.Trash")
                  (mu4e-maildir-shortcuts
                   .( ("/q/INBOX"                . ?i)
                      ("/q/INBOX.Sent"           . ?s)
                      ("/q/INBOX.spambucket"     . ?x)
                      ("/q/INBOX.keep"           . ?k)
                      ("/q/INBOX.live"           . ?l)
                      ("/q/INBOX.customers"      . ?c)
                      ("/q/INBOX.tempKeep"       . ?k)
                      ("/q/INBOX.bugsnag"        . ?e)
                      ("/q/INBOX.Trash"          . ?b)))
                  (ph/mu4e-default-search-expr   . "maildir:/q/*")
                  (mu4e-sent-messages-behavior   . sent)
                  (smtpmail-stream-type          . starttls)
                  (smtpmail-default-smtp-server  . "mail.quickshift.ch")
                  (smtpmail-smtp-server          . "mail.quickshift.ch")
                  (smtpmail-smtp-service         . 587)
                  (smtpmail-smtp-user            . "pascal@quickshift.ch")
                  (smtpmail-starttls-credentials . "/home/pascal/.authinfo.gpg")
                  (smtpmail-auth-credentials     . '(("mail.quickshift.ch" 587 nil nil)))))
        ,(make-mu4e-context
          :name "ETH"
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg
                           :to "pahuber@student.ethz.ch")))
          :vars '((user-full-name                . "Pascal Huber" )
                  (user-mail-address             . "pahuber@student.ethz.ch")
                  (mu4e-get-mail-command         . "offlineimap -a Private,QuickshiftPascal,ETH")
                  (mu4e-drafts-folder            . "/e/Drafts")
                  (mu4e-sent-folder              . "/e/Sent Items")
                  (mu4e-trash-folder             . "/e/Deleted Items")
                  (mu4e-maildir-shortcuts
                   .( ("/e/INBOX"                . ?i)
                      ("/e/Sent Items"           . ?s)
                      ("/e/Junk E-Mail"          . ?x)
                      ("/e/INBOX.keep"           . ?k)
                      ("/e/INBOX.and"            . ?a)
                      ("/e/INBOX.tmp"            . ?t)
                      ("/e/Deleted Items"        . ?b)))
                  (ph/mu4e-default-search-expr   . "maildir:/e/*")
                  (mu4e-sent-messages-behavior   . sent)
                  (smtpmail-stream-type          . starttls)
                  (smtpmail-default-smtp-server  . "mail.ethz.ch")
                  (smtpmail-smtp-server          . "mail.ethz.ch")
                  (smtpmail-smtp-service         . 587)
                  (smtpmail-smtp-user            . "pahuber")
                  (smtpmail-starttls-credentials . "/home/pascal/.authinfo.gpg")
                  (smtpmail-auth-credentials     . '(("mail.ethz.ch" 587 nil nil)))))
        ,(make-mu4e-context
          :name "Gmail"
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg
                           :to "mr.huber.pascal@gmail.com")))
          :vars '((user-full-name                . "Pascal Huber")
                  (user-mail-address	           . "mr.huber.pascal@gmail.com")
                  (mu4e-get-mail-command         . "offlineimap -a Gmail")
                  (mu4e-drafts-folder            . "/g/[Gmail].Drafts")
                  (mu4e-sent-folder              . "/g/[Gmail].Sent Mail")
                  (mu4e-trash-folder             . "/g/[Gmail].Bin")
                  (mu4e-maildir-shortcuts
                   .( ("/g/INBOX"                . ?i)
                      ("/g/[Gmail].Sent Mail"    . ?s)
                      ("/g/[Gmail].Spam"         . ?x)
                      ("/g/[Gmail].Bin"          . ?b)))
                  (ph/mu4e-default-search-expr   . "")
                  (mu4e-sent-messages-behavior   . delete)
                  (smtpmail-stream-type          . starttls)
                  (smtpmail-default-smtp-server  . "smtp.gmail.com")
                  (smtpmail-smtp-server          . "smtp.gmail.com")
                  (smtpmail-smtp-service         . 587)
                  (smtpmail-smtp-user            . "mr.huber.pascal@gmail.com")
                  (smtpmail-starttls-credentials . "/home/pascal/.authinfo.gpg")
                  (smtpmail-auth-credentials     . '(("smtp.gmail.com" 587 nil nil)))))))
#+END_SRC

* Programming

This section contains programming-specific packages and settings.

** General Purpose
*** Autocomplete

=company= is a text completion framework for Emacs. The name stands for
"complete anything". It uses pluggable back-ends and front-ends to retrieve and
display completion candidates.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'company)
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

**** Settings

Automatically show completion after 1 character.

#+BEGIN_SRC emacs-lisp
(setq company-minimum-prefix-length 1)
#+END_SRC

Don't require a match to continue typing.

#+BEGIN_SRC emacs-lisp
(setq company-require-match nil)
#+END_SRC

Switch between suggestions with =C-n= and =C-p=.

#+BEGIN_SRC emacs-lisp
(general-def company-active-map
  "C-n" 'company-select-next
  "C-p" 'company-select-previous)

(general-def company-search-map
  "C-n" 'company-select-next
  "C-p" 'company-select-previous)
#+END_SRC

Disable evil-complete

#+BEGIN_SRC emacs-lisp
(general-def 'insert
  "C-p" nil
  "C-n" nil)
#+END_SRC

**** Backends

Install some backends.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'company-bibtex)
(add-to-list 'company-backends 'company-bibtex)

(ph/install-package 'company-auctex)
(company-auctex-init)

(ph/install-package 'company-inf-ruby)
(add-to-list 'company-backends 'company-inf-ruby)

(ph/install-package 'company-shell)
(add-to-list 'company-backends 'company-shell)

(ph/install-package 'company-tern)
(add-to-list 'company-backends 'company-tern)

(ph/install-package 'company-web nil)
(require 'company-web-html)
(add-to-list 'company-backends 'company-web-html)

(ph/install-package 'company-go)
#+END_SRC

=jquery-doc= provides completion source for auto-complete and company-mode as
well as a =jquery-doc= command to lookup documentation.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'jquery-doc)
#+END_SRC

*** Brackets

Make brackets colorful

 #+BEGIN_SRC emacs-lisp
(ph/install-package 'rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
 #+END_SRC

Highlight matching brackets.

#+BEGIN_SRC emacs-lisp
(setq show-paren-style 'mixed)
(add-hook 'prog-mode-hook 'show-paren-mode)
#+END_SRC

*** Display Line Numbers

Show line numbers in programming modes

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

Count the number of lines to use for line number width.

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-width-start t)
#+END_SRC

*** Dumb Jump

[[https://github.com/jacktasia/dumb-jump][Dumb Jump]] is an Emacs "jump to definition" package with support for multiple
programming languages that favors "just working". This means minimal -- and
ideally zero -- configuration with absolutely no stored indexes (TAGS) or
persistent background processes

#+BEGIN_SRC emacs-lisp
(ph/install-package 'dumb-jump)
(dumb-jump-mode)
(setq dumb-jump-selector 'ivy)
(setq dumb-jump-use-visible-window nil)
 #+END_SRC

*** Flycheck

Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'flycheck)
 #+END_SRC

Enable =Flycheck= globally (=prog-mode-hook= may not cover all modes).

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-flycheck-mode)
 #+END_SRC

Use =C-c ! l= (=M-x flycheck-list-errors=) to list all errors. Within the error
list the following key bindings are available:
 - =n= Jump to the next error
 - =p= Jump to the previous error
 - =e= Explain the error
 - =f= Filter the error list by level
 - =F= Remove this filter
 - =S= Sort the error list bye the column at point
 - =g= Check the source buffer and update the error list
 - =q= Quit the error list and hide its window

*** Git

Magit is an interface to the version control system Git.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'magit)
#+END_SRC

Show =TODO= in magit-buffer

#+BEGIN_SRC emacs-lisp
(ph/install-package 'magit-todos)
(magit-todos-mode t)
#+END_SRC

Some major-modes to configure git repositories.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'gitattributes-mode)
(ph/install-package 'gitconfig-mode)
(ph/install-package 'gitignore-mode)
#+END_SRC

*** Rainbow

This minor mode sets background color to strings that match color names, e.g.
#0000ff is displayed in white with a blue background

#+BEGIN_SRC emacs-lisp
(ph/install-package 'rainbow-mode)
(add-hook 'prog-mode-hook 'rainbow-mode)
#+END_SRC

** Go

#+BEGIN_SRC emacs-lisp
(ph/install-package 'go-mode)
#+END_SRC

** Haml

#+BEGIN_SRC emacs-lisp
(ph/install-package 'haml-mode)
#+END_SRC

** Indentation

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil
              tab-width 2)
(setq js-indent-level 2)
(setq python-indent 2)
(setq css-indent-offset 2)
(setq sh-basic-offset 2)
(setq sh-indentation 2)
#+END_SRC

** JavaScript
*** JS2-mode

#+BEGIN_SRC emacs-lisp
(ph/install-package 'js2-mode)
(ph/install-package 'js2-refactor)
#+END_SRC

*** Tern

This is Tern. Tern is a stand-alone, editor-independent JavaScript analyzer that
can be used to improve the JavaScript integration of existing editors.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'tern)
#+END_SRC

Put a file =.tern-project= in the root of the project. Additionally, a file
=~/.tern-config=.

A Ruby on Rails =.tern-project= may look like this:

#+BEGIN_SRC javascript
{
  "libs": [
    "browser",
    "jquery"
  ],
  "loadEagerly": [
    "app/assets/javascripts/**/*.js",
    "lib/assets/javascript/**/*.js",
    "vendor/assets/javascript/**/*.js"
  ],
  "plugins": {
    "es_modules": {},
    "node": {}
  }
}
#+END_SRC

And my =~/.tern-config=

#+BEGIN_SRC javascript
{
  "libs": [
    "browser",
    "jquery"
  ],
  "plugins": {
    "es_modules": {},
    "node": {}
  }
}
#+END_SRC

*** Eslint

Use =eslint= instead of =jshint=.

#+BEGIN_SRC emacs-lisp
(setq-default flycheck-disabled-checkers (append flycheck-disabled-checkers
                      '(javascript-jshint)))
(flycheck-add-mode 'javascript-eslint 'web-mode)
#+END_SRC

** Lua

#+BEGIN_SRC emacs-lisp
(ph/install-package 'lua-mode)
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
(ph/install-package 'markdown-mode)
(setq markdown-command "pandoc")
#+END_SRC

** PHP

#+BEGIN_SRC emacs-lisp
(ph/install-package 'php-mode)
#+END_SRC

** Python
*** Elpy

#+BEGIN_SRC emacs-lisp
(ph/install-package 'elpy)
(elpy-enable)
#+END_SRC

Some useful commands:

 - =M-x run-python= to start a shell
 - =C-c C-z= to switch to shell
 - =C-c C-y b= to send buffer to shell
 - many more send to shell functions

*** Auto Completion

Jedi is a Python auto-completion package for Emacs.

# TODO: Compare jedi with rope.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'jedi)
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)
#+END_SRC

** R

Emacs Speaks Statistics (=ess=) is designed to support editing of scripts and
interaction with various statistical analysis programs such as R, S-Plus, SAS,
Stata and OpenBUGS/JAGS.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'ess)
#+END_SRC

Function:
 - =C-c C-b= to eval buffer
 - =C-c C-j= to eval line
 - =C-c C-r= to eval region
 - =C-c C-f= to eval function
 - And [[https://ess.r-project.org/Manual/ess.html][more]]

** Ruby
*** Inf-ruby

#+BEGIN_SRC emacs-lisp
(ph/install-package 'inf-ruby)
#+END_SRC

*** Ruby Mode

Use =ruby-mode= for all common ruby-files.

No magic comments

#+BEGIN_SRC emacs-lisp
(setq ruby-insert-encoding-magic-comment nil)
#+END_SRC

*** Robe

#+BEGIN_SRC emacs-lisp
(ph/install-package 'robe)
#+END_SRC

Add the following gems to the =Gemfile= (if existent) and install them.

#+BEGIN_SRC ruby
group :development do
  gem 'pry'
  gem 'pry-doc'
  gem 'method_source'
end
#+END_SRC

Generally, you'll want to start with =M-x inf-ruby-console-auto=. If there's no
Ruby console running, most interactive commands provided by Robe will offer to
launch it automatically.

The exceptions are code completion and eldoc, which only work if the server is
already running. To launch it, type =M-x robe-start=.

As you change the code in your project, you'll want to update the running
process. To load the current file, type =C-c C-l= (=ruby-load-file=), see
inf-ruby for more commands. When you're working on a Rails project, you can type
=C-c C-k= instead to reload the whole environment at once.

#+BEGIN_SRC emacs-lisp
(add-hook 'ruby-mode-hook 'robe-mode)
#+END_SRC

Some useful Commands/Keybindings
 - =C-c C-d= Lookup documentation
 - =M-.= / =M-,​= Jump to defintion and back

Use company mode for code completion.

#+BEGIN_SRC emacs-lisp
(eval-after-load 'company
  '(push 'company-robe company-backends))
#+END_SRC

*** Rspec-mode

Put the following in the =Gemfile=.

#+BEGIN_SRC ruby
group :development do
  gem 'spring-commands-rspec'
end
#+END_SRC

Usage:

- =C-c , s= Verify the example or method defined at point
- =C-c , m= Run all specs related to the current buffer
- =C-c , a= Run spec for entire project
- [[https://github.com/pezra/rspec-mode#usage][and more]]

Load it.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/vendor/rspec-mode")
(ph/install-package 'rspec-mode)
(require 'ansi-color)
(eval-after-load 'rspec-mode '(rspec-install-snippets))
#+END_SRC

When you've hit the breakpoint, hit =C-x C-q= to enable inf-ruby.

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'inf-ruby-switch-setup)
#+END_SRC

*** Rails

#+BEGIN_SRC emacs-lisp
(setq projectile-rails-keymap-prefix (kbd "C-c p n"))
(ph/install-package 'projectile-rails)
(projectile-rails-global-mode)
#+END_SRC

** TeX

AUCTeX is an extensible package for writing and formatting TeX files in GNU
Emacs.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'auctex nil)
#+END_SRC

Parse on load and save. This increases performance, especially for large
multifile projects. The information is stored in an "auto" subdirectory.

#+BEGIN_SRC emacs-lisp
(setq TeX-parse-self t)
(setq TeX-auto-save t)
#+END_SRC

Query to find out which is the master file.

#+BEGIN_SRC emacs-lisp
(setq-default TeX-master nil)
#+END_SRC

I use Evince to view my PDFs.

#+BEGIN_SRC emacs-lisp
(setq TeX-PDF-mode t)
(setq TeX-view-program-selection '((output-pdf "Evince")))
#+END_SRC

Sync with evince. Use =Control + Left Click= for backward search.

#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
(setq TeX-source-correlate-start-server t)
#+END_SRC

** Web mode

=web-mode= is an autonomous emacs major-mode for editing web templates. HTML
documents can embed parts (CSS / JavaScript) and blocks (client / server side).

#+BEGIN_SRC emacs-lisp
(ph/install-package 'web-mode)
#+END_SRC

Use =web-mode= for the following file-types.

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tag?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.json?\\'" . web-mode))
#+END_SRC

Some web-mode settings.

#+BEGIN_SRC emacs-lisp
(setq web-mode-markup-indent-offset 2
      web-mode-css-indent-offset 2
      web-mode-code-indent-offset 2
      web-mode-script-padding 2
      web-mode-style-padding 2
      web-mode-script-padding 2
      web-mode-block-padding 0
      web-mode-enable-current-element-highlight t
      web-mode-enable-current-column-highlight t)
#+END_SRC

Use company backends for =tern=, =html= and =css=.

#+BEGIN_SRC emacs-lisp
(defun ph/web-mode-hook ()
  "Hook for `web-mode'."
  (set (make-local-variable 'company-backends)
       '(company-tern company-web-html company-css company-files)))

(add-hook 'web-mode-hook 'ph/web-mode-hook)
#+END_SRC

Enable =tern= when the current language is JavaScript.

#+BEGIN_SRC emacs-lisp
(advice-add 'company-tern :before
            '(lambda (&rest _)
               (if (equal major-mode 'web-mode)
                   (let ((web-mode-cur-language
                          (web-mode-language-at-pos)))
                     (if (or (string= web-mode-cur-language "javascript")
                             (string= web-mode-cur-language "jsx"))
                         (unless tern-mode (tern-mode))
                       (if tern-mode (tern-mode -1)))))))
#+END_SRC

Use the right snippets in web-mode. Make sure =web-mode= has no parents.

#+BEGIN_SRC emacs-lisp
(defun ph/yas-set-web-mode (&rest args)
  (when (equal major-mode 'web-mode)
    (let ((web-mode-cur-language
           (web-mode-language-at-pos)))
       (if (or (string= web-mode-cur-language "javascript")
               (string= web-mode-cur-language "jsx"))
           (yas-activate-extra-mode 'js2-mode)
         (yas-deactivate-extra-mode 'js2-mode))
       (if (string= web-mode-cur-language "css")
           (yas-activate-extra-mode 'css-mode)
         (yas-deactivate-extra-mode 'css-mode))
       (if (string= web-mode-cur-language "html")
           (yas-activate-extra-mode 'html-mode)
         (yas-deactivate-extra-mode 'html-mode)))))

(advice-add 'yas-insert-snippet :before #'ph/yas-set-web-mode)
(advice-add 'ivy-yasnippet :before #'ph/yas-set-web-mode)
#+END_SRC

** Yaml

#+BEGIN_SRC emacs-lisp
(ph/install-package 'yaml-mode)
#+END_SRC

Use a line width of 100 in =yaml-mode=.

#+BEGIN_SRC emacs-lisp
(add-hook 'yaml-mode-hook
  (lambda () (set-fill-column 100)))
#+END_SRC

* Global Keybindings

Create an empty keymap and minor-mode for my global keybindings

#+BEGIN_SRC emacs-lisp
(defvar ph/global-keys-keymap (make-sparse-keymap))
(define-minor-mode ph/global-keys-mode
  :init-value t
  :keymap ph/global-keys-keymap)
(ph/global-keys-mode t)
#+END_SRC

Overwriting default bindings (and defining new ones).

#+BEGIN_SRC emacs-lisp
(general-def ph/global-keys-keymap
  "M-x"   'counsel-M-x
  "C-h f" 'counsel-describe-function
  "C-h v" 'counsel-describe-variable)

(general-def ph/global-keys-keymap
  :prefix "C-x"
  "2"   'ph/vsplit-last-buffer
  "3"   'ph/hsplit-last-buffer
  "7"   'ph/open-last-buffer
  "m"   'counsel-M-x
  "b"   'ivy-switch-buffer
  "C-b" 'ivy-switch-buffer
  "C-f" 'counsel-find-file)
#+END_SRC

User-defined bindings (=C-c= followed by a letter and =<F5>= through =<F9>=
without modifiers).

#+BEGIN_SRC emacs-lisp
(general-def ph/global-keys-keymap
  :prefix "C-c"
  "d"   'crux-kill-line-backwards
  "e"   'elfeed
  "f d" 'rg-dwim
  "f f" 'counsel-rg
  "f p" 'rg-project
  "f r" 'rg
  "h b" 'dumb-jump-back
  "h f" 'dumb-jump-go
  "h p" 'dumb-jump-go-prompt
  "i"   'indent-region
  "j"   'switch-to-next-buffer
  "k"   'switch-to-prev-buffer
  "o"   'occur-dwim
  "r"   'ph/mu4e
  "u"   'ivy-imenu-anywhere)

(general-def ph/global-keys-keymap
  "<f5>" 'ph/next-theme)
#+END_SRC

* User Interface
** Spaceline

#+BEGIN_SRC emacs-lisp
(ph/install-package 'spaceline)
#+END_SRC

*** Segments
**** Flycheck

Slightly simplified flycheck segments for =info=, =warning= and =error=.

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment ph/flycheck-warning-segment
  (if (flycheck-has-current-errors-p)
      (let ((c (cdr (assq 'warning (flycheck-count-errors
                                    flycheck-current-errors)))))
        (powerline-raw
         (if c (format "%s" c))))))

(spaceline-define-segment ph/flycheck-error-segment
  (if (flycheck-has-current-errors-p)
      (let ((c (cdr (assq 'error (flycheck-count-errors
                                    flycheck-current-errors)))))
        (powerline-raw
         (if c (format "%s" c))))))

(spaceline-define-segment ph/flycheck-info-segment
  (if (flycheck-has-current-errors-p)
      (let ((c (cdr (assq 'info (flycheck-count-errors
                                    flycheck-current-errors)))))
        (powerline-raw
         (if c (format "%s" c))))))
#+END_SRC

**** Evil

Setting the face according to =evil-state=.

#+BEGIN_SRC emacs-lisp
(defun ph/spaceline-highlight-face-evil-state ()
  "Set the highlight face depending on the evil state."
  (if (bound-and-true-p evil-local-mode)
      (let* ((face (assq evil-state spaceline-evil-state-faces)))
        (if face (cdr face) (spaceline-highlight-face-default)))
    (spaceline-highlight-face-default)))

(setq-default spaceline-highlight-face-func
              'ph/spaceline-highlight-face-evil-state)
#+END_SRC

**** Git Branch Name

#+BEGIN_SRC emacs-lisp
(defun ph/git-branch-name ()
  (replace-regexp-in-string "^ Git[:-]" "" vc-mode))

(spaceline-define-segment ph/version-control
  "Version control information."
  (when vc-mode
    (powerline-raw
     (s-trim (concat (ph/git-branch-name))))))
#+END_SRC

**** Tramp

Tramp offers the following file name syntax to refer to files on other machines.

#+BEGIN_SRC config
/method:host:filename
/method:user@host:filename
/method:user@host#port:filename
#+END_SRC

The following segemnts display the current buffer's =method= and =user@host=.

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment ph/remote-method
  (when (and default-directory
             (file-remote-p default-directory 'method))
    (file-remote-p default-directory 'method)))

(spaceline-define-segment ph/remote-user-and-host
  (when (and default-directory
             (or
              (file-remote-p default-directory 'user)
              (file-remote-p default-directory 'host)))
    (concat
     (file-remote-p default-directory 'user) "@"
     (file-remote-p default-directory 'host))))
#+END_SRC

**** File Permission

I want to see if the current file has "special" permissions. Special meaning
that the permissions change if the file is deleted and rewritten.

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment ph/special-file-permissions
  (if (and (buffer-file-name)
           (not (file-ownership-preserved-p (buffer-file-name))))
      (powerline-raw
       (concat (if (file-readable-p (buffer-file-name)) "r" "-")
               (if (file-writable-p (buffer-file-name)) "w" "-")
               (if (file-executable-p (buffer-file-name)) "x" "-")))))
#+END_SRC

**** Mu4e Context

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment ph/mu4e-context-segment
  (let ((context (mu4e-context-current)))
    (if (and context
             (string-prefix-p "mu4e" (symbol-name major-mode)))
        (mu4e-context-name context))))
#+END_SRC

*** Setup

Setting up the mode-line and order of segements. Compile the modeline with =M-x
spaceline-compile=.

#+BEGIN_SRC emacs-lisp
(require 'spaceline-config)
(spaceline-emacs-theme)
(spaceline-install
  'main
  '((evil-state :when active :face highlight-face)
    (buffer-id)
    (ph/mu4e-context-segment :face 'ph/spaceline-mu4e-context-face)
    (ph/special-file-permissions :face 'ph/spaceline-alert-face)
    (ph/remote-method :face 'ph/spaceline-warn-face)
    (ph/remote-user-and-host :face 'ph/spaceline-another-warn-face)
    (ph/virtualenvwrapper-segment)
    (buffer-modified)
    (process :when active))
  '((minor-modes)
    (anzu)
    (projectile-root)
    (ph/version-control :when active)
    (line-column)
    (buffer-position)
    (ph/flycheck-info-segment :face 'ph/spaceline-info-face)
    (ph/flycheck-warning-segment :face 'ph/spaceline-warn-face)
    (ph/flycheck-error-segment :face 'ph/spaceline-alert-face)
    (major-mode)))
#+END_SRC

*** Config

Set mode-line always active (don't hide any information when focus is on a
different window).

#+BEGIN_SRC emacs-lisp
(defun powerline-selected-window-active () t)
#+END_SRC

Before drawing the powerline, adjust =powerline-text-scale-factor=. The reason
behind this ist that my mode-line font in my graphical frames is a tiny bit
smaller than the default font in order to have more space for content. Setting
the scale-factor each time before drawing the powerline allows the parallel use
of graphical clients and terminal clients (which only have one font for
everything).

#+BEGIN_SRC emacs-lisp
(defun ph/set-powerline-text-scale-factor (face reserve)
  (if (display-graphic-p (selected-frame))
      (setq powerline-text-scale-factor 0.92)
    (setq powerline-text-scale-factor nil)))

(advice-add 'powerline-fill :before #'ph/set-powerline-text-scale-factor)
#+END_SRC

** Themes and Faces
*** Faces
**** Default

The font-size can be adjusted buffer-locally with =C-x C-+= and =C-x C--=.

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "DejaVu Sans Mono"
                    :weight 'normal
                    :height 105
                    :width 'normal)
#+END_SRC

**** Mode Line

A slightly smaller font for the mode-line.

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'mode-line nil
                    :inherit 'default
                    :height 0.8)
(set-face-attribute 'mode-line-inactive nil
                    :inherit 'mode-line)
#+END_SRC

Functions to change the mode-line faces.

#+BEGIN_SRC emacs-lisp
(defun ph/spaceline-light()
  (interactive)
  (set-face-attribute 'ph/spaceline-mu4e-context-face nil
                      :background "#afd7ff")
  (set-face-attribute 'mode-line nil
                      :height 100
                      :foreground "#3a3a3a"
                      :box '(:color "#e6e6e0")
                      :background "#fdfde7")
  (set-face-attribute 'mode-line-buffer-id nil
                      :inherit 'mode-line
                      :foreground "#3a3a3a"
                      :box '(:color "#e6e6e0")
                      :background "#fdfde7")
  (set-face-attribute 'powerline-active1 nil
                      :inherit 'mode-line
                      :foreground "#3a3a3a"
                      :box '(:color "#e6e6e0")
                      :background "#f3f3f3")
  (set-face-attribute 'powerline-active2 nil
                      :inherit 'mode-line
                      :foreground "#3a3a3a"
                      :box '(:color "#e6e6e0")
                      :background "#e6e6e6")
  (powerline-reset))

(defun ph/spaceline-dark()
  (interactive)
  (set-face-attribute 'ph/spaceline-mu4e-context-face nil
                      :foreground "#3a3a3a"
                      :background "#7ec0ee")
  (set-face-attribute 'mode-line nil
                      :height 100
                      :foreground "#c6c6c6"
                      :box '(:color "#252525")
                      :background "#252525")
  (set-face-attribute 'mode-line-buffer-id nil
                      :inherit 'mode-line
                      :foreground "#c6c6c6"
                      :box '(:color "#252525")
                      :background "#252525")
  (set-face-attribute 'powerline-active1 nil
                      :inherit 'mode-line
                      :foreground "#c6c6c6"
                      :box '(:color "#252525")
                      :background "#303030")
  (set-face-attribute 'powerline-active2 nil
                      :inherit 'mode-line
                      :foreground "#c6c6c6"
                      :box '(:color "#252525")
                      :background "#383838")
  (powerline-reset))
#+END_SRC

**** Attention-Faces

Faces to highlight things/spaceline-segments which need special attention.

#+BEGIN_SRC emacs-lisp
(defface ph/spaceline-alert-face
  '((t :inherit 'mode-line
       :foreground "black"
       :background "#ef2929"))
  "Alert Face"
  :group 'spaceline)

(defface ph/spaceline-warn-face
  '((t :inherit 'mode-line
       :foreground "black"
       :background "#ff5d17"))
  "Warn Face"
  :group 'spaceline)

(defface ph/spaceline-another-warn-face
  '((t :inherit 'mode-line
       :foreground "black"
       :background "#fce94f"))
  "Another Warn Face"
  :group 'spaceline)

(defface ph/spaceline-info-face
  '((t :inherit 'mode-line
       :foreground "black"
       :background "#a1db00"))
  "Info Face"
  :group 'spaceline)
#+END_SRC

**** Mu4e

Face for mu4e segemnt.

#+BEGIN_SRC emacs-lisp
(defface ph/spaceline-mu4e-context-face
  '((t :inherit 'mode-line
       :weight bold))
  "mu4e face"
  :group 'spaceline)
#+END_SRC

**** Evil States

Ajdust the colors for different evil-states.

#+BEGIN_SRC emacs-lisp
(defface ph/spaceline-evil-god-face
  '((t (:background "tomato"
        :inherit 'spaceline-evil-normal)))
  "Spaceline Evil God State"
  :group 'spaceline)
(add-to-list 'spaceline-evil-state-faces
             '(god . ph/spaceline-evil-god-face))

(defface ph/spaceline-evil-operator-face
  '((t (:background "cornflower blue"
        :inherit 'spaceline-evil-normal)))
  "Spaceline Evil Operator State"
  :group 'spaceline)
(add-to-list 'spaceline-evil-state-faces
             '(operator . ph/spaceline-evil-operator-face))
#+END_SRC

*** Themes
**** Rotation

#+BEGIN_SRC emacs-lisp
(ph/install-package 'moe-theme)
(ph/install-package 'dash)
(setq ph/theme-list '(moe-dark moe-light))

(defun ph/next-theme ()
  "Disable all enabled themes and then load next theme."
  (interactive)
  (mapcar 'disable-theme custom-enabled-themes)
  (load-theme (nth 0 ph/theme-list) t)
  (setq ph/theme-list (-rotate -1 ph/theme-list)))

(add-hook 'after-init-hook 'ph/next-theme)
#+END_SRC

**** Customizations

Customize the loaded themes.

#+BEGIN_SRC emacs-lisp
(advice-add 'load-theme :after
            (lambda (&rest args)
              (mapcar 'ph/customize-theme custom-enabled-themes)))

(defun ph/customize-theme (theme)
  "Customize the given THEME if necessary."
  (let ((theme-name (symbol-name theme)))
    (cond ((string= theme-name "moe-dark")
           (ph/spaceline-dark))
          ((string= theme-name "moe-light")
           (ph/spaceline-light)))))
#+END_SRC

** Diminish

Diminish implements hiding or abbreviation of the mode line displays (lighters)
of minor-modes.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'diminish)

(eval-after-load "god-mode"
  '(diminish 'god-local-mode))
(eval-after-load "rainbow-mode"
  '(diminish 'rainbow-mode))
(eval-after-load "projectile"
  '(diminish 'projectile-mode))
(eval-after-load "beacon"
  '(diminish 'beacon-mode))
(eval-after-load "auto-revert"
  '(diminish 'auto-revert-mode))
(eval-after-load "undo-tree"
  '(diminish 'undo-tree-mode))
(eval-after-load "which-key"
  '(diminish 'which-key-mode))
#+END_SRC

** Beacon

Whenever the window scrolls a light will shine on top of your cursor so you know
where it is.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'beacon)
(beacon-mode 1)
(setq beacon-color "orange")
#+END_SRC

** Fancy stuff

Disable fancy GUI stuff

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

** Frame Title

Show the buffer-name, projectile-project-name and major-mode in the frame title.
Use the same title for unfocussed/stacked frames.

#+BEGIN_SRC emacs-lisp
(setq ph/frame-title-format
      '(""
        "%b"
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format " | %s" project-name))))
        " | %m"))
(setq frame-title-format ph/frame-title-format)
(setq icon-title-format ph/frame-title-format)
#+END_SRC

** Tooltips

Don't use ugly GTK tooltips.

#+BEGIN_SRC emacs-lisp
(setq x-gtk-use-system-tooltips nil)
#+END_SRC

** Fringe

No fringe on the right side of the frame. The left side needs a fringe for
=FlyCheck= indicators.

#+BEGIN_SRC emacs-lisp
(fringe-mode '(8 . 0))
#+END_SRC
