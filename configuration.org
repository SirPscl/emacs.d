#+TITLE: Emacs Configuration
#+OPTIONS: toc:2

* Dependencies

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(
                         ("gnu" . "https://elpa.gnu.org/packages/")
                         ("leuven" . "http://melpa.milkbox.net/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
(package-initialize)

(defvar my-packages '(
                      ac-math
                      auctex
                      auto-complete
                      dictcc
                      dictionary
                      drag-stuff
                      elfeed
                      elfeed-org
                      elfeed-goodies
                      elpy
                      emojify
                      evil
                      evil-ediff
                      evil-god-state
                      evil-leader
                      evil-mu4e
                      evil-org
                      fill-column-indicator
                      fixme-mode
                      fsharp-mode
                      helm-projectile
                      js2-mode
                      leuven-theme
                      lua-mode
                      magit
                      markdown-mode
                      moe-theme
                      mu4e-alert
                      mu4e-maildirs-extension
                      neotree
                      openwith
                      org-bullets
                      projectile
                      rainbow-delimiters
                      ruby-electric
                      smex
                      tern
                      tern-auto-complete
                      web-beautify))

(dolist (p my-packages)
  (unless (package-installed-p p)
    (package-install p)))
#+END_SRC

* User Interface
** Menu, Toolbar and Splashscreen

No fancy stuff for me.

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(menu-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

** Line- and Columnnumbers

#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
(column-number-mode)
#+END_SRC

** Themes
   
Toggle dark and light theme.

#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/moe-theme/")
(add-to-list 'load-path "~/.emacs.d/themes/moe-theme/")
(require 'moe-theme)

(defun toggle-dark-light-theme ()
  (interactive)
  (let ((is-light (cl-find 'leuven custom-enabled-themes)))
    (dolist (theme custom-enabled-themes)
      (disable-theme theme))
    (load-theme (if is-light 'moe-dark  'leuven))))
(load-theme 'moe-dark t)
#+END_SRC 

** Matching Brackets

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(setq show-paren-style 'mixed)
(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp
(setq default-frame-alist
      '((font . "DejaVu Sans Mono-12")))
#+END_SRC

** Emojify

#+BEGIN_SRC emacs-lisp
;(global-emojify-mode)
#+END_SRC

* Basic Configuration
** Symlinks

Always Follow Symlinks, no questions asked.

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks nil)
#+END_SRC

** Clipboard

Copy to clipboard.

#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard 't)
#+END_SRC

** Backup files

Store backup files in ~/.emacs.backup

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("" . "~/.emacs.backup")))
#+END_SRC

** Password Cache
   
Don't ant it.

#+BEGIN_SRC emacs-lisp
(setq password-cache nil)
(setq password-cache-expiry 0) ; in seconds
#+END_SRC

* Basic Helpers
** Sudo-mode

Save file with root.

#+BEGIN_SRC emacs-lisp
(defun sudo-save ()
  (interactive)
  (cond
   ((not buffer-file-name)
    (write-file (concat "/sudo:root@localhost:"
                        (ido-read-file-name "File:"))))
   ((and (not (file-writable-p buffer-file-name))
         (not (string-prefix-p "/sudo:root@localhost"
                               buffer-file-name)))
    (write-file (concat "/sudo:root@localhost:"
                        buffer-file-name)))
   (message "cant save with sudo-save, sorry")))
#+END_SRC

Sudo mode definition

#+BEGIN_SRC emacs-lisp
(defvar sudo-keybindings
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "C-x C-s")     'sudo-save)
    map)
  "sudo-keybindings")

(define-minor-mode sudo-mode
  "sudo-mode"
  :init-value nil
  :lighter " sudo-mode"
  :keymap sudo-keybindings
  (face-remap-add-relative 
   'mode-line '((:foreground "black" :background "OrangeRed2")
                mode-line)))
#+END_SRC

Activate sudo-mode if file to be opened is not writable. Also ask me if I want to open the file as root.

#+BEGIN_SRC emacs-lisp
(add-hook 'find-file-hook 'find-file-sudo)
(defun find-file-sudo ()
  (if (not (file-writable-p buffer-file-name))
      (progn 
        (if (y-or-n-p "open as root?")
            (find-alternate-file (concat "/sudo:root@localhost:"
                                         buffer-file-name)))
        (sudo-mode 1))))
#+END_SRC

** Evil

I am evil.

#+BEGIN_SRC emacs-lisp
(require 'evil-org)
(require 'evil-ediff)
(require 'evil)
(evil-mode 1)
#+END_SRC

Evil commands

#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "ww" 'sudo-save)
#+END_SRC

** Smex

A better M-x.

#+BEGIN_SRC emacs-lisp
(require 'smex)
(smex-initialize)
#+END_SRC

** Fixme-mode

Highlight `FIXME`, `BUG` and `TODO`.
    
#+BEGIN_SRC emacs-lisp
(fixme-mode t)
#+END_SRC
    
** Spell Checking
   
#+BEGIN_SRC emacs-lisp
(require 'ispell)
(setq ispell-program-name "hunspell")
(setq ispell-local-dictionary "en_GB")

(defun flyspell-check-next-highlighted-word ()
  "Custom function to spell check next highlighted word"
  (interactive)
  (flyspell-goto-next-error)
  (ispell-word))
#+END_SRC

** Org Mode

Nice bullets.

#+BEGIN_SRC emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

My org directory.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/org"))
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
(projectile-global-mode)
(setq projectile-completion-system 'grizzl) ;; to compare with default (ido)
(setq projectile-enable-caching t)
(setq projectile-require-project-root nil) ;; use projectile everywhere
#+END_SRC

** Ido

#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode 1)
(ido-everywhere 1)
(setq ido-enable-flex-matching t)
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
(setq helm-buffers-fuzzy-matching 1)
(helm-projectile-on)
#+END_SRC

** Markdown Mode

#+BEGIN_SRC emacs-lisp
(require 'markdown-mode)
(setq markdown-command "pandoc")
#+END_SRC

* Programs
** Feeds
  
Set up elfeed.
  
#+BEGIN_SRC emacs-lisp
(require 'elfeed)
(require 'elfeed-goodies)
(require 'elfeed-org)
(elfeed-goodies/setup)
(elfeed-org)
(setq rmh-elfeed-org-files (list "~/git/config/emacs/elfeed.org"))
#+END_SRC

** Mail
*** Setup

Load it.

#+BEGIN_SRC emacs-lisp
(require 'mu4e)
(require 'mu4e-maildirs-extension)
(require 'mu4e-contrib)
(require 'evil-mu4e)
(require 'smtpmail)
#+END_SRC

Dont reply to myself.

#+BEGIN_SRC emacs-lisp
(setq mu4e-compose-dont-reply-to-self t)
#+END_SRC

My contexts.

#+BEGIN_SRC emacs-lisp
(setq mu4e-contexts nil)
(load-file "~/git/config/emacs/private.el")
(setq mu4e-context-policy 'pick-first)
(setq mu4e-compose-context-policy 'ask-if-none)
#+END_SRC

Sending messages.

#+BEGIN_SRC emacs-lisp
(setq message-send-mail-function 'smtpmail-send-it)
(setq starttls-use-gnutls t)
(setq smtpmail-debug-info t)
#+END_SRC

Activate Alert

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
#+END_SRC

Show me the addresses, not only names.

#+BEGIN_SRC emacs-lisp
(setq mu4e-view-show-addresses t)
#+END_SRC

Show text, not html.

#+BEGIN_SRC emacs-lisp
(setq mu4e-html2text-command 'mu4e-shr2text)
#+END_SRC

No automatic line breaks.

#+BEGIN_SRC emacs-lisp
(defun no-auto-fill ()
  "Turn off auto-fill-mode."
  (auto-fill-mode -1))
(add-hook 'mu4e-compose-mode-hook #'no-auto-fill)
#+END_SRC

View mail in browser (with "aV").

#+BEGIN_SRC emacs-lisp
(add-to-list 'mu4e-view-actions
             '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#+END_SRC

Skip duplicates

#+BEGIN_SRC emacs-lisp
(setq mu4e-headers-skip-duplicates t)
#+END_SRC

Some self explanatory settings.

#+BEGIN_SRC emacs-lisp
(setq mu4e-maildir "~/.mail")
(setq mu4e-get-mail-command "offlineimap -o")
(setq message-kill-buffer-on-exit t)
#+END_SRC

*** Forgotten Attachment

Check for forgotten attachments (TODO: Refactor)

#+BEGIN_SRC emacs-lisp
(add-hook 'message-send-hook 'check-forgotten-attachment)
(setq suspicious-regex-list '("^.*attach.*$"
                              "^.*angeh√§ng.*$"
                              "^.*angehaeng.*$"
                              "^.*anhang.*$"))
(setq attachment-regex-list '("^.*<#part.*$"))

(defun check-forgotten-attachment ()
  "Returns t if the mail doesn't containany suspicious"
  "words or if the user approved, else nil"
  (interactive)
  (let ((line-list (read-lines (buffer-file-name))))
    (if (> (regex-test line-list suspicious-regex-list) 0)
        (unless (or (> (regex-test line-list attachment-regex-list) 0)
                    (yes-or-no-p "Did you add all your attachments?"))
          (error "add the damn attachment(s)")))))

(defun regex-test (file-lines regex-list)
  "Returns the number of regex-matches in a list of strings"
  (interactive)
  (let ((matches 0))
    (dolist (line file-lines)
        (unless (string= ">" (substring line 0 1)) ; no check if line starts with ">"
            (dolist (regex regex-list)
                (if (string-match regex line)
                    (incf matches)))))
    (+ matches 0))) ; bump, there must be a better way to make sure the right value is returned

(defun read-lines (filePath)
  "Return a list of lines of a file at filePath."
  (with-temp-buffer
    (insert-file-contents filePath)
    (split-string (buffer-string) "\n" t)))
#+END_SRC

* Programming
** Autocomplete

#+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(ac-config-default)
#+END_SRC

** 80 columns indicator.

#+BEGIN_SRC emacs-lisp
(require 'fill-column-indicator)
(setq fci-rule-width 1)
(setq fci-rule-color "red")
#+END_SRC

** Web-beautify

#+BEGIN_SRC emacs-lisp
#+END_SRC

Keybinding to beautify manually.

#+BEGIN_SRC emacs-lisp
(require 'web-beautify) ;; Not necessary if using ELPA package
(eval-after-load 'js2-mode
  '(define-key js2-mode-map (kbd "C-c b") 'web-beautify-js))
;; Or if you're using 'js-mode' (a.k.a 'javascript-mode')
(eval-after-load 'js
  '(define-key js-mode-map (kbd "C-c b") 'web-beautify-js))

(eval-after-load 'json-mode
  '(define-key json-mode-map (kbd "C-c b") 'web-beautify-js))

(eval-after-load 'sgml-mode
  '(define-key html-mode-map (kbd "C-c b") 'web-beautify-html))

(eval-after-load 'web-mode
  '(define-key web-mode-map (kbd "C-c b") 'web-beautify-html))

(eval-after-load 'css-mode
  '(define-key css-mode-map (kbd "C-c b") 'web-beautify-css))
#+END_SRC

Beautify before saving.

#+BEGIN_SRC emacs-lisp
(eval-after-load 'js2-mode
  '(add-hook 'js2-mode-hook
             (lambda ()
               (add-hook 'before-save-hook 'web-beautify-js-buffer t t))))

;; Or if you're using 'js-mode' (a.k.a 'javascript-mode')
(eval-after-load 'js
  '(add-hook 'js-mode-hook
             (lambda ()
               (add-hook 'before-save-hook 'web-beautify-js-buffer t t))))

(eval-after-load 'json-mode
  '(add-hook 'json-mode-hook
             (lambda ()
               (add-hook 'before-save-hook 'web-beautify-js-buffer t t))))

(eval-after-load 'sgml-mode
  '(add-hook 'html-mode-hook
             (lambda ()
               (add-hook 'before-save-hook 'web-beautify-html-buffer t t))))

(eval-after-load 'web-mode
  '(add-hook 'web-mode-hook
             (lambda ()
               (add-hook 'before-save-hook 'web-beautify-html-buffer t t))))

(eval-after-load 'css-mode
  '(add-hook 'css-mode-hook
             (lambda ()
               (add-hook 'before-save-hook 'web-beautify-css-buffer t t))))
#+END_SRC

** Latex

To make evince go to the updated page when using auctex to compile.

#+BEGIN_SRC emacs-lisp
(setq TeX-view-program-list '(("Evince" "evince --page-index=%(outpage) %o")))
(setq TeX-view-program-selection '((output-pdf "Evince")))
#+END_SRC

Use evince and firefox

#+BEGIN_SRC emacs-lisp
(setq TeX-output-view-style
      (quote
       (("^pdf$" "." "evince -f %o")
        ("^html?$" "." "firefox %o"))))
#+END_SRC

I put a `make.sh` in the root of latex documents along with the main tex file `main.tex` and of course the `.gitignore`.

#+BEGIN_SRC emacs-lisp
(defun my-latex-compile-quick ()
  "runs make.sh -q -s (..) in the latex root"
  (interactive)
  (let* ((main-folder (get-latex-main-folder
                       (file-name-directory buffer-file-name)))
         (command (concat "sh " main-folder "make.sh " "-q "
                          "-s " (number-to-string
                                 (line-number-at-pos)) ":"
                          (buffer-file-name))))
    (start-process "my-latex" "latex-make"
                   (concat main-folder "make.sh") "-q"
                   "-s" (concat (number-to-string
                                 (line-number-at-pos)) ":"
                                 (buffer-file-name)))))

(defun my-latex-compile-full ()
  "runs make.sh -f -s (..) in the latex root"
  (interactive)
  (let* ((main-folder (get-latex-main-folder
                       (file-name-directory buffer-file-name)))
         (command (concat "sh " main-folder "make.sh " "-f "
                          "-s " (number-to-string
                                 (line-number-at-pos)) ":"
                          (buffer-file-name))))
    (start-process "my-latex" "latex-make"
                   (concat main-folder "make.sh") "-f"
                   "-s" (concat (number-to-string
                                 (line-number-at-pos)) ":"
                                 (buffer-file-name)))))

(defun update-evince ()
  "updates evince"
  (interactive)
  (let* ((main-folder (get-latex-main-folder
                       (file-name-directory buffer-file-name)))
         (command (concat "sh " main-folder "make.sh " "-f "
                          "-s " (number-to-string
                                 (line-number-at-pos)) ":"
                          (buffer-file-name))))
    (start-process "my-latex" "latex-make"
                   (concat main-folder "make.sh") "-f"
                   "-s" (concat (number-to-string
                                 (line-number-at-pos)) ":"
                                 (buffer-file-name)))))

(defun my-latex-clean ()
  "runs make.sh -c in the latex root"
  (interactive)
  (let ((main-folder (get-latex-main-folder
                      (file-name-directory buffer-file-name))))
    (shell-command-to-string (concat "sh " main-folder
                                     "make.sh clean"))))

(defun get-latex-main-folder (path)
  "recursively gets the root folder of the latex project"
  (interactive)
  (if (not (string= path "/"))
      (if (is-latex-root path)
          path
        (get-latex-main-folder (folder-up path)))))

(defun folder-up (path)
  "removes last folder of path"
  (file-name-directory (directory-file-name path)))

(defun is-latex-root (path)
  "returns t if the path is the root folder of the latex project"
  (interactive)
  (and (file-exists-p (concat path ".gitignore"))
       (file-exists-p (concat path "main.tex"))
       (file-exists-p (concat path "make.sh"))))
#+END_SRC

** Matching Brackets

#+BEGIN_SRC emacs-lisp
;; (show-paren-mode 1)
;; (setq show-paren-style 'mixed)
;; (require 'rainbow-delimiters)
;; (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

** Python

Use jupyter/ipython if present

#+BEGIN_SRC emacs-lisp
;;(when (executable-find "ipython3")
;;  (setq python-shell-interpreter "ipython3")
;;  (setq python-shell-interpreter-args "--simple-prompt --pprint"))
#+END_SRC

Auto complete with jedi
#+BEGIN_SRC emacs-lisp
;;(add-hook 'python-mode-hook 'jedi:setup)
;;(setq jedi:complete-on-dot t)
#+END_SRC
** Indents


#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)
(setq js-indent-level 2)
(setq python-indent 2)
(setq css-indent-offset 2)
(add-hook 'sh-mode-hook
          (lambda ()
            (setq sh-basic-offset 2
                  sh-indentation 2)))

(setq web-mode-markup-indent-offset 2)
#+END_SRC

Use 2 spaces instead of a tab.

** Whitespaces

To see whitespaces and indentation

#+BEGIN_SRC emacs-lisp
(require 'whitespace)
#+END_SRC

* Keybindings

Evil Normal State

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
(define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
#+END_SRC

Evil Insert State

#+BEGIN_SRC emacs-lisp
;(define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
#+END_SRC

Escape == C-g

#+BEGIN_SRC emacs-lisp
(defun my-esc (prompt)
  "Functionality for escaping generally"
  (cond
   ((or (evil-insert-state-p)
        (evil-normal-state-p)
        (evil-replace-state-p)
        (evil-visual-state-p))
    [escape])
   (t (kbd "C-g"))))
(define-key key-translation-map (kbd "C-g") 'my-esc)
(define-key evil-operator-state-map (kbd "C-g") 'keyboard-quit)
(set-quit-char "C-g")
#+END_SRC

mu4e

#+BEGIN_SRC emacs-lisp
(define-key mu4e-main-mode-map (kbd "U") 'mu4e-update-index)
(add-hook 'mu4e-view-mode-hook
  (lambda()
    (local-set-key (kbd "<tab>") 'shr-next-link)
    (local-set-key (kbd "i") 'mu4e-view-toggle-html)
    (local-set-key (kbd "h") 'evil-backward-char)
    (local-set-key (kbd "<backtab>") 'shr-previous-link)))
#+END_SRC

Evil Motion (binds normal, visual, and operator states all at once)

#+BEGIN_SRC emacs-lisp
(evil-global-set-key 'motion "," 'evil-execute-in-god-state)
(evil-global-set-key 'motion [escape] 'evil-god-state-bail)
#+END_SRC

Global

#+BEGIN_SRC emacs-lisp
;(define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

Global minor mode

#+BEGIN_SRC emacs-lisp
(defvar my-global-keymap
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "M-x")      'smex)
    (define-key map (kbd "C-j")      'drag-stuff-down)
    (define-key map (kbd "C-k")      'drag-stuff-up)
    (define-key map (kbd "C-x C-m")  'magit-status)
    (define-key map (kbd "C-x C-b")  'helm-mini)
    (define-key map (kbd "C-c C--")  'comment-region)
    (define-key map (kbd "C-c C-a")  'org-agenda)
    (define-key map (kbd "C-c C-d")  'fci-mode)
    (define-key map (kbd "C-c C-i")  'indent-region)
    (define-key map (kbd "C-c C-m")  'mu4e)
    (define-key map (kbd "C-c C-n")  'elfeed)
    (define-key map (kbd "C-c C-√∂")  'uncomment-region)
    (define-key map (kbd "C-c C-p")  'helm-projectile-find-file)
    (define-key map (kbd "C-c C-w")  'toggle-truncate-lines)
    (define-key map (kbd "<f2>")     'spell-checker-change-language)
    (define-key map (kbd "<f5>")     'toggle-dark-light-theme)
    (define-key map (kbd "<f8>")     'ispell-word)
    (define-key map (kbd "<f9>")     'ispell)
    map)
  "my-keys-minor-mode keymap.")

(define-minor-mode my-global-keys-mode
  :init-value t
  :keymap my-global-keymap
  :lighter " my-keys")

(my-global-keys-mode 1)
#+END_SRC
