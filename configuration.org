#+TITLE: Emacs Configuration

This is my Emacs configuration. There are many like it, but this one is mine.

* Content :TOC_3_gh:
- [[#inspiration][Inspiration]]
- [[#os-setup][OS Setup]]
  - [[#setup][Setup]]
  - [[#mu4e][Mu4e]]
  - [[#markdown][Markdown]]
  - [[#web-development][Web Development]]
  - [[#python-development][Python Development]]
  - [[#ruby][Ruby]]
- [[#packages][Packages]]
  - [[#installation][Installation]]
  - [[#packages-for-configuration][Packages for Configuration]]
  - [[#auto-update-packages][Auto Update Packages]]
- [[#tweaking-defaults][Tweaking Defaults]]
  - [[#disabled-commands][Disabled Commands]]
  - [[#symlinks][Symlinks]]
  - [[#final-newline][Final Newline]]
  - [[#backup][Backup]]
  - [[#auto-save][Auto-Save]]
  - [[#keystrokes][Keystrokes]]
  - [[#scroll][Scroll]]
  - [[#auto-revert][Auto revert]]
  - [[#garbage-collection][Garbage Collection]]
  - [[#browser][Browser]]
  - [[#line-filling][Line Filling]]
  - [[#whitespace-cleanup][Whitespace Cleanup]]
  - [[#buffers-and-frames][Buffers and Frames]]
  - [[#kill-buffers][Kill Buffers]]
  - [[#sudo-save][Sudo Save]]
  - [[#session][Session]]
  - [[#browse-kill-ring][Browse-Kill-Ring]]
  - [[#occur][Occur]]
  - [[#ag][Ag]]
  - [[#dired][Dired]]
  - [[#evil][Evil]]
    - [[#surround][Surround]]
    - [[#god-state][God State]]
    - [[#keybindings][Keybindings]]
  - [[#projectile][Projectile]]
  - [[#project-terminals][Project Terminals]]
  - [[#ido][Ido]]
  - [[#counsel][Counsel]]
  - [[#dictionary][Dictionary]]
  - [[#pdf][PDF]]
- [[#programming-and-markup][Programming and Markup]]
  - [[#autocomplete][Autocomplete]]
    - [[#settings][Settings]]
    - [[#backends][Backends]]
  - [[#brackets][Brackets]]
  - [[#display-line-numbers][Display Line Numbers]]
  - [[#flycheck][Flycheck]]
  - [[#git][Git]]
  - [[#haml][Haml]]
  - [[#indentation][Indentation]]
  - [[#javascript][JavaScript]]
    - [[#tern][Tern]]
    - [[#eslint][Eslint]]
  - [[#lua][Lua]]
  - [[#markdown-1][Markdown]]
  - [[#org][Org]]
  - [[#php][PHP]]
  - [[#python][Python]]
  - [[#r][R]]
  - [[#rainbow][Rainbow]]
  - [[#ruby-1][Ruby]]
    - [[#inf-ruby][Inf-ruby]]
    - [[#ruby-mode][Ruby Mode]]
    - [[#robe][Robe]]
    - [[#rspec-mode][Rspec-mode]]
  - [[#tex][TeX]]
  - [[#web-mode][Web mode]]
  - [[#yaml][Yaml]]
- [[#news-feeds][News Feeds]]
- [[#mail][Mail]]
  - [[#setup-1][Setup]]
  - [[#contexts][Contexts]]
  - [[#forgotten-attachment][Forgotten Attachment]]
- [[#global-keybindings][Global Keybindings]]
- [[#user-interface][User Interface]]
  - [[#tooltips][Tooltips]]
  - [[#default-face][Default Face]]
  - [[#theme-rotation][Theme Rotation]]
  - [[#spaceline][Spaceline]]
    - [[#faces][Faces]]
    - [[#segments][Segments]]
    - [[#diminish][Diminish]]
    - [[#setup-2][Setup]]
    - [[#config][Config]]
  - [[#beacon][Beacon]]
  - [[#fancy-stuff][Fancy stuff]]
  - [[#frame-title][Frame Title]]
  - [[#fringe][Fringe]]

* Inspiration

- [[https://github.com/munen/emacs.d][Alain's configuration]]
- [[https://github.com/emacs-tw/awesome-emacs][Awesome-Emacs: A list of awesome Emacs packages]]
- [[https://github.com/bradwright/emacs.d][Bradley Wrights configuration]]
- [[https://github.com/caisah/emacs.dz][Emacs.dz: A collection of Emacs configurations]]

* OS Setup
** Setup

Clone, create symlink and update submodules.

#+BEGIN_SRC shell
$ cd ~/git
$ git clone http://github.com/sirpscl/emacs.d
$ ln -s ~/git/emacs.d ~/.emacs.d
$ cd ~/git/emacs.d
$ git submodule update --init
#+END_SRC

** Mu4e

Install and configure [[https://github.com/djcb/mu][mu]] and [[https://github.com/OfflineIMAP/offlineimap][offlineimap]] and make sure mu has indexed
everything.

#+BEGIN_SRC shell
$ mu index --maildir=~/.mail
#+END_SRC

** Markdown

[[https://github.com/jgm/pandoc][Pandoc]] is a swiss-army knife for converting documents.

#+BEGIN_SRC shell
$ pacaur -S pandoc
#+END_SRC

** Web Development

Install =npm= dependencies for linting and auto-completion.

#+BEGIN_SRC shell
$ npm install -g eslint babel-eslint eslint-plugin-react tern
#+END_SRC

** Python Development

Install Python dependencies and packages to manage virtual environments.

#+BEGIN_SRC shell
$ sudo pacman -S python-pip python-virtualenv python2-virtualenv
$ pip install --user jedi flake8 autopep8 yapf
$ mkdir $WORKON_HOME
#+END_SRC

** Ruby

Install dependencies for =robe=. Note that if the project has a =Gemfile=, these
dependencies have to be installed with it.

#+BEGIN_SRC shell
$ gem install pry pry-doc method_source
#+END_SRC

* Packages
** Installation

Use the =gnu=, =melpa= and =marmelade= archives.

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

A function to install and load packages on demand.

#+BEGIN_SRC emacs-lisp
(defun ph/install-package (package &optional norequire)
  "Installs PACKAGE and requires it unless NOREQUIRE is set to non-nil."
  (unless (package-installed-p package)
    (progn
      (package-refresh-contents)
      (package-install package)))
  (unless norequire (require package)))
#+END_SRC

Also load packages which are not in an archive but in this repository.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/vendor/")
#+END_SRC

** Packages for Configuration

=general.el= provides a more convenient method for binding keys in emacs (for
both evil and non-evil users).

#+BEGIN_SRC emacs-lisp
(ph/install-package 'general)
 #+END_SRC

** Auto Update Packages

Update packages at startup.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'auto-package-update)
(auto-package-update-maybe)
#+END_SRC

* Tweaking Defaults

This section contains customizations and extensions of Emacs' default
functionality.

** Disabled Commands

Enable all disabled commands.

#+BEGIN_SRC emacs-lisp
(setq disabled-command-function nil)
#+END_SRC

** Symlinks

Always Follow Symlinks, no questions asked.

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks nil)
#+END_SRC

** Final Newline

Automatically add a newline at the end of a file.

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

** Backup

No backups, commit frequently!

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

** Auto-Save

Store auto-saves in =/tmp=

#+BEGIN_SRC emacs-lisp
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

** Keystrokes

Show my keystrokes almost immediately in the echo-area.

#+BEGIN_SRC emacs-lisp
(setq echo-keystrokes 0.1)
#+END_SRC

** Scroll

When scrolling, keep the cursor at the same position.

#+BEGIN_SRC emacs-lisp
(setq scroll-preserve-screen-position 'keep)
#+END_SRC

** Auto revert

When something changes a file, automatically refresh the buffer containing that
file so they can't get out of sync.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

** Garbage Collection

Collect garbage after 20MB. Some packages which cache a lot (e.g. =flx-ido=)
will profit.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 20 1000 1000))
#+END_SRC

** Browser

Use Firefox to browse urls.

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-firefox
      browse-url-new-window-flag  t
      browse-url-firefox-new-window-is-tab nil)
#+END_SRC

** Line Filling

Use a line width of 80 columns.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC

To reorganize a paragraph to fit the 80 columns, use =M-q= (=fill-paragraph=)
and/or enable =auto-fill-mode=.

Don't do double-spaces between sentences.

#+BEGIN_SRC emacs-lisp
(setq-default sentence-end-double-space nil)
#+END_SRC

** Whitespace Cleanup

Delete trailing whitespaces when saving.

#+BEGIN_SRC emacs-lisp
(add-hook 'write-file-hooks 'delete-trailing-whitespace)
#+END_SRC

** Buffers and Frames

Split functions wich open the previous buffer in the new window instead of
showing the current buffer twice. [[http://www.alandmoore.com/blog/2013/05/01/better-window-splitting-in-emacs/][stolen from here]]

#+BEGIN_SRC emacs-lisp
(defun ph/vsplit-last-buffer ()
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer))

(defun ph/hsplit-last-buffer ()
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer))
#+END_SRC

A function to open the previous buffer in a new frame.

#+BEGIN_SRC emacs-lisp
(defun ph/open-last-buffer ()
  (interactive)
  (switch-to-buffer-other-frame (other-buffer)))
#+END_SRC

** Kill Buffers

A function to kill all buffers except the current one and other important buffers.

#+BEGIN_SRC emacs-lisp
(setq ph/buffer-dont-kill-regexp
      (concat "\\("
              "project-terminals"
              "\\|\\*Messages\\*"
              "\\)"))

(defun ph/kill-other-buffers ()
  "Kill all other buffers unless the buffer-name matches
  `ph/buffer-kill-regexp`."
  (interactive)
  (mapc #'(lambda (buffer)
            (unless (string-match ph/buffer-dont-kill-regexp (buffer-name buffer))
              (kill-buffer buffer)))
        (delq (current-buffer) (buffer-list))))
              #+END_SRC

** Sudo Save

Save file with sudo.

# TODO: Make this compatible with all sudo-filenames like /su:root@localhost,
# /sudo:: etc.

   #+BEGIN_SRC emacs-lisp
(defun ph/sudo-file-name (filename)
  "prepends '/sudo:root@localhost:' if not already present"
  (if (not (string-prefix-p "/sudo:root@localhost:" filename))
      (concat "/sudo:root@localhost:" filename)
    filename))

(defun ph/sudo-save ()
  "save file with sudo"
  (interactive)
  (if (not buffer-file-name)
      (write-file (ph/sudo-file-name (ido-read-file-name "File:")))
    (write-file (ph/sudo-file-name buffer-file-name))))
   #+END_SRC

** Session

Restore some stuff (command histories, kill-ring, ...) from last session.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'session)
(add-hook 'after-init-hook 'session-initialize)
#+END_SRC

** Browse-Kill-Ring

#+BEGIN_SRC emacs-lisp
(ph/install-package 'browse-kill-ring)

(setq browse-kill-ring-highlight-inserted-item t
      browse-kill-ring-highlight-current-entry nil
      browse-kill-ring-show-preview t)

(general-def browse-kill-ring-mode-map
  "k" 'browse-kill-ring-previous
  "j" 'browse-kill-ring-forward)
#+END_SRC

** Occur

[[http://emacswiki.org/emacs/OccurMode][occur-mode]] is a search minor-mode that shows a buffer with all matching results
in a popup buffer. Use the occur-dwim (do what I mean) function from [[https://oremacs.com/2015/01/26/occur-dwim/][(or emacs
irrelevant)]]

#+BEGIN_SRC emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (let ((sym (thing-at-point 'symbol)))
            (when (stringp sym)
              (regexp-quote sym))))
        regexp-history)
  (call-interactively 'occur))
#+END_SRC

** Ag

=ag= allows you to search using ag from inside Emacs. You can filter by file
type, edit results inline, or find files.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'ag)
#+END_SRC

** Dired

Usage:
 - =a= to open a file or directory in the current buffer
 - =RET= to open a file or directory in a new buffer
 - =o= to open a file or directory in a vertical split buffer
 - =C-o= to open a file or directory in a vertical split buffer but keep the
   focus in the current buffer.
 - =C-c C-o= to open a file or directory in a new frame.

Reuse buffer

#+BEGIN_SRC emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

Show all files, in long listing format and human readable units.

#+BEGIN_SRC emacs-lisp
(setq-default dired-listing-switches "-alh")
#+END_SRC

Open in new frame

#+BEGIN_SRC emacs-lisp
(defun ph/dired-find-file-other-frame ()
  "In Dired, visit this file or directory in another window."
  (interactive)
  (find-file-other-frame (dired-get-file-for-visit)))

(eval-after-load "dired"
  '(define-key dired-mode-map (kbd "C-c C-o") 'ph/dired-find-file-other-frame))
#+END_SRC

** Evil

=evil= is an extensible vi layer for Emacs. It emulates the main features of Vim,
and provides facilities for writing custom extensions.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'evil)
(ph/install-package 'evil-org)
(ph/install-package 'evil-ediff)

(evil-mode 1)
#+END_SRC

Call =ph/sudo-save= with =:ww=.

#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "ww" 'ph/sudo-save)
#+END_SRC

Set initial state by major mode.

#+BEGIN_SRC emacs-lisp
(dolist (mode-map '((ag-mode . emacs)
                    (elfeed-show-mode . emacs)
                    (elfeed-search-mode . emacs)
                    (eshell-mode . emacs)
                    (flycheck-error-list-mode . emacs)
                    (git-commit-mode . insert)
                    (git-rebase-mode . emacs)
                    (help-mode . emacs)
                    (inferior-ess-mode . emacs)
                    (inf-ruby-mode . emacs)
                    (pdf-occur-buffer-mode . emacs)
                    (rspec-compilation-mode . emacs)
                    (shell-mode . emacs)
                    (term-mode . emacs)))
  (evil-set-initial-state `,(car mode-map) `,(cdr mode-map)))
#+END_SRC

*** Surround

- Add surrounding ~​'​~ with ~S'​~ from visual-state (use =viw= to mark current
  word)
- Change surrounding ~​'​~ to ~*~ with ~cs'*~
- Remove surrounding ~*~ with ~ds*~

#+BEGIN_SRC emacs-lisp
(ph/install-package 'evil-surround)
(global-evil-surround-mode 1)
#+END_SRC

*** God State

=god-mode= is a global minor mode for entering Emacs commands without modifier
keys. It's similar to Vim's separation of commands and insertion mode.
=evil-god-state= is =god-mode= for =evil-mode=.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'evil-god-state)
#+END_SRC

Make =evil-god-state= work also in visual-mode. [[https://github.com/gridaphobe/evil-god-state/issues/4#issuecomment-67760001][stolen from here]]

#+BEGIN_SRC emacs-lisp
(defun ph/evil-visual-activate-hook (&optional command)
  "Enable Visual state if the region is activated."
  (unless (evil-visual-state-p)
    (evil-delay nil
        '(unless (or (evil-visual-state-p)
                     (evil-insert-state-p)
                     (evil-emacs-state-p)
                     (evil-god-state-p))
           (when (and (region-active-p)
                      (not deactivate-mark))
             (evil-visual-state)))
      'post-command-hook nil t
      "evil-activate-visual-state")))
(ph/evil-visual-activate-hook)
#+END_SRC

*** Keybindings

Exit and enter =god-mode=.

#+BEGIN_SRC emacs-lisp
(general-def 'god
  [escape] 'evil-god-state-bail
  "C-g"    'evil-god-state-bail)

(general-def 'motion
  ","      'evil-execute-in-god-state)
#+END_SRC

Evil motion-states are the evil states where we don't edit text.

#+BEGIN_SRC emacs-lisp
(general-def 'motion
  "j"      'evil-next-visual-line
  "k"      'evil-previous-visual-line)
#+END_SRC

Free =M-.= and =M-,​= since they are popular kebinings for "jump to definition"
and "back".

#+BEGIN_SRC emacs-lisp
(general-def 'normal
  "M-." nil
  "M-," nil)
#+END_SRC

** Projectile

=projectile= is a project interaction library for Emacs. Its goal is to provide a
nice set of features operating on a project level without introducing external
dependencies (when feasible).

#+BEGIN_SRC emacs-lisp
(ph/install-package 'projectile)
(projectile-mode +1)
(general-def projectile-mode-map
  "C-c p" 'projectile-command-map)
#+END_SRC

** Project Terminals

Spawn terminal-emulators in project folder.

Note: Urxvt's =-name= option which sets the =WM_CLASS= attribute does not seem
to work with i3. Thus, =-title= is used to place the terminals on the correct
workspace.

#+BEGIN_SRC emacs-lisp
(defun ph/project-terminal-command-list-urxvt (directory workspace-number)
  "Command list to start an urxvt client in DIRECTORY on WORKSPACE-NUMBER."
  (list "/usr/bin/urxvtc"
        "-cd" directory
        "-title" (concat "project-terminal-"
                         (number-to-string (mod workspace-number 10)))))

(defun ph/project-terminal-command-list-termite (directory workspace-number)
  "Command list to start termite in DIRECTORY on WORKSPACE-NUMBER."
  (list "/bin/termite"
        "-d" directory
        (concat "--class=project-terminal-"
                (number-to-string (mod workspace-number 10)))))

(setq ph/project-terminal-amount-prompt
      "How many terminals does my master wish to spawn? :")
(setq ph/project-terminal-amount-default 3)

(setq ph/project-terminal-workspace-prompt
      "On which workspace does my master wish to spawn them? :")
(setq ph/project-terminal-workspace-default 6)

(defun ph/spawn-one-project-terminal ( &optional workspace-number)
  "Start one terminal in the current project directory on WORKSPACE-NUMBER."
  (interactive)
  (unless workspace-number
    (setq workspace-number
          (read-number ph/project-terminal-workspace-prompt
                       ph/project-terminal-workspace-default)))
  (let ((dir (projectile-project-p)))
    (if dir
        (progn
          (setq project-terminal-buffer
                (get-buffer-create "project-terminals"))
           (make-process
            :name (concat "project-terminal-" dir)
            :buffer project-terminal-buffer
            :command (ph/project-terminal-command-list-termite dir workspace-number)))
      (message "You're not in a project"))))

(defun ph/spawn-some-project-terminals (&optional amount workspace-number)
  "Start AMOUNT terminals on WORKSPACE-NUMBER in the current project directory."
  (interactive)
  (unless amount
    (setq amount (read-number ph/project-terminal-amount-prompt
                              ph/project-terminal-amount-default)))
  (unless workspace-number
    (setq workspace-number
          (read-number ph/project-terminal-workspace-prompt
                       ph/project-terminal-workspace-default)))
  (while (> amount 0)
    (ph/spawn-one-project-terminal workspace-number)
    (setq amount (- amount 1))))
#+END_SRC

** Ido

=ido= ("interactively do things") supercharges Emacs' completion system.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'ido)
(ido-mode 1)
(ido-everywhere 1)
#+END_SRC

Enable the built-in fuzzy-matching

#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
#+END_SRC

Enable =ido-vertical-mode=

#+BEGIN_SRC emacs-lisp
(ph/install-package 'ido-vertical-mode)
(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
(setq ido-vertical-show-count t)
#+END_SRC

** Counsel

=counsel=, a collection of Ivy-enhanced versions of common Emacs commands.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'counsel)
(ph/install-package 'counsel-projectile)
(counsel-projectile-mode)
 #+END_SRC

#+BEGIN_SRC emacs-lisp
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
 #+END_SRC

** Dictionary

=dictcc= translates English to German and vice versa.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'dictcc)
#+END_SRC

** PDF

=pdf-tools= is, among other things, a replacement of DocView for PDF files. The
key difference is that pages are not pre-rendered by e.g. ghostscript and stored
in the file-system, but rather created on-demand and stored in memory.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'pdf-tools)
(pdf-tools-install)
#+END_SRC

When highlighting, automatically add an annotation.

#+BEGIN_SRC emacs-lisp
(setq pdf-annot-activate-created-annotations t)
#+END_SRC

Zoom by 10%.

#+BEGIN_SRC emacs-lisp
(setq pdf-view-resize-factor 1.1)
#+END_SRC

Annotations:

- =C-c C-a h= to highlight text
- =C-c C-a o= to strike though text
- =C-c C-a t= to add a note
- =C-c C-a D= to delete one of the above
- =C-c C-a l= to list all annotations. Use =SPACE= to jump to the annotation.

[[https://github.com/politza/pdf-tools#some-keybindings][Some keybindings]]

* Programming and Markup
** Autocomplete

=company= is a text completion framework for Emacs. The name stands for "complete
anything". It uses pluggable back-ends and front-ends to retrieve and display
completion candidates.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'company)
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

*** Settings

Automatically show completion after 1 character.

#+BEGIN_SRC emacs-lisp
(setq company-minimum-prefix-length 1)
#+END_SRC

Don't require a match to continue typing.

#+BEGIN_SRC emacs-lisp
(setq company-require-match nil)
#+END_SRC

Switch between suggestions with =C-n= and =C-p=.

#+BEGIN_SRC emacs-lisp
(general-def company-active-map
  "C-n" 'company-select-next
  "C-p" 'company-select-previous)

(general-def company-search-map
  "C-n" 'company-select-next
  "C-p" 'company-select-previous)
#+END_SRC

Disable evil-complete

#+BEGIN_SRC emacs-lisp
(general-def 'insert
  "C-p" nil
  "C-n" nil)
#+END_SRC

*** Backends

Install some backends.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'company-bibtex)
(add-to-list 'company-backends 'company-bibtex)

(ph/install-package 'company-auctex)
(company-auctex-init)

(ph/install-package 'company-inf-ruby)
(add-to-list 'company-backends 'company-inf-ruby)

(ph/install-package 'company-shell)
(add-to-list 'company-backends 'company-shell)

(ph/install-package 'company-tern)
(add-to-list 'company-backends 'company-tern)

(ph/install-package 'company-web t)
(require 'company-web-html)
(add-to-list 'company-backends 'company-web-html)
#+END_SRC

=jquery-doc= provides completion source for auto-complete and company-mode as
well as a =jquery-doc= command to lookup documentation.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'jquery-doc)
#+END_SRC

** Brackets

Make brackets colorful

 #+BEGIN_SRC emacs-lisp
(ph/install-package 'rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
 #+END_SRC

Highlight matching brackets.

#+BEGIN_SRC emacs-lisp
(setq show-paren-style 'mixed)
(add-hook 'prog-mode-hook 'show-paren-mode)
#+END_SRC

Typing any left bracket automatically insert the right matching bracket.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'smartparens)
(add-hook 'prog-mode-hook 'smartparens-mode)
#+END_SRC

** Display Line Numbers

Show line numbers in programming modes

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

Count the number of lines to use for line number width.

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-width-start t)
#+END_SRC

** Flycheck

Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'flycheck)
 #+END_SRC

Enable =Flycheck= globally (=prog-mode-hook= may not cover all modes).

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-flycheck-mode)
 #+END_SRC

Use =C-c ! l= (=M-x flycheck-list-errors=) to list all errors. Within the error
list the following key bindings are available:
 - =n= Jump to the next error
 - =p= Jump to the previous error
 - =e= Explain the error
 - =f= Filter the error list by level
 - =F= Remove this filter
 - =S= Sort the error list bye the column at point
 - =g= Check the source buffer and update the error list
 - =q= Quit the error list and hide its window

** Git

Magit is an interface to the version control system Git.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'magit)
#+END_SRC

Show =TODO= in magit-buffer

#+BEGIN_SRC emacs-lisp
(ph/install-package 'magit-todos)
(magit-todos-mode t)
#+END_SRC

Some major-modes to configure git repositories.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'gitattributes-mode)
(ph/install-package 'gitconfig-mode)
(ph/install-package 'gitignore-mode)
#+END_SRC

** Haml

#+BEGIN_SRC emacs-lisp
(ph/install-package 'haml-mode)
#+END_SRC

** Indentation

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil
              tab-width 2)
(setq js-indent-level 2)
(setq python-indent 2)
(setq css-indent-offset 2)
(setq sh-basic-offset 2)
(setq sh-indentation 2)
#+END_SRC

** JavaScript

#+BEGIN_SRC emacs-lisp
(ph/install-package 'js2-mode)
(ph/install-package 'js2-refactor)
#+END_SRC

*** Tern

This is Tern. Tern is a stand-alone, editor-independent JavaScript analyzer that
can be used to improve the JavaScript integration of existing editors.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'tern)
#+END_SRC

Put a file =.tern-project= in the root of the project. Additionally, a file
=~/.tern-config=.

A Ruby on Rails =.tern-project= may look like this:

#+BEGIN_SRC javascript
{
  "libs": [
    "browser",
    "jquery"
  ],
  "loadEagerly": [
    "app/assets/javascripts/**/*.js",
    "lib/assets/javascript/**/*.js",
    "vendor/assets/javascript/**/*.js"
  ],
  "plugins": {
    "es_modules": {},
    "node": {}
  }
}
#+END_SRC

And my =~/.tern-config=

#+BEGIN_SRC javascript
{
  "libs": [
    "browser",
    "jquery"
  ],
  "plugins": {
    "es_modules": {},
    "node": {}
  }
}
#+END_SRC

*** Eslint

Use =eslint= instead of =jshint=.

#+BEGIN_SRC emacs-lisp
(setq-default flycheck-disabled-checkers (append flycheck-disabled-checkers
                      '(javascript-jshint)))
(flycheck-add-mode 'javascript-eslint 'web-mode)
#+END_SRC

** Lua

#+BEGIN_SRC emacs-lisp
(ph/install-package 'lua-mode)
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
(ph/install-package 'markdown-mode)
(setq markdown-command "pandoc")
#+END_SRC

** Org

Every time you’ll be saving an org file, the first headline with a =:TOC:= tag
will be updated with the current table of contents.

 - =:TOC_2:= - sets the max depth of the headlines in the table of contents to 2
   (the default)
 - =:TOC_2_gh:= - sets the max depth as in above and also uses the GitHub-style
   hrefs in the table of contents (this style is default). The other supported
   href style is ‘org’, which is the default org style.


#+begin_src emacs-lisp
(ph/install-package 'toc-org)
(add-hook 'org-mode-hook 'toc-org-enable)
#+end_src

=org-ref=: citations, cross-references, indexes, glossaries and bibtex utilities for org-mode.

#+begin_src emacs-lisp
(ph/install-package 'org-ref)
#+end_src

** PHP

#+BEGIN_SRC emacs-lisp
(ph/install-package 'php-mode)
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
(ph/install-package 'elpy)
(elpy-enable)
#+END_SRC

Use Virtual Envirnonments.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'virtualenvwrapper)
(venv-initialize-eshell)
#+END_SRC


Virtual-Environment handling  shell:
   - create a virtualenv: `mkvirtualenv -p /usr/bin/python2.7 theproject`
   - activate virtualenv: `workon theproject`
   - exit the env: `deactivate`
   - delete the env: `rmvirtualenv theproject`

Virtual-Envirnoment handling with emacs:
   - create a virtualenv: `M-x venv-mkvirtualenv-using`
   - activate virtualenv: `M-x venv-workon`
   - exit the env with: `M-x venv-deactivate`
   - delete the env: `M-x venv-rmvirtualenv`

pip in Virtual-Envirnoment
   - save pip dependencies: `pip freeze > requirements.txt`
   - install pip dependencies `pip install -r requirements.txt`

Debugging with `import pdb` , `pdb.set_trace()`, `python -m pdb script.py`

** R

Emacs Speaks Statistics (=ess=) is designed to support editing of scripts and
interaction with various statistical analysis programs such as R, S-Plus, SAS,
Stata and OpenBUGS/JAGS.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'ess)
#+END_SRC

** Rainbow

This minor mode sets background color to strings that match color names, e.g.
#0000ff is displayed in white with a blue background

#+BEGIN_SRC emacs-lisp
(ph/install-package 'rainbow-mode)
(add-hook 'prog-mode-hook 'rainbow-mode)
#+END_SRC

** Ruby
*** Inf-ruby

#+BEGIN_SRC emacs-lisp
(ph/install-package 'inf-ruby)
#+END_SRC

*** Ruby Mode

Use =ruby-mode= for all common ruby-files.

No magic comments

#+BEGIN_SRC emacs-lisp
(setq ruby-insert-encoding-magic-comment nil)
#+END_SRC

*** Robe

#+BEGIN_SRC emacs-lisp
(ph/install-package 'robe)
#+END_SRC

Add the following gems to the =Gemfile= (if existent) and install them.

#+BEGIN_SRC ruby
group :development do
  gem 'pry'
  gem 'pry-doc'
  gem 'method_source'
end
#+END_SRC

Generally, you'll want to start with =M-x inf-ruby-console-auto=. If there's no
Ruby console running, most interactive commands provided by Robe will offer to
launch it automatically.

The exceptions are code completion and eldoc, which only work if the server is
already running. To launch it, type =M-x robe-start=.

As you change the code in your project, you'll want to update the running
process. To load the current file, type =C-c C-l= (=ruby-load-file=), see
inf-ruby for more commands. When you're working on a Rails project, you can type
=C-c C-k= instead to reload the whole environment at once.

#+BEGIN_SRC emacs-lisp
(add-hook 'ruby-mode-hook 'robe-mode)
#+END_SRC

Some useful Commands/Keybindings
 - =C-c C-d= Lookup documentation
 - =M-.= / =M-,​= Jump to defintion and back

Use company mode for code completion.

#+BEGIN_SRC emacs-lisp
(eval-after-load 'company
  '(push 'company-robe company-backends))
#+END_SRC

*** Rspec-mode

Put the following in the =Gemfile=.

#+BEGIN_SRC ruby
group :development do
  gem 'spring-commands-rspec'
end
#+END_SRC

Usage:

- =C-c , s= Verify the example or method defined at point
- =C-c , m= Run all specs related to the current buffer
- =C-c , a= Run spec for entire project
- [[https://github.com/pezra/rspec-mode#usage][and more]]

Load it.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/vendor/rspec-mode")
(require 'rspec-mode)
(require 'ansi-color)
(eval-after-load 'rspec-mode '(rspec-install-snippets))
#+END_SRC

When you've hit the breakpoint, hit =C-x C-q= to enable inf-ruby.

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'inf-ruby-switch-setup)
#+END_SRC

** TeX

AUCTeX is an extensible package for writing and formatting TeX files in GNU
Emacs.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'auctex t)
#+END_SRC

Parse on load and save. This increases performance, especially for large
multifile projects. The information is stored in an "auto" subdirectory.

#+BEGIN_SRC emacs-lisp
(setq TeX-parse-self t)
(setq TeX-auto-save t)
#+END_SRC

Query to find out which is the master file.

#+BEGIN_SRC emacs-lisp
(setq-default TeX-master nil)
#+END_SRC

I use Evince to view my PDFs.

#+BEGIN_SRC emacs-lisp
(setq TeX-PDF-mode t)
(setq TeX-view-program-selection '((output-pdf "Evince")))
#+END_SRC

Sync with evince. Use =Control + Left Click= for backward search.

#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
(setq TeX-source-correlate-start-server t)
#+END_SRC

** Web mode

=web-mode= is an autonomous emacs major-mode for editing web templates. HTML
documents can embed parts (CSS / JavaScript) and blocks (client / server side).

#+BEGIN_SRC emacs-lisp
(ph/install-package 'web-mode)
#+END_SRC

Use =web-mode= for the following file-types.

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tag?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.json?\\'" . web-mode))
#+END_SRC

Some web-mode settings.

#+BEGIN_SRC emacs-lisp
(setq web-mode-markup-indent-offset 2
      web-mode-css-indent-offset 2
      web-mode-code-indent-offset 2
      web-mode-script-padding 2
      web-mode-style-padding 2
      web-mode-script-padding 2
      web-mode-block-padding 0
      web-mode-enable-current-element-highlight t
      web-mode-enable-current-column-highlight t)
#+END_SRC

Use company backends for =tern=, =html= and =css=.

#+BEGIN_SRC emacs-lisp
(defun ph/web-mode-hook ()
  "Hook for `web-mode'."
  (set (make-local-variable 'company-backends)
       '(company-tern company-web-html company-css company-files)))

(add-hook 'web-mode-hook 'ph/web-mode-hook)
#+END_SRC

Enable =tern= when the current language is JavaScript.

#+BEGIN_SRC emacs-lisp
(advice-add 'company-tern :before
            '(lambda (&rest _)
               (if (equal major-mode 'web-mode)
                   (let ((web-mode-cur-language
                          (web-mode-language-at-pos)))
                     (if (or (string= web-mode-cur-language "javascript")
                             (string= web-mode-cur-language "jsx"))
                         (unless tern-mode (tern-mode))
                       (if tern-mode (tern-mode -1)))))))
#+END_SRC

** Yaml

#+BEGIN_SRC emacs-lisp
(ph/install-package 'yaml-mode)
#+END_SRC

Use a line width of 100 in =yaml-mode=.

#+BEGIN_SRC emacs-lisp
(add-hook 'yaml-mode-hook
  (lambda () (set-fill-column 100)))
#+END_SRC

* News Feeds

Elfeed is an extensible web feed reader for Emacs, supporting both Atom and RSS.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'elfeed)
(ph/install-package 'elfeed-goodies)
(ph/install-package 'elfeed-org)
(elfeed-goodies/setup)
(elfeed-org)
(setq rmh-elfeed-org-files (list "~/git/config/emacs/elfeed.org"))
#+END_SRC

* Mail

[[https://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]] is an emacs-based e-mail client. It’s based on the mu e-mail
indexer/searcher. It attempts to be a super-efficient tool to withstand the
daily e-mail tsunami.

** Setup

#+BEGIN_SRC emacs-lisp
(require 'mu4e)
(require 'mu4e-contrib)
(ph/install-package 'evil-mu4e)
(ph/install-package 'smtpmail)
#+END_SRC

Open mu4e in the current frame, even if it is already opened in another frame.

#+BEGIN_SRC emacs-lisp
(defun ph/mu4e ()
  "Open mu4e even if its already opened somewhere else."
  (interactive)
  (unless (string-prefix-p "mu4e" (symbol-name major-mode))
    (let ((buffer (get-buffer "*mu4e-headers*")))
      (if buffer (switch-to-buffer buffer) (mu4e)))))
#+END_SRC


Show dates as =dd.mm.yy=, and times in =HH:MM=

#+BEGIN_SRC emacs-lisp
(setq mu4e-headers-time-format "%H:%M")
(setq mu4e-headers-date-format "%d.%m.%y")
#+END_SRC

Pick first Context as default.

#+BEGIN_SRC emacs-lisp
(setq mu4e-context-policy 'pick-first)
(setq mu4e-compose-context-policy 'ask-if-none)
#+END_SRC

Don't mark for delete, only move to Trash.

# TODO: find a better option for this, should this be an offlineimap setting?

#+BEGIN_SRC emacs-lisp
(defun mu4e-headers-mark-for-delete () nil)
#+END_SRC

Enabling receiving clients that support this feature to reflow my paragraphs.
Plain text emails with =Content-Type: text/plain; format=flowed= can be reflowed
(i.e. line endings removed, paragraphs refilled) by receiving clients that
support this standard. Clients that don’t support this, show them as is, which
means this feature is truly non-invasive.

#+BEGIN_SRC emacs-lisp
(setq mu4e-compose-format-flowed t)
#+END_SRC

Dont reply to myself.

#+BEGIN_SRC emacs-lisp
(setq mu4e-compose-dont-reply-to-self t)
#+END_SRC

Show me the addresses, not only names.

#+BEGIN_SRC emacs-lisp
(setq mu4e-view-show-addresses t)
#+END_SRC

Show text, not html.

#+BEGIN_SRC emacs-lisp
(setq mu4e-html2text-command 'mu4e-shr2text)
#+END_SRC

View html-mail in browser with =aV=.

#+BEGIN_SRC emacs-lisp
(add-to-list 'mu4e-view-actions
             '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#+END_SRC

Use =smtpmail= with =tnutls= to sending mails.

#+BEGIN_SRC emacs-lisp
(setq message-send-mail-function 'smtpmail-send-it)
(setq starttls-use-gnutls t)
(setq smtpmail-debug-info t)
#+END_SRC

Show only one of duplicate messages.

#+BEGIN_SRC emacs-lisp
(setq mu4e-headers-skip-duplicates t)
#+END_SRC

Kill message-buffer when finished.

#+BEGIN_SRC emacs-lisp
(setq message-kill-buffer-on-exit t)
#+END_SRC

** Contexts

#+BEGIN_SRC emacs-lisp
(setq mu4e-maildir "~/.mail")

(setq mu4e-contexts
    `( ,(make-mu4e-context
          :name "Private"
          :match-func (lambda (msg)
                (when msg
                  (mu4e-message-contact-field-matches msg
                    :to "pascal.huber@resolved.ch")))
          :vars '(
            ( user-full-name                  . "Pascal Huber" )
            ( user-mail-address               . "pascal.huber@resolved.ch")
            ( mu4e-get-mail-command           . "offlineimap -a Private,QuickshiftPascal,ETH")
            ( mu4e-drafts-folder              . "/r/INBOX.Drafts")
            ( mu4e-sent-folder                . "/r/INBOX.Sent")
            ( mu4e-trash-folder               . "/r/INBOX.Trash")
            ( mu4e-maildir-shortcuts
                .( ("/r/INBOX"                . ?i)
                   ("/r/INBOX.Sent"           . ?s)
                   ("/r/INBOX.spambucket"     . ?x)
                   ("/r/INBOX.keep"           . ?k)
                   ("/r/INBOX.tempKeep"       . ?t)
                   ("/r/INBOX.Trash"          . ?b)))
            ( mu4e-sent-messages-behavior     . sent)
            ( smtpmail-stream-type            . starttls)
            ( smtpmail-default-smtp-server    . "mail.resolved.ch")
            ( smtpmail-smtp-server            . "mail.resolved.ch")
            ( smtpmail-smtp-service           . 587)
            ( smtpmail-smtp-user              . "pascal.huber@resolved.ch")
            ( smtpmail-starttls-credentials   . "/home/pascal/.authinfo.gpg")
            ( smtpmail-auth-credentials       . '(("mail.resolved.ch" 587 nil nil)))))
       ,(make-mu4e-context
          :name "QuickShift"
          :match-func (lambda (msg)
                (when msg
                  (mu4e-message-contact-field-matches msg
                    :to "pascal@quickshift.ch")))
          :vars '(
            ( user-full-name                  . "Pascal Huber" )
            ( user-mail-address               . "pascal@quickshift.ch")
            ( mu4e-get-mail-command           . "offlineimap -a Private,QuickshiftPascal,ETH")
            ( mu4e-drafts-folder              . "/q/INBOX.Drafts")
            ( mu4e-sent-folder                . "/q/INBOX.Sent")
            ( mu4e-trash-folder               . "/q/INBOX.Trash")
            ( mu4e-maildir-shortcuts
                .( ("/q/INBOX"                . ?i)
                   ("/q/INBOX.Sent"           . ?s)
                   ("/q/INBOX.spambucket"     . ?x)
                   ("/q/INBOX.keep"           . ?k)
                   ("/q/INBOX.tmp"            . ?t)
                   ("/q/INBOX.Trash"          . ?b)))
            ( mu4e-compose-signature          . (concat "QuickShift"
                                                        " - Der vollautomatische Einsatzplaner\n"
                                                        "quickshift.ch\n\n"
                                                        "Pascal Huber\n"
                                                        "pascal@quickshift.ch\n"
                                                        "+41 79 263 92 98\n"))
            ( mu4e-sent-messages-behavior     . sent)
            ( smtpmail-stream-type            . starttls)
            ( smtpmail-default-smtp-server    . "mail.quickshift.ch")
            ( smtpmail-smtp-server            . "mail.quickshift.ch")
            ( smtpmail-smtp-service           . 587)
            ( smtpmail-smtp-user              . "pascal@quickshift.ch")
            ( smtpmail-starttls-credentials   . "/home/pascal/.authinfo.gpg")
            ( smtpmail-auth-credentials       . '(("mail.quickshift.ch" 587 nil nil)))))
       ,(make-mu4e-context
          :name "ETH"
          :match-func (lambda (msg)
                (when msg
                  (mu4e-message-contact-field-matches msg
                    :to "pascal@quickshift.ch")))
          :vars '(
            ( user-full-name                  . "Pascal Huber" )
            ( user-mail-address               . "pahuber@student.ethz.ch")
            ( mu4e-get-mail-command           . "offlineimap -a Private,QuickshiftPascal,ETH")
            ( mu4e-drafts-folder              . "/e/Drafts")
            ( mu4e-sent-folder                . "/e/Sent Items")
            ( mu4e-trash-folder               . "/e/Deleted Items")
            ( mu4e-maildir-shortcuts
                .( ("/e/INBOX"                . ?i)
                   ("/e/Sent Items"           . ?s)
                   ("/e/Junk E-Mail"          . ?x)
                   ("/e/INBOX.keep"           . ?k)
                   ("/e/INBOX.tmp"            . ?t)
                   ("/e/Deleted Items"        . ?b)))
            ( mu4e-sent-messages-behavior     . sent)
            ( smtpmail-stream-type            . starttls)
            ( smtpmail-default-smtp-server    . "mail.ethz.ch")
            ( smtpmail-smtp-server            . "mail.ethz.ch")
            ( smtpmail-smtp-service           . 587)
            ( smtpmail-smtp-user              . "pahuber")
            ( smtpmail-starttls-credentials   . "/home/pascal/.authinfo.gpg")
            ( smtpmail-auth-credentials       . '(("mail.ethz.ch" 587 nil nil)))))
       ,(make-mu4e-context
          :name "Gmail"
          :match-func (lambda (msg)
                (when msg
                  (mu4e-message-contact-field-matches msg
                    :to "mr.huber.pascal@gmail.com")))
          :vars '(
            ( user-full-name     . "Pascal Huber")
            ( user-mail-address	 . "mr.huber.pascal@gmail.com")
            ( mu4e-get-mail-command . "offlineimap -o -a Gmail")
            ( mu4e-drafts-folder . "/g/[Gmail].Drafts")
            ( mu4e-sent-folder   . "/g/[Gmail].Sent Mail")
            ( mu4e-trash-folder  . "/g/[Gmail].Bin")
            ( mu4e-maildir-shortcuts
                .( ("/g/INBOX"                   . ?i)
                   ("/g/[Gmail].Sent Mail"       . ?s)
                   ("/g/[Gmail].Spam"            . ?x)
                   ("/g/[Gmail].Bin"             . ?b)))
            ( mu4e-sent-messages-behavior    . delete)
            ( smtpmail-stream-type           . starttls)
            ( smtpmail-default-smtp-server   . "smtp.gmail.com")
            ( smtpmail-smtp-server           . "smtp.gmail.com")
            ( smtpmail-smtp-service          . 587)
            ( smtpmail-smtp-user             . "mr.huber.pascal@gmail.com")
            ( smtpmail-starttls-credentials  . "/home/pascal/.authinfo.gpg")
            ( smtpmail-auth-credentials      . '(("smtp.gmail.com" 587 nil nil)))))))
#+END_SRC

** Forgotten Attachment

Before sending a message, check if it contains any words that indicate that
there should be an attachement. If it does, ask if all attachments were added
before sending the mail.

#+BEGIN_SRC emacs-lisp
(defvar ph/message-attachment-regexp
  (concat "\\("
          "[Ww]e send\\|"
          "[Ii] send\\|"
          "attach\\|"
          "[aA]nhang\\|"
          "[aA]ngehängt\\|"
          "[sS]chicke\\|"
          "haenge\\|"
          "hänge\\)"))

(defun ph/message-check-attachment nil
  "Check for forgotten attachments"
  (save-excursion
    (message-goto-body)
    (when (search-forward-regexp ph/message-attachment-regexp nil t nil)
      (message-goto-body)
      (unless (message-y-or-n-p
               "Did you attach all documents?" nil nil)
        (error "No message sent, add some attachments!")))))

(add-hook 'message-send-hook 'ph/message-check-attachment)
#+END_SRC

* Global Keybindings

Create an empty keymap and minor-mode for my global keybindings

#+BEGIN_SRC emacs-lisp
(defvar ph/global-keymap (make-sparse-keymap))
(define-minor-mode ph/global-keys-mode
  :init-value t
  :keymap ph/global-keymap)
(ph/global-keys-mode t)
#+END_SRC

Overwriting default bindings (and defining new ones).

 #+BEGIN_SRC emacs-lisp
(general-def ph/global-keymap
  "C-h f" 'counsel-describe-function
  "C-h v" 'counsel-describe-variable
  "C-SPC" 'company-complete)

(general-def ph/global-keymap
  :prefix "C-x"
  "2"   'ph/vsplit-last-buffer
  "3"   'ph/hsplit-last-buffer
  "7"   'ph/open-last-buffer
  "m"   'counsel-M-x
  "b"   'ivy-switch-buffer
  "C-b" 'ivy-switch-buffer
  "C-f" 'counsel-find-file)
#+END_SRC

User-defined bindings (=C-c= followed by a letter and =<F5>= through =<F9>=
without modifiers).

#+BEGIN_SRC emacs-lisp
(general-def ph/global-keymap
  :prefix "C-c"
  "e" 'elfeed
  "i" 'indent-region
  "k" 'ag
  "o" 'occur-dwim
  "r" 'ph/mu4e
  "s" 'ph/spawn-some-project-terminals)

(general-def ph/global-keymap
  "<f5>" 'ph/next-theme)
#+END_SRC

* User Interface
** Tooltips

Don't use ugly GTK tooltips.

#+BEGIN_SRC emacs-lisp
(setq x-gtk-use-system-tooltips nil)
#+END_SRC

** Default Face

Set the default face.

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "DejaVu Sans Mono"
                    :weight 'normal
                    :height 110
                    :width 'normal)
#+END_SRC

The font-size can be adjusted buffer-locally with =C-x C-+= and =C-x C--=.

** Theme Rotation

Call =M-x ph/next-theme= to load the next theme.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'moe-theme)
(ph/install-package 'dash)

(setq ph/theme-list (list (list '(load-theme moe-dark t)
                                '(ph/spaceline-dark))
                          (list '(load-theme moe-light t)
                                '(ph/spaceline-light))))

(defun ph/next-theme ()
  "Loads next theme in the theme-list and rotates the list"
  (interactive)
  (cl-loop for f in (nth 0 ph/theme-list) do (apply f))
  (setq ph/theme-list (-rotate 1 ph/theme-list)))

(add-hook 'after-init-hook 'ph/next-theme)
#+END_SRC

** Spaceline

#+BEGIN_SRC emacs-lisp
(ph/install-package 'spaceline)
(setq-default mode-line-format '("%e" (:eval (spaceline-ml-main))))
#+END_SRC

*** Faces
**** Changing Faces

Functions to change the mode-line faces.

#+BEGIN_SRC emacs-lisp
(defun ph/spaceline-light()
  (interactive)
  (set-face-attribute 'ph/spaceline-mu4e-context-face nil
                      :background "#afd7ff")
  (set-face-attribute 'mode-line nil
                      :height 100
                      :foreground "#3a3a3a"
                      :box '(:color "#e6e6e0")
                      :background "#fdfde7")
  (set-face-attribute 'mode-line-buffer-id nil
                      :inherit 'mode-line
                      :foreground "#3a3a3a"
                      :box '(:color "#e6e6e0")
                      :background "#fdfde7")
  (set-face-attribute 'powerline-active1 nil
                      :inherit 'mode-line
                      :foreground "#3a3a3a"
                      :box '(:color "#e6e6e0")
                      :background "#f3f3f3")
  (set-face-attribute 'powerline-active2 nil
                      :inherit 'mode-line
                      :foreground "#3a3a3a"
                      :box '(:color "#e6e6e0")
                      :background "#e6e6e6")
  (powerline-reset))

(defun ph/spaceline-dark()
  (interactive)
  (set-face-attribute 'ph/spaceline-mu4e-context-face nil
                      :background "#005f87")
  (set-face-attribute 'mode-line nil
                      :height 100
                      :foreground "#c6c6c6"
                      :box '(:color "#252525")
                      :background "#252525")
  (set-face-attribute 'mode-line-buffer-id nil
                      :inherit 'mode-line
                      :foreground "#c6c6c6"
                      :box '(:color "#252525")
                      :background "#252525")
  (set-face-attribute 'powerline-active1 nil
                      :inherit 'mode-line
                      :foreground "#c6c6c6"
                      :box '(:color "#252525")
                      :background "#303030")
  (set-face-attribute 'powerline-active2 nil
                      :inherit 'mode-line
                      :foreground "#c6c6c6"
                      :box '(:color "#252525")
                      :background "#383838")
  (powerline-reset))
#+END_SRC

**** Mode Line

A slightly smaller font for the mode-line.

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'mode-line nil
                    :inherit 'default
                    :height 100)
(set-face-attribute 'mode-line-inactive nil
                    :inherit 'mode-line)
#+END_SRC

**** Attention-Faces

Faces to highlight things/spaceline-segments which need special attention.

#+BEGIN_SRC emacs-lisp
(defface ph/spaceline-alert-face
  '((t :inherit 'mode-line
       :foreground "black"
       :background "#ef2929"))
  "Alert Face"
  :group 'spaceline)

(defface ph/spaceline-warn-face
  '((t :inherit 'mode-line
       :foreground "black"
       :background "#ff5d17"))
  "Warn Face"
  :group 'spaceline)

(defface ph/spaceline-another-warn-face
  '((t :inherit 'mode-line
       :foreground "black"
       :background "#fce94f"))
  "Another Warn Face"
  :group 'spaceline)

(defface ph/spaceline-info-face
  '((t :inherit 'mode-line
       :foreground "black"
       :background "#a1db00"))
  "Info Face"
  :group 'spaceline)
#+END_SRC

**** Special Segments

Face for mu4e segemnt.

#+BEGIN_SRC emacs-lisp
(defface ph/spaceline-mu4e-context-face
  '((t :inherit 'mode-line
       :weight bold))
  "mu4e face asdf"
  :group 'spaceline)
#+END_SRC

Ajdust the colors for different evil-states.

#+BEGIN_SRC emacs-lisp
(defface ph/spaceline-evil-god-face
  '((t (:background "tomato"
        :inherit 'spaceline-evil-normal)))
  "Spaceline Evil God State"
  :group 'spaceline)
(add-to-list 'spaceline-evil-state-faces
             '(god . ph/spaceline-evil-god-face))

(defface ph/spaceline-evil-operator-face
  '((t (:background "cornflower blue"
        :inherit 'spaceline-evil-normal)))
  "Spaceline Evil Operator State"
  :group 'spaceline)
(add-to-list 'spaceline-evil-state-faces
             '(operator . ph/spaceline-evil-operator-face))
#+END_SRC

*** Segments
**** Flycheck

Flycheck segments for =info=, =warning= and =error=.

TODO: refactor this, too much redundancy...

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment ph/flycheck-warning-segment
  (if (flycheck-has-current-errors-p)
      (let ((c (cdr (assq 'warning (flycheck-count-errors
                                    flycheck-current-errors)))))
        (powerline-raw
         (if c (format "%s" c))))))

(spaceline-define-segment ph/flycheck-error-segment
  (if (flycheck-has-current-errors-p)
      (let ((c (cdr (assq 'error (flycheck-count-errors
                                    flycheck-current-errors)))))
        (powerline-raw
         (if c (format "%s" c))))))

(spaceline-define-segment ph/flycheck-info-segment
  (if (flycheck-has-current-errors-p)
      (let ((c (cdr (assq 'info (flycheck-count-errors
                                    flycheck-current-errors)))))
        (powerline-raw
         (if c (format "%s" c))))))
#+END_SRC

**** Evil

Setting the face according to =evil-state=.

#+BEGIN_SRC emacs-lisp
(defun ph/spaceline-highlight-face-evil-state ()
  "Set the highlight face depending on the evil state.
   Set `spaceline-highlight-face-func' to
   `spaceline-highlight-face-evil-state' to use this."
  (if (bound-and-true-p evil-local-mode)
      (let* ((face (assq evil-state spaceline-evil-state-faces)))
        (if face (cdr face) (spaceline-highlight-face-default)))
    (spaceline-highlight-face-default)))

(setq-default spaceline-highlight-face-func 'ph/spaceline-highlight-face-evil-state)
#+END_SRC

**** Python Virtual Environment

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment ph/virtualenvwrapper-segment venv-current-name)
#+END_SRC

**** Git status

#+BEGIN_SRC emacs-lisp
(defun ph/git-branch-name ()
  (replace-regexp-in-string "^ Git[:-]" "" vc-mode))

(spaceline-define-segment ph/version-control
  "Version control information."
  (when vc-mode
    (powerline-raw
     (s-trim (concat (ph/git-branch-name))))))
#+END_SRC

**** Tramp

Tramp offers the following file name syntax to refer to files on other machines.

#+BEGIN_SRC config
/method:host:filename
/method:user@host:filename
/method:user@host#port:filename
#+END_SRC

The following segemnts display the current buffer's =method= and =user@host=.

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment ph/remote-method
  (when (and default-directory
             (file-remote-p default-directory 'method))
    (file-remote-p default-directory 'method)))

(spaceline-define-segment ph/remote-user-and-host
  (when (and default-directory
             (or
              (file-remote-p default-directory 'user)
              (file-remote-p default-directory 'host)))
    (concat
     (file-remote-p default-directory 'user) "@"
     (file-remote-p default-directory 'host))))
#+END_SRC

**** File Permission

I want to see if the current file has "special" permissions. Special meaning
that the permissions change if the file is deleted and rewritten.

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment ph/special-file-permissions
  (if (and (buffer-file-name)
           (not (file-ownership-preserved-p (buffer-file-name))))
      (powerline-raw
       (concat (if (file-readable-p (buffer-file-name)) "r" "-")
               (if (file-writable-p (buffer-file-name)) "w" "-")
               (if (file-executable-p (buffer-file-name)) "x" "-")))))
#+END_SRC

**** Mu4e Context

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment ph/mu4e-context-segment
  (let ((context (mu4e-context-current)))
    (if (and context
             (string-prefix-p "mu4e" (symbol-name major-mode)))
        (powerline-raw
         (mu4e-context-name context)))))
#+END_SRC

*** Diminish

Diminish implements hiding or abbreviation of the mode line displays (lighters)
of minor-modes.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'diminish)

(eval-after-load "god-mode"
  '(diminish 'god-local-mode))
(eval-after-load "rainbow-mode"
  '(diminish 'rainbow-mode))
(eval-after-load "projectile"
  '(diminish 'projectile-mode))
(eval-after-load "beacon"
  '(diminish 'beacon-mode))
(eval-after-load "auto-revert"
  '(diminish 'auto-revert-mode))
(eval-after-load "undo-tree"
  '(diminish 'undo-tree-mode))
#+END_SRC

*** Setup

Setting up the mode-line and order of segements. Compile the modeline with =M-x
spaceline-compile=.

#+BEGIN_SRC emacs-lisp
(require 'spaceline-config)
(spaceline-emacs-theme)
(spaceline-install
  'main
  '((evil-state :when active :face highlight-face)
    (buffer-id)
    (ph/mu4e-context-segment :face ph/spaceline-mu4e-context-face)
    (ph/special-file-permissions :face ph/spaceline-alert-face)
    (ph/remote-method :face ph/spaceline-warn-face)
    (ph/remote-user-and-host :face ph/spaceline-another-warn-face)
    (ph/virtualenvwrapper-segment)
    (buffer-modified)
    (process :when active))
  '((minor-modes)
    (anzu)
    (projectile-root)
    (ph/version-control :when active)
    (line-column)
    (buffer-position)
    (ph/flycheck-info-segment :face ph/spaceline-info-face)
    (ph/flycheck-warning-segment :face ph/spaceline-warn-face)
    (ph/flycheck-error-segment :face ph/spaceline-alert-face)
    (major-mode)))
#+END_SRC

*** Config

Set mode-line always active (don't hide any information when focus is on a
different window).

#+BEGIN_SRC emacs-lisp
(defun powerline-selected-window-active () t)
#+END_SRC

Before drawing the powerline, adjust =powerline-text-scale-factor=. The reason
behind this ist that the font in my graphical frames is a tiny bit smaller than
the default font in order to have more space for content. Setting the
scale-factor each time before drawing the powerline allows the parallel use of
graphical clients and terminal clients (which only have one font-size).

#+BEGIN_SRC emacs-lisp
(defun ph/set-powerline-text-scale-factor (face reserve)
  (if (display-graphic-p (selected-frame))
      (setq powerline-text-scale-factor 0.9)
    (setq powerline-text-scale-factor nil)))

(advice-add 'powerline-fill :before #'ph/set-powerline-text-scale-factor)
#+END_SRC

** Beacon

Whenever the window scrolls a light will shine on top of your cursor so you know
where it is.

#+BEGIN_SRC emacs-lisp
(ph/install-package 'beacon)
(beacon-mode 1)
(setq beacon-color "orange")
#+END_SRC

** Fancy stuff

Disable fancy GUI stuff

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

** Frame Title

Show the buffer-name, projectile-project-name and major-mode in the frame title.
Use the same title for unfocussed/stacked frames.

#+BEGIN_SRC emacs-lisp
(setq ph/frame-title-format
      '(""
        "%b"
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format " | %s" project-name))))
        " | %m"))
(setq frame-title-format ph/frame-title-format)
(setq icon-title-format ph/frame-title-format)
#+END_SRC

** Fringe

Tiny fringe on the right side of the frame. The left side needs a fringe for
=FlyCheck=.

#+BEGIN_SRC emacs-lisp
(fringe-mode '(8 . 2))
#+END_SRC
