#+TITLE: Emacs Configuration

* Installation

#+BEGIN_SRC shell
$ cd ~/git
$ git clone http://github.com/pascalhuber/emacs
$ ln -s ~/git/emacs ~/.emacs.d
#+END_SRC

** Mu4e

Install and configure the following.

 - [[https://github.com/djcb/mu][mu]]
 - [[https://github.com/OfflineIMAP/offlineimap][offlineimap]]

Make sure mu has indexed everything

#+BEGIN_SRC shell
$ mu index --maildir=~/.mail
#+END_SRC

** Spaceline

 - [[https://github.com/ryanoasis/nerd-fonts][nerd-fonts]]

Install Nerd-Fonts

#+BEGIN_SRC shell
$ pacaur -S nerd-fonts-complete
#+END_SRC

** Flyspell

#+BEGIN_SRC shell
$ pacaur -S aspell aspell-e aspell-de
#+END_SRC

** Markdown

 - [[https://github.com/jgm/pandoc][pandoc]]

#+BEGIN_SRC shell
$ pacaur -S pandoc
#+END_SRC

** Web Development

Install =npm= dependencies

#+BEGIN_SRC shell
$ npm install -g eslint babel-eslint eslint-plugin-react tern js-beautify
#+END_SRC

** Python Development

Setup Python Development Envirnoment.

#+BEGIN_SRC shell
$ sudo pacman -S python-pip python-virtualenv python2-virtualenv
$ pip install --user jedi flake8 autopep8 yapf
$ mkdir $WORKON_HOME
#+END_SRC

* Dependencies
** Installation

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))

(defvar my-packages '(
                      ac-math
                      ag
                      airline-themes
                      auctex
                      auto-complete
                      auto-package-update
                      beacon
                      browse-kill-ring
                      cider
                      clj-refactor
                      comment-tags
                      company
                      company-tern
                      company-web
                      counsel
                      counsel-projectile
                      dash
                      default-text-scale
                      dictcc
                      dictionary
                      diminish
                      dumb-jump
                      elfeed
                      elfeed-org
                      elfeed-goodies
                      elpy
                      evil
                      evil-ediff
                      evil-leader
                      evil-magit
                      evil-nerd-commenter
                      evil-org
                      evil-surround
                      fill-column-indicator
                      free-keys
                      fsharp-mode
                      grizzl
                      evil-god-state
                      haml-mode
                      helm-ag
                      helm-projectile
                      inf-ruby
                      ivy
                      js2-mode
                      js2-refactor
                      lua-mode
                      markdown-mode
                      moe-theme
                      mu4e-alert
                      mu4e-maildirs-extension
                      openwith
                      org-ref
                      php-mode
                      powerline
                      projectile
                      rainbow-delimiters
                      rainbow-mode
                      smex
                      spaceline
                      swiper
                      tern
                      tern-auto-complete
                      unbound
                      use-package
                      virtualenvwrapper
                      web-beautify
                      web-mode
                      yaml-mode
                      xref-js2))

(dolist (p my-packages)
  (unless (package-installed-p p)
    (package-refresh-contents)
    (package-install p))
  (add-to-list 'package-selected-packages p))

(add-to-list 'load-path "~/.emacs.d/vendor/")
#+END_SRC

** Update

#+BEGIN_SRC emacs-lisp
(auto-package-update-maybe)
#+END_SRC
 
* Main
** Symlinks

Always Follow Symlinks, no questions asked.

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks nil)
#+END_SRC

** Disabled Commands

Enable them all.

#+BEGIN_SRC emacs-lisp
(setq disabled-command-function nil)
#+END_SRC

** Backup and Auto-Save Files

Backup and Auto-Save to =/tmp=.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

** Scroll

When scrolling, keep the cursor at the same position.

#+BEGIN_SRC emacs-lisp
(setq scroll-preserve-screen-position 'keep)
#+END_SRC

** Buffers and Frames

Split function wich open the previous buffer in the new window instead of showing the current buffer twice.

#+BEGIN_SRC emacs-lisp
(defun my-vsplit-last-buffer ()
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer))

(defun my-hsplit-last-buffer ()
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer))
#+END_SRC

Open previous buffer in new frame.

#+BEGIN_SRC emacs-lisp
(defun my-open-last-buffer ()
  (interactive)
  (switch-to-buffer-other-frame (other-buffer)))
#+END_SRC

** Session

#+BEGIN_SRC emacs-lisp
(require 'session)
    (add-hook 'after-init-hook 'session-initialize)
#+END_SRC

** Kill Buffers

#+BEGIN_SRC emacs-lisp
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer
        (delq (current-buffer) (buffer-list))))
#+END_SRC

Never kill *\ast{}scratch\ast{}* or *\ast{}Messages\ast{}*

#+BEGIN_SRC emacs-lisp
(setq my-buffer-kill-regexp
      "\\(\\*scratch\\*\\|\\*Messages\\*\\)")

(add-hook 'kill-buffer-query-functions
          (lambda ()
            (not (string-match-p my-buffer-kill-regexp
                                 (buffer-name)))))
#+END_SRC

** Garbage Collection

Don't collect garbage while a minibuffer is opened.

#+BEGIN_SRC emacs-lisp
(setq my-gc-cons-threshold 20000000)

(defun disable-gc ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun enable-gc ()
  (setq gc-cons-threshold my-gc-cons-threshold))

(add-hook 'minibuffer-setup-hook #'disable-gc)
(add-hook 'minibuffer-exit-hook #'enable-gc)

(setq gc-cons-threshold my-gc-cons-threshold)
#+END_SRC

** Sudo Save

Save file with sudo.

#+BEGIN_SRC emacs-lisp
(defun sudo-file-name (filename)
  "prepends '/sudo:root@localhost:' if not already present"
  (if (not (string-prefix-p "/sudo:root@localhost:" filename))
      (concat "/sudo:root@localhost:" filename)
    filename))

(defun sudo-save ()
  "save file with sudo"
  (interactive)
  (if (not buffer-file-name)
      (write-file (sudo-file-name (ido-read-file-name "File:")))
    (write-file (sudo-file-name buffer-file-name))))
#+END_SRC

** Browser

Use =chromium --incognito= as browser.

#+BEGIN_SRC emacs-lisp
(setq browse-url-generic-program "/usr/bin/chromium"
      browse-url-generic-args '("--incognito")
      browse-url-browser-function 'browse-url-generic)
#+END_SRC

** Evil

I am evil.

#+BEGIN_SRC emacs-lisp
(require 'evil-org)
(require 'evil-ediff)
(require 'evil)
(evil-mode 1)
#+END_SRC

Evil commands

#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "ww" 'sudo-save)
#+END_SRC

** Evil surround

- Add surrounding ~​'​~ with ~S'​~ from visual-state (use =viw= to mark current word)
- Change surrounding ~​'​~ to ~*~ with ~cs'*~
- Remove surrounding ~*~ with ~ds*~

#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+END_SRC

** God State

Make =evil-god-state= work also in visual-mode.

#+BEGIN_SRC emacs-lisp
(require 'evil-god-state)
(defun evil-visual-activate-hook (&optional command)
  "Enable Visual state if the region is activated."
  (unless (evil-visual-state-p)
    (evil-delay nil
        '(unless (or (evil-visual-state-p)
                     (evil-insert-state-p)
                     (evil-emacs-state-p)
                     (evil-god-state-p))
           (when (and (region-active-p)
                      (not deactivate-mark))
             (evil-visual-state)))
      'post-command-hook nil t
      "evil-activate-visual-state")))
(evil-visual-activate-hook)
#+END_SRC

** Spell Checking

#+BEGIN_SRC emacs-lisp
(require 'flyspell)
;(flyspell-mode 1)
(setq-default ispell-program-name "aspell")
(ispell-change-dictionary "en_GB")
#+END_SRC

Switch =ispell= language.

#+BEGIN_SRC emacs-lisp
(defun flyspell-switch-dictionary()
  "Switch between Swiss German and British English dictionaries"
  (interactive)
  (let* ((dic ispell-current-dictionary)
         (change (if (string= dic "de_CH") "en_GB" "de_CH")))
    (ispell-change-dictionary change)
    (message "Dictionary switched from %s to %s" dic change)))
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
(projectile-global-mode)
(setq projectile-completion-system 'grizzl)
(setq projectile-enable-caching t)
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
(helm-projectile-on)
#+END_SRC

** Ivy

Ivy completion instead of ido

#+BEGIN_SRC emacs-lisp
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "(%d/%d) ")
#+END_SRC

Ivy Completion

#+BEGIN_SRC emacs-lisp
(setq ivy-re-builders-alist
      '((t . ivy--regex-plus)))
#+END_SRC

** Dired

Usage:
 - =a= to open a file or directory in the current buffer
 - =RET= to open a file or directory in a new buffer
 - =o= to open a file or directory in a vertical split buffer 
 - =C-o= to open a file or directory in a vertical split buffer but keep the focus in the current buffer.
 - =C-c C-o= to open a file or directory in a new frame.

Reuse buffer

#+BEGIN_SRC emacs-lisp
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "(%d/%d) ")
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

Completion (back to defaul?)
Open in new frame

#+BEGIN_SRC emacs-lisp
(setq ivy-re-builders-alist
      '((t . ivy--regex-plus)))
(defun dired-find-file-other-frame ()
  "In Dired, visit this file or directory in another window."
  (interactive)
  (find-file-other-frame (dired-get-file-for-visit)))

(eval-after-load "dired"
  '(define-key dired-mode-map (kbd "C-c C-o") 'dired-find-file-other-frame))
#+END_SRC

** Feeds

Set up elfeed.

#+BEGIN_SRC emacs-lisp
(require 'elfeed)
(require 'elfeed-goodies)
(require 'elfeed-org)
(elfeed-goodies/setup)
(elfeed-org)
(setq rmh-elfeed-org-files (list "~/git/config/emacs/elfeed.org"))

(defun elfeed-search-format-date (date)
  (format-time-string "%d" (seconds-to-time date)))

(defun elfeed-goodies/search-header-draw ()
  "Returns the string to be used as the Elfeed header."
  (if (zerop (elfeed-db-last-update))
      (elfeed-search--intro-header)
    (let* ((separator-left (intern (format "powerline-%s-%s"
                                           elfeed-goodies/powerline-default-separator
                                           (car powerline-default-separator-dir))))
           (separator-right (intern (format "powerline-%s-%s"
                                            elfeed-goodies/powerline-default-separator
                                            (cdr powerline-default-separator-dir))))
           (db-time (seconds-to-time (elfeed-db-last-update)))
           (stats (-elfeed/feed-stats))
           (search-filter (cond
                           (elfeed-search-filter-active
                            "")
                           (elfeed-search-filter
                            elfeed-search-filter)
                           (""))))
      (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
          (search-header/draw-wide separator-left separator-right search-filter stats db-time)
        (search-header/draw-tight separator-left separator-right search-filter stats db-time)))))

(defun elfeed-goodies/entry-line-draw (entry)
  "Print ENTRY to the buffer."

  (let* ((title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
         (date (elfeed-search-format-date (elfeed-entry-date entry)))
         (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
         (feed (elfeed-entry-feed entry))
         (feed-title
          (when feed
            (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
         (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
         (tags-str (concat "[" (mapconcat 'identity tags ",") "]"))
         (title-width (- (window-width) elfeed-goodies/feed-source-column-width
                         elfeed-goodies/tag-column-width 4))
         (title-column (elfeed-format-column
                        title (elfeed-clamp
                               elfeed-search-title-min-width
                               title-width
                               title-width)
                        :left))
         (tag-column (elfeed-format-column
                      tags-str (elfeed-clamp (length tags-str)
                                             elfeed-goodies/tag-column-width
                                             elfeed-goodies/tag-column-width)
                      :left))
         (feed-column (elfeed-format-column
                       feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width)
                       :left)))

    (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
        (progn
          (insert (propertize date 'face 'elfeed-search-date-face) " ")
          (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
          (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
          (insert (propertize title 'face title-faces 'kbd-help title)))
      (insert (propertize title 'face title-faces 'kbd-help title)))))

#+END_SRC

** Mu4e
*** Setup

Load it.

#+BEGIN_SRC emacs-lisp
(require 'mu4e)
(require 'mu4e-maildirs-extension)
(require 'mu4e-contrib)
(require 'smtpmail)
#+END_SRC

Open mu4e anyway.

#+BEGIN_SRC emacs-lisp
(defun my-mu4e ()
  (interactive)
  (let ((b (get-buffer "*mu4e-headers*")))
    (if b
        (switch-to-buffer b)
      (mu4e))))
#+END_SRC

Dont reply to myself.

#+BEGIN_SRC emacs-lisp
(setq mu4e-compose-dont-reply-to-self t)
#+END_SRC

My contexts.

#+BEGIN_SRC emacs-lisp
(setq mu4e-contexts nil)
(load-file "~/git/config/emacs/private.el")
(setq mu4e-context-policy 'pick-first)
(setq mu4e-compose-context-policy 'ask-if-none)
#+END_SRC

Sending messages.

#+BEGIN_SRC emacs-lisp
(setq message-send-mail-function 'smtpmail-send-it)
(setq starttls-use-gnutls t)
(setq smtpmail-debug-info t)
#+END_SRC

Activate Alert

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
#+END_SRC

Show me the addresses, not only names.

#+BEGIN_SRC emacs-lisp
(setq mu4e-view-show-addresses t)
#+END_SRC

Show text, not html.

#+BEGIN_SRC emacs-lisp
(setq mu4e-html2text-command 'mu4e-shr2text)
#+END_SRC

No automatic line breaks.

#+BEGIN_SRC emacs-lisp
(defun no-auto-fill ()
  "Turn off auto-fill-mode."
  (auto-fill-mode -1))
(add-hook 'mu4e-compose-mode-hook #'no-auto-fill)
#+END_SRC

View mail in browser (with "aV").

#+BEGIN_SRC emacs-lisp
(add-to-list 'mu4e-view-actions
             '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#+END_SRC

Skip duplicates

#+BEGIN_SRC emacs-lisp
(setq mu4e-headers-skip-duplicates t)
#+END_SRC

Some self explanatory settings.

#+BEGIN_SRC emacs-lisp
(setq mu4e-maildir "~/.mail")
(setq mu4e-get-mail-command "offlineimap -o")
(setq message-kill-buffer-on-exit t)
#+END_SRC

*** Forgotten Attachment

Check for forgotten attachments

#+BEGIN_SRC emacs-lisp
(defvar my-message-attachment-regexp
  (concat "\\("
          "[Ww]e send\\|"
          "[Ii] send\\|"
          "attach\\|"
          "[aA]nhang\\|"
          "[aA]ngehängt\\|"
          "[sS]chicke\\|"
          "haenge\\|"
          "hänge\\)"))
(defun my-message-check-attachment nil
  "Check if there is an attachment in the message if I claim it."
  (save-excursion
    (message-goto-body)
    (when (search-forward-regexp my-message-attachment-regexp nil t nil)
      (message-goto-body)
      (unless (message-y-or-n-p
               "Did you attach all documents?" nil nil)
        (error "No message sent, add them attachments!")))))
(add-hook 'message-send-hook 'my-message-check-attachment)
#+END_SRC

** Browse-Kill-Ring

#+BEGIN_SRC emacs-lisp
(require 'browse-kill-ring)
(setq browse-kill-ring-highlight-inserted-item t
      browse-kill-ring-highlight-current-entry nil
      browse-kill-ring-show-preview t)
(define-key browse-kill-ring-mode-map (kbd "j") 'browse-kill-ring-forward)
(define-key browse-kill-ring-mode-map (kbd "k") 'browse-kill-ring-previous)
#+END_SRC

** Project Terminals

Start/Stop urxvt clients in project folder.

Note: Urxvt's =-name= option which sets the =WM_CLASS= attribute does not seem to work with i3. Thus, =-title= is used to place the terminals on the correct workspace.

#+BEGIN_SRC emacs-lisp
(defun project-terminal-command-list (directory workspace-number)
  "Command list to start a terminal in DIRECTORY on WORKSPACE-NUMBER."
  (list "/usr/bin/urxvtc"
        "-cd" directory
        "-title" (concat "project-terminal-"
                         (number-to-string (mod workspace-number 10)))))

(setq project-terminal-amount-prompt
      "How many terminals does my master wish to spawn? :")
(setq project-terminal-amount-default 3)

(setq project-terminal-workspace-prompt
      "On which workspace does my master wish to spawn them? :")
(setq project-terminal-workspace-default 6)

(defun spawn-one-project-terminal ( &optional workspace-number)
  "Start one terminal in the current project directory on WORKSPACE-NUMBER."
  (interactive)
  (unless workspace-number
    (setq workspace-number
          (read-number project-terminal-workspace-prompt
                       project-terminal-workspace-default)))
  (let ((dir (projectile-project-p)))
    (if dir
        (progn
          (setq project-terminal-buffer
                (get-buffer-create "project-terminals"))
           (make-process
            :name (concat "project-terminal-" dir)
            :buffer project-terminal-buffer
            :command (project-terminal-command-list dir workspace-number)))
      (message "You're not in a project"))))

(defun spawn-some-project-terminals (&optional amount workspace-number)
  "Start AMOUNT terminals on WORKSPACE-NUMBER in the current project directory."
  (interactive)
  (unless amount
    (setq amount (read-number project-terminal-amount-prompt
                              project-terminal-amount-default)))
  (unless workspace-number
    (setq workspace-number
          (read-number project-terminal-workspace-prompt
                       project-terminal-workspace-default)))
  (while (> amount 0)
    (spawn-one-project-terminal workspace-number)
    (setq amount (- amount 1))))
#+END_SRC

* Programming
** Matching Brackets

#+BEGIN_SRC emacs-lisp
(setq show-paren-style 'mixed)
(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook #'show-paren-mode)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

** Line numbers

Show line numbers in programming modes

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook '(lambda () (linum-mode)))
#+END_SRC

** Indentation

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)
(setq js-indent-level 2)
(setq python-indent 2)
(setq css-indent-offset 2)
(add-hook 'sh-mode-hook
          (lambda ()
            (setq sh-basic-offset 2
                  sh-indentation 2)))
#+END_SRC

** Autocomplete

#+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(ac-config-default)
#+END_SRC

** Company Mode

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

** 70 columns indicator.

#+BEGIN_SRC emacs-lisp
(require 'fill-column-indicator)
(setq fci-rule-width 1)
(setq fci-rule-color "red")
#+END_SRC

** Rainbow Mode

This minor mode sets background color to strings that match color
names, e.g. #0000ff is displayed in white with a blue background

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'rainbow-mode)
#+END_SRC

** Web mode

#+BEGIN_SRC emacs-lisp
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tag?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . web-mode))

(defun my-web-mode-indent-hook ()
  "Hooks for Web mode."
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-script-padding 2)
  (setq web-mode-style-padding 2)
  (setq web-mode-script-padding 2)
  (setq web-mode-block-padding 0)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t))

(add-hook 'web-mode-hook 'my-web-mode-indent-hook)
#+END_SRC

Auto complete

#+BEGIN_SRC emacs-lisp
(require 'company)                                   ; load company mode
(require 'company-web-html)                          ; load company mode html backend
(require 'company-web-jade)                          ; load company mode jade backend
(require 'company-web-slim)                          ; load company mode slim backend
(add-hook 'web-mode-hook 'company-mode)
(define-key web-mode-map (kbd "M-SPC") 'company-complete)

;; JavaScript with Tern
(defun my-web-mode-tern-hook ()
  "Hook for `web-mode'."
    (set (make-local-variable 'company-backends)
         '(company-tern company-web-html company-yasnippet company-files)))
(add-hook 'web-mode-hook 'my-web-mode-tern-hook)

;; Enable JavaScript completion between <script>...</script> etc.
(advice-add 'company-tern :before
            #'(lambda (&rest _)
                (if (equal major-mode 'web-mode)
                    (let ((web-mode-cur-language
                          (web-mode-language-at-pos)))
                      (if (or (string= web-mode-cur-language "javascript")
                              (string= web-mode-cur-language "jsx"))
                          (unless tern-mode (tern-mode))
                        (if tern-mode (tern-mode -1)))))))

#+END_SRC

linting

#+BEGIN_SRC emacs-lisp
(require 'flycheck)
(add-hook 'after-init-hook #'global-flycheck-mode)
(setq-default flycheck-disabled-checkers
              (append flycheck-disabled-checkers
                      '(json-jsonlist)))
(setq-default flycheck-disabled-checkers
              (append flycheck-disabled-checkers
                      '(javascript-jshint)))
(flycheck-add-mode 'javascript-eslint 'web-mode)
#+END_SRC

** Web-beautify

Keybinding to beautify manually.

#+BEGIN_SRC emacs-lisp
(require 'web-beautify)
(eval-after-load 'js2-mode
  '(define-key js2-mode-map (kbd "C-c b") 'web-beautify-js))
(eval-after-load 'js
  '(define-key js-mode-map (kbd "C-c b") 'web-beautify-js))
(eval-after-load 'json-mode
  '(define-key json-mode-map (kbd "C-c b") 'web-beautify-js))
(eval-after-load 'sgml-mode
  '(define-key html-mode-map (kbd "C-c b") 'web-beautify-html))

(eval-after-load 'web-mode
  '(define-key web-mode-map (kbd "C-c b") 'web-beautify-html))
(eval-after-load 'web-mode
  '(define-key web-mode-map (kbd "C-c n") 'web-beautify-js))
(eval-after-load 'web-mode
  '(define-key web-mode-map (kbd "C-c m") 'web-beautify-css))

(eval-after-load 'css-mode
  '(define-key css-mode-map (kbd "C-c b") 'web-beautify-css))
#+END_SRC

** Latex

#+BEGIN_SRC emacs-lisp
(setq TeX-parse-self t)
(setq TeX-auto-save t)
(setq-default TeX-master nil)
#+END_SRC

In Evince use =Control + Left Click= for backward search.

#+BEGIN_SRC emacs-lisp
(setq TeX-PDF-mode t)
(setq TeX-view-program-selection '((output-pdf "Evince")))
(add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
(setq TeX-source-correlate-start-server t)
#+END_SRC

** Ruby

No magic comments

#+BEGIN_SRC config
(setq ruby-insert-encoding-magic-comment nil)
#+END_SRC

** Rspec-mode
   
Put the following in the =Gemfile=.
   
#+BEGIN_SRC config
gem 'spring-commands-rspec'
#+END_SRC

Usage:

- =C-c , s= Verify the example or method defined at point
- =C-c , m= Run all specs related to the current buffer
- =C-c , a= Run spec for entire project
- [[https://github.com/pezra/rspec-mode#usage][and more]]
  
Load it.

#+BEGIN_SRC emacs-lisp
(require 'ansi-color)
(add-to-list 'load-path "~/.emacs.d/vendor/rspec-mode")
(require 'rspec-mode)
(eval-after-load 'rspec-mode
 '(rspec-install-snippets))
#+END_SRC

When you've hit the breakpoint, hit C-x C-q to enable inf-ruby.

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'inf-ruby-switch-setup)
#+END_SRC

** Python

Virtual-Environment handling  shell:
   - create a virtualenv: `mkvirtualenv -p /usr/bin/python2.7 theproject`
   - activate virtualenv: `workon theproject`
   - exit the env: `deactivate`
   - delete the env: `rmvirtualenv theproject`

Virtual-Envirnoment handling with emacs:
   - create a virtualenv: `M-x venv-mkvirtualenv-using`
   - activate virtualenv: `M-x venv-workon`
   - exit the env with: `M-x venv-deactivate`
   - delete the env: `M-x venv-rmvirtualenv`

pip in Virtual-Envirnoment
   - save pip dependencies: `pip freeze > requirements.txt`
   - install pip dependencies `pip install -r requirements.txt`

Debugging with `import pdb` , `pdb.set_trace()`, `python -m pdb script.py`


#+BEGIN_SRC emacs-lisp
(elpy-enable)
(require 'virtualenvwrapper)
(venv-initialize-eshell)
#+END_SRC

** Markdown Mode

#+BEGIN_SRC emacs-lisp
(require 'markdown-mode)
(setq markdown-command "pandoc")
#+END_SRC

* Keybindings
** Mu4e

#+BEGIN_SRC emacs-lisp
(define-key mu4e-main-mode-map (kbd "U") 'mu4e-update-index)
(add-hook 'mu4e-view-mode-hook
          (lambda()
            (local-set-key (kbd "<tab>") 'shr-next-link)
            (local-set-key (kbd "i") 'mu4e-view-toggle-html)
            (local-set-key (kbd "h") 'evil-backward-char)
            (local-set-key (kbd "<backtab>") 'shr-previous-link)))
#+END_SRC

** Elfeed

#+BEGIN_SRC emacs-lisp
(add-hook 'elfeed-search-mode-hook
          (lambda ()
            (define-key evil-normal-state-local-map
              (kbd "c") 'elfeed-reset-filter)
            (define-key evil-normal-state-local-map
              (kbd "r") 'elfeed-toggle-filter-unread)
            (define-key evil-normal-state-local-map
              (kbd "F") 'elfeed-search-live-filter)
            (define-key evil-normal-state-local-map
              (kbd "!") 'elfeed-search-untag-all-unread)
            (define-key evil-normal-state-local-map
              (kbd "u") 'elfeed-search-tag-all-unread)
            (define-key evil-normal-state-local-map
              (kbd "O") 'elfeed-search-browse-url)
            (define-key evil-normal-state-local-map
              (kbd "U") 'elfeed-update)
            (define-key evil-normal-state-local-map
              (kbd "RET") 'elfeed-goodies/split-search-show-entry)))
(add-hook 'elfeed-show-mode-hook
          (lambda ()
            (define-key evil-normal-state-local-map
              (kbd "n") 'elfeed-goodies/split-show-next)
            (define-key evil-normal-state-local-map
              (kbd "p") 'elfeed-goodies/split-show-prev)))
#+END_SRC

** Ido

#+BEGIN_SRC emacs-lisp
(define-key ido-common-completion-map (kbd "C-n") 'ido-next-match)
(define-key ido-common-completion-map (kbd "C-p") 'ido-prev-match)
#+END_SRC

** Evil

Escape with =C-g=

#+BEGIN_SRC emacs-lisp
(defun my-esc (prompt)
  "Functionality for escaping generally"
  (cond
   ((or (evil-insert-state-p)
        (evil-normal-state-p)
        (evil-replace-state-p)
        (evil-visual-state-p))
    [escape])
   (t (kbd "C-g"))))
(define-key key-translation-map (kbd "C-g") 'my-esc)
(define-key evil-operator-state-map (kbd "C-g") 'keyboard-quit)
(set-quit-char "C-g")
#+END_SRC

Move cursor up and down on visual lines with =j= and =k=

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
#+END_SRC

Redo with =U=

#+BEGIN_SRC emacs-lisp
(evil-global-set-key 'normal "U" 'undo-tree-redo)
#+END_SRC

God state with =,=

#+BEGIN_SRC emacs-lisp
(evil-global-set-key 'motion "," 'evil-execute-in-god-state)
(evil-global-set-key 'motion [escape] 'evil-god-state-bail)
#+END_SRC

Swiper instead of evil-search-forward with =/= 

#+BEGIN_SRC emacs-lisp
(evil-global-set-key 'normal "/" 'swiper)
#+END_SRC

** Global

#+BEGIN_SRC emacs-lisp
(defvar my-global-keymap
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "M-x")      'helm-M-x)
    (define-key map (kbd "C-s")      'swiper)
    (define-key map (kbd "C-x 2")    'my-vsplit-last-buffer)
    (define-key map (kbd "C-x 3")    'my-hsplit-last-buffer)
    (define-key map (kbd "C-x 7")    'my-open-last-buffer)
    (define-key map (kbd "C-x C-f")  'helm-find-files)
    (define-key map (kbd "C-x C-b")  'helm-buffers-list)
    (define-key map (kbd "C-x b")    'helm-mini)
    (define-key map (kbd "C-c e")    'elfeed)
    (define-key map (kbd "C-c f")    'helm-projectile-find-file)
    (define-key map (kbd "C-c i")    'indent-region)
    (define-key map (kbd "C-c j")    'helm-projectile-switch-to-buffer)
    (define-key map (kbd "C-c k")    'helm-ag)
    (define-key map (kbd "C-c r")    'my-mu4e)
    (define-key map (kbd "C-c s")    'spawn-some-project-terminals)
    (define-key map (kbd "C-c m")    'magit-status)
    (define-key map (kbd "C-c p b")  'helm-projectile-switch-to-buffer)
    (define-key map (kbd "C-c p p")  'helm-projectile-switch-project)
    (define-key map (kbd "<f1> f")   'counsel-describe-function)
    (define-key map (kbd "<f1> v")   'counsel-describe-variable)
    (define-key map (kbd "<f2> u")   'counsel-unicode-char)
    (define-key map (kbd "<f5>")     'next-theme)
    map)
  "my-global-keys-mode keymap.")

(define-minor-mode my-global-keys-mode
  :init-value t
  :keymap my-global-keymap
  :lighter "keys")

(my-global-keys-mode 1)
#+END_SRC

* User Interface
** Spaceline

#+BEGIN_SRC emacs-lisp
(require 'powerline)

(use-package spaceline :ensure t
  :config
  (setq-default mode-line-format '("%e" (:eval (spaceline-ml-main)))))
#+END_SRC

*** Segments and Faces
**** Main Faces

#+BEGIN_SRC emacs-lisp
(defun spaceline-light()
  (interactive)
  (set-face-attribute 'mode-line nil
                      :foreground "black"
                      :background "gray66")
  (set-face-attribute 'powerline-active1 nil
                      :foreground "black"
                      :background "gray77")
  (set-face-attribute 'powerline-active2 nil
                      :foreground "black"
                      :background "gray88")
  (powerline-reset))

(defun spaceline-dark()
  (interactive)
  (set-face-attribute 'mode-line nil
                      :foreground "black"
                      :background "gray53")
  (set-face-attribute 'powerline-active1 nil
                      :foreground "black"
                      :background "gray66")
  (set-face-attribute 'powerline-active2 nil
                      :foreground "black"
                      :background "gray40")
  (powerline-reset))

(defface red-face
  '((t :inherit 'mode-line
       :foreground "white"
       :background "red4"))
  "Ugly Alert Theme"
  :group 'spaceline)
#+END_SRC

**** Flycheck

#+BEGIN_SRC emacs-lisp

(defface my-flycheck-warning-face
  '((t (:foreground "black"
        :background "orange"
        :inherit 'mode-line)))
  "Flycheck warning face"
  :group 'spaceline)

(defface my-flycheck-error-face
  '((t (:foreground "black"
        :background "red"
        :inherit 'mode-line)))
  "Flycheck warning face"
  :group 'spaceline)

(defface my-flycheck-info-face
  '((t (:foreground "black"
        :background "green"
        :inherit 'mode-line)))
  "Flycheck warning face"
  :group 'spaceline)

(spaceline-define-segment my-flycheck-warning-segment
  (if (flycheck-has-current-errors-p)
      (let ((c (cdr (assq 'warning (flycheck-count-errors
                                    flycheck-current-errors)))))
        (powerline-raw
         (if c (format "\uf071 %s" c))))))

(spaceline-define-segment my-flycheck-error-segment
  (if (flycheck-has-current-errors-p)
      (let ((c (cdr (assq 'error (flycheck-count-errors
                                    flycheck-current-errors)))))
        (powerline-raw
         (if c (format "\uf12a %s" c))))))

(spaceline-define-segment my-flycheck-info-segment
  (if (flycheck-has-current-errors-p)
      (let ((c (cdr (assq 'info (flycheck-count-errors
                                    flycheck-current-errors)))))
        (powerline-raw
         (if c (format "\uf05a %s" c))))))
#+END_SRC

**** Evil

=evil-god-state=

#+BEGIN_SRC emacs-lisp
(defface spaceline-evil-god
  '((t (:background "tomato"
        :inherit 'spaceline-evil-normal)))
  "Spaceline Evil God State"
  :group 'spaceline)

(add-to-list 'spaceline-evil-state-faces
             '(god . spaceline-evil-god))
#+END_SRC

=evil-operator-state=

#+BEGIN_SRC emacs-lisp
(defface spaceline-evil-operator
  '((t (:background "cornflower blue"
        :inherit 'spaceline-evil-normal)))
  "Spaceline Evil Operator State"
  :group 'spaceline)

(add-to-list 'spaceline-evil-state-faces
             '(operator . spaceline-evil-operator))
#+END_SRC

Setting the face according to =evil-state=.

#+BEGIN_SRC emacs-lisp
(defun my-spaceline-highlight-face-evil-state ()
  "Set the highlight face depending on the evil state.
Set `spaceline-highlight-face-func' to
`spaceline-highlight-face-evil-state' to use this."
  (if (bound-and-true-p evil-local-mode)
      (let* ((face (assq evil-state spaceline-evil-state-faces)))
        (if face (cdr face) (spaceline-highlight-face-default)))
    (spaceline-highlight-face-default)))
#+END_SRC

**** Python Virtual Environment

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment virtualenvwrapper-segment venv-current-name)
#+END_SRC

**** Git status (using [[https://github.com/ryanoasis/nerd-fonts][Nerd Fonts]])

#+BEGIN_SRC emacs-lisp
(defun git-branch-name ()
  (replace-regexp-in-string "^ Git[:-]" "" vc-mode))

(spaceline-define-segment my-version-control
  "Version control information."
  (when vc-mode
    (powerline-raw
     (s-trim (concat (git-branch-name))))))
#+END_SRC

**** File permissions 

Indicate if current file has "special" permissions.

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment buffer-special-file-permissions
  (if (and (buffer-file-name)
           (not (file-ownership-preserved-p (buffer-file-name))))
      (powerline-raw
       (concat (if (file-readable-p (buffer-file-name)) "r" "-")
               (if (file-writable-p (buffer-file-name)) "w" "-")))))
#+END_SRC

*** Diminish Minor Modes

Do not show the following minor modes

#+BEGIN_SRC emacs-lisp
(eval-after-load "god-mode"
  '(diminish 'god-local-mode))
(eval-after-load "rainbow-mode"
  '(diminish 'rainbow-mode))
(eval-after-load "projectile"
  '(diminish 'projectile-mode))
(eval-after-load "beacon"
  '(diminish 'beacon-mode))
(eval-after-load "auto-revert"
  '(diminish 'auto-revert-mode))
#+END_SRC

*** Putting it all together

#+BEGIN_SRC emacs-lisp
(use-package spaceline-config :ensure spaceline
  :config
  (spaceline-helm-mode 1)
  (spaceline-spacemacs-theme)
  (spaceline-install
    'main
    '((evil-state :when active :face highlight-face)
      (virtualenvwrapper-segment)
      (buffer-special-file-permissions :face red-face)
      ((remote-host buffer-id))
      (buffer-modified)
      (process :when active))
    '((minor-modes)
      (anzu)
      (projectile-root)
      (my-version-control :when active)
      (line-column)
      (buffer-position)
      (my-flycheck-info-segment :face my-flycheck-info-face)
      (my-flycheck-warning-segment :face my-flycheck-warning-face)
      (my-flycheck-error-segment :face my-flycheck-error-face)
      (major-mode))))

;; mode-line always active
(defun powerline-selected-window-active () t)

(setq-default
 powerline-height 20
 spaceline-highlight-face-func 'my-spaceline-highlight-face-evil-state
 spaceline-separator-dir-left '(right . right)
 spaceline-separator-dir-right '(left . left)
 powerline-text-scale-factor 0.9)
#+END_SRC

Compile the modeline with =M-x spaceline-compile=.

** Theme Rotation

Call =(next-theme)= to load the next theme.

#+BEGIN_SRC emacs-lisp
(require 'moe-theme)
(require 'dash)

(setq theme-list (list (list '(load-theme moe-dark t)
                             '(spaceline-dark))
                       (list '(load-theme moe-light t)
                             '(spaceline-light))))

(defun next-theme ()
  "Loads next theme in the theme-list and rotates the list"
  (interactive)
  (cl-loop for f in (nth 0 theme-list) do (apply f))
  (setq theme-list (-rotate 1 theme-list)))

(add-hook 'after-init-hook #'next-theme)
#+END_SRC

** Beacon

Whenever the window scrolls a light will shine on top of your cursor so you know where it is.

#+BEGIN_SRC emacs-lisp
(beacon-mode 1)
(setq beacon-color "orange")
#+END_SRC

** Font

Scale font locally with =C-x C-+= and =C-x C--=.

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "DejaVu Sans Mono"
                    :height 110
                    :weight 'normal
                    :width 'normal)
#+END_SRC

** Menu, toolbar and Splashscreen

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

